<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NRails.Core</name>
    </assembly>
    <members>
        <member name="T:NRails.Collections.AutoDiscardQueue`1">
            <summary>
            提供一个定长的队列，当该队列被填满时，如果继续向其压入元素将逐个自动丢弃先前加入的元素，该队列是线程不安全的，开发者必须手动控制线程安全
            </summary>
        </member>
        <member name="F:NRails.Collections.AutoDiscardQueue`1.array">
            <summary>
            内置数组
            </summary>
        </member>
        <member name="M:NRails.Collections.AutoDiscardQueue`1.#ctor(System.Int32)">
            <summary>
            创建一个AutoDiscardQueue
            </summary>
            <param name="capacity">初始大小，该值在运行过程中无法更改，除非重新实例化</param>
            <param name="emptyBlock">阻塞模式，true=当队列为空时，尝试从队列中获取元素将导致阻塞，false=不阻塞</param>
            <param name="unique">单元素模式，true=如果队列中已存在</param>
        </member>
        <member name="M:NRails.Collections.AutoDiscardQueue`1.Enqueue(`0)">
            <summary>
            以线程不安全的方式向队列中添加元素,当队列满时，此操作会引发MemberDiscarded事件
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Collections.AutoDiscardQueue`1.Enqueue(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将可枚举项加入队列
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:NRails.Collections.AutoDiscardQueue`1.OnMemberDiscarded(`0,`0)">
            <summary>
            当头元素被丢弃时执行
            </summary>
            <param name="headIndex">原头元素在数组中的位置</param>
            <param name="oldValue">原都元素值</param>
            <param name="newValue">新的头元素值</param>
        </member>
        <member name="M:NRails.Collections.AutoDiscardQueue`1.Dequeue">
            <summary>
            从队列中取出一个元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Collections.AutoDiscardQueue`1.Dequeue(System.Int32)">
            <summary>
            从队列中移除指定个数个元素
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:NRails.Collections.AutoDiscardQueue`1.Dequeue(System.Int32,`0[]@)">
            <summary>
            从队列中移除指定个数个元素
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:NRails.Collections.AutoDiscardQueue`1.Remove(`0)">
            <summary>
            从队列中移除一个对象
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NRails.Collections.AutoDiscardQueue`1.RemoveAt(System.Int32)">
            <summary>
            从队列中移除一个元素
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NRails.Collections.AutoDiscardQueue`1.Clear">
            <summary>
            清空队列
            </summary>
        </member>
        <member name="M:NRails.Collections.AutoDiscardQueue`1.Peek">
            <summary>
            返回队列的第一个元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Collections.AutoDiscardQueue`1.ToArray">
            <summary>
            返回该队列的元素数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Collections.AutoDiscardQueue`1.Push(`0)">
            <summary>
            向队列的头部压入元素，但不覆盖头元素，该操作是Dequeue的反向操作
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NRails.Collections.AutoDiscardQueue`1.Push(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            向队列的头部压入元素，但不覆盖头元素，该操作是Dequeue的反向操作
            </summary>
            <param name="items"></param>
        </member>
        <member name="P:NRails.Collections.AutoDiscardQueue`1.Size">
            <summary>
            返回队列的最大长度
            </summary>
        </member>
        <member name="P:NRails.Collections.AutoDiscardQueue`1.Count">
            <summary>
            返回队列元素个数
            </summary>
        </member>
        <member name="P:NRails.Collections.AutoDiscardQueue`1.Head">
            <summary>
            返回第一个元素
            </summary>
        </member>
        <member name="E:NRails.Collections.AutoDiscardQueue`1.MemberDiscard">
            <summary>
            当头元素被丢弃时引发
            </summary>
        </member>
        <member name="F:NRails.Collections.QueueMemberDiscardEventArg`1.OldValue">
            <summary>
            将要被剔除出去的元素
            </summary>
        </member>
        <member name="F:NRails.Collections.QueueMemberDiscardEventArg`1.NewValue">
            <summary>
            因为插入了该元素而导致了OldValue被移除
            </summary>
        </member>
        <member name="T:NRails.Collections.BucketItem`1">
            <summary>
            存储固定大小的集合类
            </summary>
        </member>
        <member name="T:NRails.Collections.Buckets`1">
            <summary>
            连续的存储固定大小集合的集合类
            </summary>
        </member>
        <member name="T:NRails.Collections.IndexableCollection`1">
            <summary>
            提供一个具有索引功能的集合，该类型是线程不安全的
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NRails.Collections.IndexableCollection`1.SupportVisitor.JudgeSupport(System.Linq.Expressions.Expression)">
            <summary>
            判定给定的节点是否使用了非索引查询
            </summary>
            <param name="node"></param>
            <returns>true=进行了一次字段判定</returns>
        </member>
        <member name="F:NRails.Collections.IndexableCollection`1.SearchWithoutIndexThrown">
            <summary>
            true=当尝试进行一次非索引查询时引发异常
            </summary>
        </member>
        <member name="M:NRails.Collections.IndexableCollection`1.ResetIndex">
            <summary>
            将索引重新排序
            </summary>
        </member>
        <member name="M:NRails.Collections.IndexableCollection`1.GetOne">
            <summary>
            尝试随机获取一个元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Collections.IndexableCollection`1.GetOne(System.Int32@)">
            <summary>
            尝试获取一个元素
            </summary>
            <returns></returns>
        </member>
        <member name="T:NRails.Collections.SkipList`1">
            <summary>
            Represnts a SkipList.  A SkipList is a combination of a BST and a sorted link list, providing
            sub-linear access, insert, and deletion running times.  It is a randomized data structure, randomly
            choosing the heights of the nodes in the SkipList.
            </summary>
            <typeparam name="T">Type type of elements contained within the SkipList.</typeparam>
        </member>
        <member name="P:NRails.Collections.SkipList`1.Height">
            <summary>
            Returns the height of the tallest SkipListNode in the SkipList.
            </summary>
        </member>
        <member name="P:NRails.Collections.SkipList`1.Comparisons">
            <summary>
            Returns the number of total comparisons made - used for perf. testing.
            </summary>
            <value></value>
        </member>
        <member name="P:NRails.Collections.SkipList`1.Count">
            <summary>
            Returns the number of elements in the SkipList
            </summary>
        </member>
        <member name="M:NRails.Collections.SkipList`1.ChooseRandomHeight(System.Int32)">
            <summary>
            Selects a height for a new SkipListNode using the "loaded dice" technique.
            The value selected is between 1 and maxLevel.
            </summary>
            <param name="maxLevel">The maximum value ChooseRandomHeight can return.</param>
            <returns>A randomly chosen integer value between 1 and maxLevel.</returns>
        </member>
        <member name="M:NRails.Collections.SkipList`1.Add(`0)">
            <summary>
            Adds a new element to the SkipList.
            </summary>
            <param name="value">The value to add.</param>
            <remarks>This SkipList implementation does not allow for duplicates.  Attempting to add a
            duplicate value will not raise an exception, it will simply exit the method without
            changing the SkipList.</remarks>
        </member>
        <member name="M:NRails.Collections.SkipList`1.Clear">
            <summary>
            Clears out the contents of the SkipList and creates a new head, with height 1.
            </summary>
        </member>
        <member name="M:NRails.Collections.SkipList`1.Contains(`0)">
            <summary>
            Determines if a particular element is contained within the SkipList.
            </summary>
            <param name="value">The value to search for.</param>
            <returns>True if value is found in the SkipList; false otherwise.</returns>
        </member>
        <member name="M:NRails.Collections.SkipList`1.Remove(`0)">
            <summary>
            Attempts to remove a value from the SkipList.
            </summary>
            <param name="value">The value to remove from the SkipList.</param>
            <returns>True if the value is found and removed; false if the value is not found
            in the SkipList.</returns>
        </member>
        <member name="M:NRails.Collections.SkipList`1.BuildUpdateTable(`0)">
            <summary>
            Creates a table of the SkipListNode instances that will need to be updated when an item is
            added or removed from the SkipList.
            </summary>
            <param name="value">The value to be added or removed.</param>
            <returns>An array of SkipListNode instances, as many as the height of the head node.
            A SkipListNode instance in array index k represents the SkipListNode at height k that must
            be updated following the addition/deletion.</returns>
        </member>
        <member name="M:NRails.Collections.SkipList`1.CopyTo(`0[])">
            <summary>
            Copies the contents of the SkipList to the passed-in array.
            </summary>
        </member>
        <member name="M:NRails.Collections.SkipList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the contents of the SkipList to the passed-in array.
            </summary>
        </member>
        <member name="M:NRails.Collections.SkipList`1.GetEnumerator">
            <summary>
            Returns an enumerator to access the contents of the SkipList.
            </summary>
        </member>
        <member name="M:NRails.Collections.SkipList`1.ToString">
            <summary>
            This overridden form of ToString() is simply for displaying detailed information
            about the contents of the SkipList, used by SkipListTester - feel free to remove it.
            </summary>
        </member>
        <member name="M:NRails.Collections.SkipList`1.ResetComparisons">
            <summary>
            Resets the internal comparison counter back to zero.  Used for performance testing (can be removed).
            </summary>
        </member>
        <member name="T:NRails.Collections.SkipList`1.NodeList`1">
            <summary>
            Represents a collection of Node&lt;T&gt; instances.
            </summary>
            <typeparam name="T">The type of data held in the Node instances referenced by this class.</typeparam>
        </member>
        <member name="M:NRails.Collections.SkipList`1.NodeList`1.Find(`1)">
            <summary>
            Searches the NodeList for a Node containing a particular value.
            </summary>
            <param name="value">The value to search for.</param>
            <returns>The Node in the NodeList, if it exists; null otherwise.</returns>
        </member>
        <member name="T:NRails.Collections.SkipList`1.Node`1">
            <summary>
            The Node&lt;T&gt; class represents the base concept of a Node for a tree or graph. 
            It contains a data item of type T, and a list of neighbors.
            </summary>
            <typeparam name="T">The type of data contained in the Node.</typeparam>
        </member>
        <member name="T:NRails.Collections.SkipList`1.SkipListNode`1">
            <summary>
            Represents a node in a SkipList.  A SkipListNode has a Height and a set of neighboring
            SkipListNodes (precisely as many neighbor references as its Height, although some neighbor 
            references may be null).  Also, a SkipListNode contains some piece of data associated with it.
            </summary>
            <typeparam name="T">The type of the data stored in the SkipListNode.</typeparam>
        </member>
        <member name="P:NRails.Collections.SkipList`1.SkipListNode`1.Height">
            <summary>
            Returns the height of the SkipListNode
            </summary>
        </member>
        <member name="P:NRails.Collections.SkipList`1.SkipListNode`1.Item(System.Int32)">
            <summary>
            Provides ordinally-indexed access to the neighbors of the SkipListNode.
            </summary>
        </member>
        <member name="M:NRails.Collections.SkipList`1.SkipListNode`1.IncrementHeight">
            <summary>
            Increases the height of the SkipListNode by 1.
            </summary>
        </member>
        <member name="M:NRails.Collections.SkipList`1.SkipListNode`1.DecrementHeight">
            <summary>
            Decreases the height of the SkipListNode by 1.
            </summary>
        </member>
        <member name="T:NRails.Collections.SkipList`1.SkipListNodeList`1">
            <summary>
            Represents a collection of SkipListNodes.  This class differs from the base class - NodeList -
            in that it contains an internal method to increment or decrement the height of the SkipListNodeList. 
            Incrementing the height adds a new neighbor to the list, decrementing the height removes the
            top-most neighbor.
            </summary>
            <typeparam name="T">The type of data stored in the SkipListNode instances that are contained
            within this SkipListNodeList.</typeparam>
        </member>
        <member name="M:NRails.Collections.SkipList`1.SkipListNodeList`1.IncrementHeight">
            <summary>
            Increases the size of the SkipListNodeList by one, adding a default SkipListNode.
            </summary>
        </member>
        <member name="M:NRails.Collections.SkipList`1.SkipListNodeList`1.DecrementHeight">
            <summary>
            Decreases the size of the SkipListNodeList by one, removing the "top-most" SkipListNode.
            </summary>
        </member>
        <member name="T:NRails.Collections.ListViewDataList`1">
            <summary>
            ListView的数据容器，自带线程安全机制
            </summary>
        </member>
        <member name="F:NRails.Collections.ListViewDataList`1.VisibleStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Collections.ListViewDataList`1.ReverseView">
            <summary>
            true=设置视图为颠倒模式
            </summary>
        </member>
        <member name="F:NRails.Collections.ListViewDataList`1.AutoRowNumber">
            <summary>
            true=自动将视图的第一列作为序号列
            </summary>
        </member>
        <member name="M:NRails.Collections.ListViewDataList`1.UpdateItemText(NRails.Collections.ListViewDataList{`0}.LvData)">
            <summary>
            
            </summary>
            <param name="lvData"></param>
            <param name="validate">true=修改数据时刷新UI</param>
        </member>
        <member name="F:NRails.Collections.ListViewDataList`1.ManualSort">
            <summary>
            true=允许在点击列头的时候进行排序,默认值：true
            </summary>
        </member>
        <member name="M:NRails.Collections.ListViewDataList`1.GetOne">
            <summary>
            尝试随机获取一个元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Collections.ListViewDataList`1.GetOne(System.Int32@)">
            <summary>
            尝试获取一个元素
            </summary>
            <returns></returns>
        </member>
        <member name="F:NRails.Collections.ListViewDataListGlobal.StopUpdate">
            <summary>
            true=全局停止所有视图更新，该字段用于调试性能
            </summary>
        </member>
        <member name="T:NRails.Collections.QueryableList`1">
            <summary>
            提供一个可用于查询的List，此类型是线程不安全的，二次开发必须手动控制线程模型
            </summary>
        </member>
        <member name="T:NRails.Collections.IndexList`1">
            <summary>
            前进/后退功能的数组
            </summary>
        </member>
        <member name="T:NRails.Collections.MethodQueue">
            <summary>
            一个方法队列，被加入到该队列中的方法将会顺序异步执行
            </summary>
        </member>
        <member name="M:NRails.Collections.MethodQueue.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Collections.MethodQueue.Disposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="P:NRails.Collections.MethodQueue.Tag">
            <summary>
            获取或设置附加对象
            </summary>
        </member>
        <member name="E:NRails.Collections.MethodQueue.TagChanged">
            <summary>
            当Tag属性改变时引发
            </summary>
        </member>
        <member name="M:NRails.Collections.MethodQueue.OnTagChanged">
            <summary>
            引发TagChanged事件
            </summary>
        </member>
        <member name="P:NRails.Collections.MethodQueue.Cancel">
            <summary>
            获取或设置Calcel状态
            </summary>
        </member>
        <member name="E:NRails.Collections.MethodQueue.CancelChanged">
            <summary>
            当Cancel属性改变时引发
            </summary>
        </member>
        <member name="M:NRails.Collections.MethodQueue.OnCancelChanged">
            <summary>
            引发CancelChanged事件
            </summary>
        </member>
        <member name="E:NRails.Collections.MethodObject.Error">
            <summary>
            当运行该方法时发生异常时引发
            </summary>
        </member>
        <member name="M:NRails.Collections.MethodObject.OnError(System.Object,System.IO.ErrorEventArgs)">
            <summary>
            引发Error事件
            </summary>
            <param name="sernder"></param>
            <param name="e"></param>
        </member>
        <member name="M:NRails.Collections.MethodObject.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Collections.MethodObject.Disposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="M:NRails.Collections.MethodObject.InvokeParam.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Collections.MethodObject.InvokeParam.Disposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="P:NRails.Collections.MethodObject.Tag">
            <summary>
            获取或设置附加对象
            </summary>
        </member>
        <member name="E:NRails.Collections.MethodObject.TagChanged">
            <summary>
            当Tag属性改变时引发
            </summary>
        </member>
        <member name="M:NRails.Collections.MethodObject.OnTagChanged">
            <summary>
            引发TagChanged事件
            </summary>
        </member>
        <member name="P:NRails.Collections.MethodObject.Cancel">
            <summary>
            获取或设置Calcel状态
            </summary>
        </member>
        <member name="E:NRails.Collections.MethodObject.CancelChanged">
            <summary>
            当Cancel属性改变时引发
            </summary>
        </member>
        <member name="M:NRails.Collections.MethodObject.OnCancelChanged">
            <summary>
            引发CancelChanged事件
            </summary>
        </member>
        <member name="T:NRails.Collections.NumberSortedList`1">
            <summary>
            有序的键/值对
            </summary>
        </member>
        <member name="M:NRails.Collections.NumberSortedList`1.GetMaxCloseValue(System.Double)">
            <summary>
            最接近健值的值, 使用二分查找
            </summary>
        </member>
        <member name="M:NRails.Collections.NumberSortedList`1.FindMaxCloseKey(System.Double,System.Int32,System.Int32)">
            <summary>
            最接近健值的键, 使用二分查找
            </summary>
        </member>
        <member name="M:NRails.Collections.NumberSortedList`1.FindMaxCloseKey(System.Double)">
            <summary>
            最接近健值的键, 使用二分查找
            </summary>
        </member>
        <member name="T:NRails.Collections.ReusableRange">
            <summary>
            提供一个类似于内存碎片管理的功能
            </summary>
        </member>
        <member name="F:NRails.Collections.ReusableRange.modifiredFlag">
            <summary>
            一个更改标签，用于二次开发使用，标识该集合是否已经被更改
            </summary>
        </member>
        <member name="F:NRails.Collections.ReusableRange.Start">
            <summary>
            存储起始位，用于二次开发使用
            </summary>
        </member>
        <member name="F:NRails.Collections.ReusableRange.Frees_Position">
            <summary>
            按照空间位置排序的空闲列表，该列表只有在添加空闲空间时才会作出改变,并且元素和Frees_Size是一样的，但是顺序不一样
            </summary>
        </member>
        <member name="F:NRails.Collections.ReusableRange.Frees_Size">
            <summary>
            按照空间大小进行排序的空闲列表，该列表只有在添加空闲空间时才会作出改变,并且元素和Frees_Position是一样的，但是顺序不一样
            </summary>
        </member>
        <member name="M:NRails.Collections.ReusableRange.UnsafeGetRange(System.Int32)">
            <summary>
            以线程不安全的模式从空闲列表中抽取大小和size最相近的空间
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Collections.ReusableRange.UnsafeGetRange1(System.Int32)">
            <summary>
            以线程不安全的模式从空闲列表中抽取等于size的空间，如果找不到则从最大的连续空间中抽取一部分
            </summary>
            <param name="size"></param>
            <param name="minSize"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Collections.ReusableRange.GetPos(System.Int32)">
            <summary>
            找到能够容纳指定大小的空间位置
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="P:NRails.Collections.ReusableRange.Size">
            <summary>
            获取该对象中的数据写入到到流中的数据大小，Count * sizeof(long) * 2;
            </summary>
        </member>
        <member name="T:NRails.Collections.SynchronizedList`1">
            <summary>
            线程安全的泛型集合类
            </summary>
        </member>
        <member name="M:NRails.Collections.SynchronizedList`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:NRails.Collections.SynchronizedList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:NRails.Collections.SynchronizedList`1.For(System.Action{`0})">
            <summary>
            线程安全的遍历
            </summary>
        </member>
        <member name="T:NRails.Collections.UsableCollection`2">
            <summary>
            提供一个对使用频率排序的对象列表,固定大小,并且在使用频率最低处的对象会被自动移除,该类型是线程不安全的,在多线程使用该类型时,必须使用lock关键字
            </summary>
        </member>
        <member name="F:NRails.Collections.UsableCollection`2.lst">
            <summary>
            按照UsableLevel从小到大排序的列表
            </summary>
        </member>
        <member name="F:NRails.Collections.UsableCollection`2._isAlive">
            <summary>
            当调用Dispose()或者析构函数[~UsableCollection()]时，该值会被设置为0
            </summary>
        </member>
        <member name="M:NRails.Collections.UsableCollection`2.Dispose(System.Boolean)">
            <summary>
            释放所占用的资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:NRails.Collections.UsableCollection`2.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:NRails.Collections.UsableCollection`2.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Collections.UsableCollection`2.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="T:NRails.Collections.VacantAreaCollection">
            <summary>
            提供一个空白可用空间的管理功能，该对象是线程不安全的，二次开发必须自主控制线程模型
            </summary>
        </member>
        <member name="F:NRails.Collections.VacantAreaCollection.vacantLocations">
            <summary>
            按照空间位置排序的空闲列表，该列表只有在添加空闲空间时才会作出改变,并且元素和Frees_Size是一样的，但是顺序不一样
            </summary>
        </member>
        <member name="F:NRails.Collections.VacantAreaCollection.vacantSizes">
            <summary>
            按照空间大小进行排序的空闲列表，该列表只有在添加空闲空间时才会作出改变,并且元素和Frees_Position是一样的，但是顺序不一样
            </summary>
        </member>
        <member name="M:NRails.Collections.VacantAreaCollection.GetSmall(System.Int32)">
            <summary>
            从空闲列表中抽取大小和size最相近的空间
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Collections.VacantAreaCollection.GetLarge(System.Int32)">
            <summary>
            从空闲列表中抽取等于size的空间，如果找不到则从最大的连续空间中抽取一部分
            </summary>
            <param name="size"></param>
            <param name="minSize"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Collections.VacantAreaCollection.GetPos(System.Int32)">
            <summary>
            找到能够容纳指定大小的空间位置
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="P:NRails.Collections.VacantAreaCollection.Size">
            <summary>
            获取该对象中的数据写入到到流中的数据大小，Count * sizeof(long) * 2;
            </summary>
        </member>
        <member name="M:NRails.Diagnostics.PerformanceWatcher.GetAverage">
            <summary>
            获取平均处理性能
            </summary>
            <returns></returns>
        </member>
        <member name="T:NRails.Diagnostics.WinLOG">
            <summary>
            用于记录系统事件日志
            </summary>
        </member>
        <member name="F:NRails.Diagnostics.WinLOG.SourceName">
            <summary>
            日志名称
            </summary>
        </member>
        <member name="F:NRails.Diagnostics.WinLOG._isAlive">
            <summary>
            在调用Dispose()函数或者析构函数时，该值会被设置为0
            </summary>
        </member>
        <member name="M:NRails.Diagnostics.WinLOG.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Diagnostics.WinLOG.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="M:NRails.Diagnostics.WinLOG.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sourceName"></param>
            <param name="logName"></param>
        </member>
        <member name="M:NRails.Diagnostics.WinLOG.Write(System.String,System.Exception,System.Diagnostics.EventLogEntryType)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
            <param name="type"></param>
        </member>
        <member name="M:NRails.Diagnostics.WinLOG.Write(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:NRails.Diagnostics.WinLOG.Write(System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="type"></param>
        </member>
        <member name="M:NRails.Diagnostics.WinLOG.Write(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NRails.Diagnostics.WinLOG.GetExceptionMessage(System.Exception)">
            <summary>
            
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:NRails.Diagnostics.WinLOG.OverflowAction">
            <summary>
            获取或设置当日志项满了之后要处理的日志模式
            </summary>
        </member>
        <member name="P:NRails.Diagnostics.WinLOG.RetentionDays">
            <summary>
            获取要在事件日志中保留项的天数
            </summary>
        </member>
        <member name="P:NRails.Diagnostics.WinLOG.MaximumKilobytes">
            <summary>
             获取或设置最大事件日志大小（以 KB 为单位）。
            </summary>
        </member>
        <member name="M:NRails.Diagnostics.WinLOG.RegistUnHandleException">
            <summary>
            注册全局异常处理机制
            </summary>
        </member>
        <member name="T:NRails.IO.ArraySegmentStream">
            <summary>
            提供对分割的字节数据进行读取的操作
            </summary>
        </member>
        <member name="T:NRails.IO.StreamAccess`1">
            <summary>
            以安全的方式写入或读取流数据，仅支持简单，定长的数据（例如：int ，double，float，bool，datetime 等）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:NRails.IO.StreamAccess`1.RealSize">
            <summary>
            字段存储在流中的实际大小
            </summary>
        </member>
        <member name="F:NRails.IO.StreamAccess`1.startPos">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="F:NRails.IO.StreamAccess`1._isAlive">
            <summary>
            在调用Dispose()函数或者析构函数时，该值会被设置为0
            </summary>
        </member>
        <member name="M:NRails.IO.StreamAccess`1.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.IO.StreamAccess`1.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="M:NRails.IO.StreamAccess`1.Safe``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Boolean)">
            <summary>
            标记指定成员需要使用安全读写策略，通常用于在数据流中会变化的数据
            </summary>
        </member>
        <member name="M:NRails.IO.StreamAccess`1.Safe``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            标记指定成员需要使用安全读写策略，通常用于在数据流中会变化的数据
            </summary>
        </member>
        <member name="M:NRails.IO.StreamAccess`1.UnSafe``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Boolean)">
            <summary>
            标记指定成员使用不安全读写策略，通常用于在数据流中固定不变的数据
            </summary>
        </member>
        <member name="M:NRails.IO.StreamAccess`1.UnSafe``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            标记指定成员使用不安全读写策略，通常用于在数据流中固定不变的数据
            </summary>
        </member>
        <member name="M:NRails.IO.StreamAccess`1.Write(System.Boolean)">
            <summary>
            
            </summary>
            <param name="onlySafe">true=仅对动态数据进行读取和写入</param>
        </member>
        <member name="M:NRails.IO.StreamAccess`1.Read(System.Boolean)">
            <summary>
            
            </summary>
            <param name="onlySafe">true=仅对动态数据进行读取和写入</param>
        </member>
        <member name="P:NRails.IO.StreamAccess`1.FieldMapper.RealSize">
            <summary>
            字段存储在流中的实际大小
            </summary>
        </member>
        <member name="F:NRails.IO.StreamAccess`1.FieldMapper._isAlive">
            <summary>
            在调用Dispose()函数或者析构函数时，该值会被设置为0
            </summary>
        </member>
        <member name="M:NRails.IO.StreamAccess`1.FieldMapper.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.IO.StreamAccess`1.FieldMapper.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="M:NRails.IO.StreamAccess`1.FieldMapper.Safe``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Boolean)">
            <summary>
            标记指定成员需要使用安全读写策略，通常用于在数据流中会变化的数据，使用该策略会额外占用实际数据大小1倍的存储空间
            </summary>
        </member>
        <member name="M:NRails.IO.StreamAccess`1.FieldMapper.Safe``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            标记指定成员需要使用安全读写策略，通常用于在数据流中会变化的数据
            </summary>
        </member>
        <member name="M:NRails.IO.StreamAccess`1.FieldMapper.UnSafe``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Boolean)">
            <summary>
            标记指定成员使用不安全读写策略，通常用于在数据流中固定不变的数据
            </summary>
        </member>
        <member name="M:NRails.IO.StreamAccess`1.FieldMapper.UnSafe``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            标记指定成员使用不安全读写策略，通常用于在数据流中固定不变的数据
            </summary>
        </member>
        <member name="F:NRails.IO.StreamAccess`1.AccessItem._isAlive">
            <summary>
            在调用Dispose()函数或者析构函数时，该值会被设置为0
            </summary>
        </member>
        <member name="M:NRails.IO.StreamAccess`1.AccessItem.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.IO.StreamAccess`1.AccessItem.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="T:NRails.IO.ConsoleRedirection">
            <summary>
            提供控制台文本重定向功能
            </summary>
        </member>
        <member name="F:NRails.IO.InputBox.Pattern">
            <summary>
            有效性过滤正则
            </summary>
        </member>
        <member name="P:NRails.IO.InputBox.CheckBoxText">
            <summary>
            附带的复选框文本提示
            </summary>
        </member>
        <member name="P:NRails.IO.InputBox.Checked">
            <summary>
            附带的复选框文本提示勾选状态
            </summary>
        </member>
        <member name="P:NRails.IO.InputBox.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:NRails.IO.InputBox.Data">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:NRails.IO.InputBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NRails.IO.InputBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NRails.IO.InputBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NRails.IO.LoopStream">
            <summary>
            提供一种对流的循环读写操作
            </summary>
        </member>
        <member name="M:NRails.IO.LoopStream.#ctor(System.IO.Stream,System.Int64,System.Int64,System.Int64)">
            <summary>
            初始化一个循环流
            </summary>
            <param name="baseStream">基流</param>
            <param name="loop">设置默认循环状态</param>
            <param name="zeroPosition">设置该流Position=0在基流中的位置</param>
            <param name="headerSize">设置基流中不用于循环的头大小</param>
        </member>
        <member name="P:NRails.Net.BaseTcpClient.Encoding">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Net.BaseTcpClient._isAlive">
            <summary>
            在调用Dispose()函数或者析构函数时，该值会被设置为0
            </summary>
        </member>
        <member name="M:NRails.Net.BaseTcpClient.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:NRails.Net.BaseTcpClient.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Net.BaseTcpClient.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="M:NRails.Net.BaseTcpClient.#ctor(System.String,System.Security.Authentication.SslProtocols,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.String)">
            <summary>
            
            </summary>
            <param name="serverAddr"></param>
            <param name="sslProtocol"></param>
            <param name="certificates"></param>
            <param name="sslHostName"></param>
        </member>
        <member name="P:NRails.Net.BaseTcpClient.IsConnected">
            <summary>
            获取连接状态
            </summary>
        </member>
        <member name="P:NRails.Net.BaseTcpClient.SpecifiedPort">
            <summary>
            指定本地端口号
            </summary>
        </member>
        <member name="F:NRails.Net.BaseTcpClient.cnnFlag">
            <summary>
            
            </summary>
        </member>
        <member name="T:NRails.Net.BaseTcpClient.BaseTcpClientEventHandler">
            <summary>
            
            </summary>
            <param name="client"></param>
        </member>
        <member name="E:NRails.Net.BaseTcpClient.BeforeConnect">
            <summary>
            在准备尝试连接到服务器的时候引发
            </summary>
        </member>
        <member name="M:NRails.Net.BaseTcpClient.OnBeforeConnect">
            <summary>
            引发BeforeConnect事件
            </summary>
        </member>
        <member name="T:NRails.Net.BaseTcpClient.BaseTcpClientAfterConnectEventHandler">
            <summary>
            
            </summary>
            <param name="client"></param>
            <param name="error"></param>
        </member>
        <member name="F:NRails.Net.BaseTcpClient.ConnectAsyncCallback">
            <summary>
            在尝试连接到服务器之后引发
            </summary>
        </member>
        <member name="E:NRails.Net.BaseTcpClient.AfterConnect">
            <summary>
            连接操作完成后引发
            </summary>
        </member>
        <member name="M:NRails.Net.BaseTcpClient.OnAfterConnect(System.Net.Sockets.SocketError)">
            <summary>
            引发AfterConnect事件
            </summary>
        </member>
        <member name="M:NRails.Net.BaseTcpClient.ResetClient">
            <summary>
            重置链接
            </summary>
        </member>
        <member name="M:NRails.Net.BaseTcpClient.ConnectAsync(NRails.Net.BaseTcpClient.BaseTcpClientAfterConnectEventHandler)">
            <summary>
            尝试连接到服务端
            </summary>
        </member>
        <member name="M:NRails.Net.BaseTcpClient.Connect(System.Int32)">
            <summary>
            连接到服务器
            </summary>
        </member>
        <member name="M:NRails.Net.BaseTcpClient.ReadLine">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Net.BaseTcpClient.ReadBytesLine">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Net.BaseTcpClient.WriteLine(System.String)">
            <summary>
            写入数据
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:NRails.Net.BaseTcpClient.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:NRails.Net.BaseTcpClient.Write(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:NRails.Net.BaseTcpClient.Log(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NRails.Net.HttpClient.#ctor">
            <summary>
            创建一个新的 WebClient 实例。
            </summary>
        </member>
        <member name="M:NRails.Net.HttpClient.#ctor(System.Net.CookieContainer)">
            <summary>
            创建一个新的 WebClient 实例。
            </summary>
            <param name="cookie">Cookie 容器</param>
        </member>
        <member name="P:NRails.Net.HttpClient.Cookies">
            <summary>
            Cookie 容器
            </summary>
        </member>
        <member name="M:NRails.Net.HttpClient.GetWebRequest(System.Uri)">
            <summary>
            返回带有 Cookie 的 HttpWebRequest。
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Net.HttpClient.PostData(System.String,System.String,System.String,System.String,System.String@)">
            <summary>
            向指定的 URL POST 数据，并返回页面
            </summary>
            <param name="uriString">POST URL</param>
            <param name="postString">POST 的 数据</param>
            <param name="postStringEncoding">POST 数据的 CharSet</param>
            <param name="dataEncoding">页面的 CharSet</param>
            <returns>页面的源文件</returns>
        </member>
        <member name="M:NRails.Net.HttpClient.GetSrc(System.String,System.String,System.String@)">
            <summary>
            获得指定 URL 的源文件
            </summary>
            <param name="uriString">页面 URL</param>
            <param name="dataEncoding">页面的 CharSet</param>
            <returns>页面的源文件</returns>
        </member>
        <member name="M:NRails.Net.HttpClient.GetFile(System.String,System.String,System.String@)">
            <summary>
            从指定的 URL 下载文件到本地
            </summary>
            <param name="uriString">文件 URL</param>
            <param name="fileName">本地文件的完成路径</param>
            <returns></returns>
        </member>
        <member name="T:NRails.Reflect.ObjectField">
            <summary>
            封装对象的字段和属性的反射操作
            </summary>
        </member>
        <member name="M:NRails.Reflect.ObjectField.SetValue(System.Object,System.Object,System.Type,System.Boolean)">
            <summary>
            通过对象类型转换的方式赋值
            </summary>
            <param name="target"></param>
            <param name="value"></param>
            <param name="valueType"></param>
        </member>
        <member name="M:NRails.Reflect.ObjectField.SetValue(System.Object,System.Object)">
            <summary>
            通过反射的方式为对象字段强制赋值
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="M:NRails.Reflect.ObjectField.GetValue(System.Object)">
            <summary>
            通过反射的方式为读取对象字段
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:NRails.Reflect.TypeInfo">
            <summary>
            管理类型缓存
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.TypeSerializers">
            <summary>
            自定义序列化模式
            </summary>
        </member>
        <member name="M:NRails.Reflect.TypeInfo.IsPrimitiveType(System.Type)">
            <summary>
            返回给定的类型是否为简单类型
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.FieldsDic">
            <summary>
            如果FieldsCount>0，这里存储了所有字段信息，key=字段的Hash值，value＝字段信息
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.FieldsNameDic">
            <summary>
            如果FieldsCount>0，这里存储了所有字段信息，key=字段的名称，value＝字段信息
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.PropertiesDic">
            <summary>
            如果PropertiesCount>0，这里存储了所有属性信息，key=属性的Hash值，value＝属性信息
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.PropertiesNameDic">
            <summary>
            如果PropertiesCount>0，这里存储了所有属性信息，key=属性的名称，value＝属性信息
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.CanCtor">
            <summary>
            表示该类型是否有空构造函数，如果某个类型不具备空构造函数，则判定该类型不能被序列化
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.IsISerializable">
            <summary>
            true=该类型继承了ISerializable2接口
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.TargetType">
            <summary>
            目标类型
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.FieldsCount">
            <summary>
            当前正在运行中的程序集中的字段个数，注意：在反序列化的过程中，给定的反序列化类型字段个数可能和当前的有所不同
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.PropertiesCount">
            <summary>
            当前正在运行中的程序集中的属性个数，注意：在反序列化的过程中，给定的反序列化类型属性个数可能和当前的有所不同
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.IsPrimitive">
            <summary>
            true = 该类型是为简单类型
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.IsEnum">
            <summary>
            true=该类型为枚举
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.EnumDeclareType">
            <summary>
            枚举
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.IsArray">
            <summary>
            true=该类型为数组
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.IsIList">
            <summary>
            true=改类型是一个列表类型
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.IsQueue">
            <summary>
            true=该类型为队列Queue&lt;&gt;
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.ElementType">
            <summary>
            数组类型定义
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.IsString">
            <summary>
            true=该类型为字符串
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.CustomSerializer">
            <summary>
            true=该类型为既定的序列化模式
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.GenericArguments">
            <summary>
            true=该类型为范型
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.GenericTypeDefinition">
            <summary>
            范型定义
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.FullName">
            <summary>
            标示出类型对象的全名
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.IsDictionary">
            <summary>
            该类型是一个字典
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.DicKeyType">
            <summary>
            字典的键类型
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.DicValueType">
            <summary>
            字典的值类型
            </summary>
        </member>
        <member name="F:NRails.Reflect.TypeInfo.IsLoadCompleted">
            <summary>
            true=已经加载完整,为了防止在使用字典的方式防止锁的情况下在未加载完整的信息之前返回数据而导致枚举信息异常
            </summary>
        </member>
        <member name="P:NRails.Reflect.IPropertyInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:NRails.Reflect.IPropertyInfo.PropertyType">
            <summary>
            类型
            </summary>
        </member>
        <member name="M:NRails.Reflect.IPropertyInfo.GetValue(System.Object)">
            <summary>
            获取值
            </summary>
        </member>
        <member name="M:NRails.Reflect.IPropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            设置值
            </summary>
        </member>
        <member name="P:NRails.Reflect.IPropertyInfo.IsReadOnly">
            <summary>
            是否为只读
            </summary>
        </member>
        <member name="M:NRails.Reflect.IPropertyInfo.IsDefind(System.Type,System.Boolean)">
            <summary>
            是否有定义Attribute
            </summary>
        </member>
        <member name="M:NRails.Reflect.IPropertyInfo.CreateInstance">
            <summary>
            创建实例
            </summary>
        </member>
        <member name="M:NRails.Reflect.NFieldInfo.#ctor(System.Reflection.FieldInfo)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:NRails.Reflect.PropertyInfoFactory">
            <summary>
            对象属性元数据工厂类
            </summary>
        </member>
        <member name="M:NRails.Reflect.PropertyInfoFactory.GetProperties(System.Object,System.Predicate{NRails.Reflect.IPropertyInfo},System.Boolean,System.Boolean)">
            <summary>
            获取对象属性元数据
            </summary>
            <param name="obj">对象或对象类型</param>
            <param name="exclude">排除筛选条件</param>
            <param name="isSort">是否进行排序, 默认进行排序</param>
            <param name="cache">是否缓存反射结果</param>
        </member>
        <member name="T:NRails.Reflect.PropertyInfoFactory.PropertyInfoCompare">
            <summary>
            用于属性排序的比较类
            </summary>
        </member>
        <member name="M:NRails.Reflect.RealTypeAttribute.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:NRails.Serialization.SerializeEngine">
            <summary>
            提供一个基本的序列化和反序列化支持
            </summary>
        </member>
        <member name="F:NRails.Serialization.SerializeEngine.Version">
            <summary>
            指定序列化版本
            </summary>
        </member>
        <member name="F:NRails.Serialization.SerializeEngine.CustomSerialize">
            <summary>
            自定义序列化模式
            </summary>
        </member>
        <member name="F:NRails.Serialization.SerializeEngine.typeMapping1">
            <summary>
            类型映射
            </summary>
        </member>
        <member name="F:NRails.Serialization.SerializeEngine.typeCache">
            <summary>
            已知名称的类型对象缓存
            </summary>
        </member>
        <member name="M:NRails.Serialization.SerializeEngine.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Serialization.SerializeEngine.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="M:NRails.Serialization.SerializeEngine.WriteType(NRails.Reflect.TypeInfo,System.IO.Stream,NRails.Serialization.SerializeContext)">
            <summary>
            将一个类型信息写入流
            </summary>
            <param name="info"></param>
            <param name="stream"></param>
            <param name="context"></param>
        </member>
        <member name="M:NRails.Serialization.SerializeEngine.WritePrimitiveObject(System.Type,System.Object,System.IO.Stream)">
            <summary>
            写入简单数据
            </summary>
            <param name="targetType"></param>
            <param name="target"></param>
        </member>
        <member name="M:NRails.Serialization.SerializeEngine.ReadDictionaryMember(System.Object,NRails.Reflect.TypeInfo,System.IO.Stream,NRails.Serialization.DeSerializeContext)">
            <summary>
            读取字典成员数据
            </summary>
            <param name="result"></param>
            <param name="typeInfo"></param>
            <param name="stream"></param>
            <param name="context"></param>
        </member>
        <member name="M:NRails.Serialization.SerializeEngine.ReadIListMember(System.Object,NRails.Reflect.TypeInfo,System.IO.Stream,NRails.Serialization.DeSerializeContext)">
            <summary>
            读取列表成员数据
            </summary>
            <param name="result"></param>
            <param name="typeInfo"></param>
            <param name="stream"></param>
            <param name="context"></param>
        </member>
        <member name="M:NRails.Serialization.SerializeEngine.ReadMembers_Version4(System.Object,NRails.Reflect.TypeInfo,System.IO.Stream,NRails.Serialization.DeSerializeContext)">
            <summary>
            第四版读取成员的方式
            </summary>
            <param name="result"></param>
            <param name="typeInfo"></param>
            <param name="stream"></param>
            <param name="context"></param>
        </member>
        <member name="M:NRails.Serialization.SerializeEngine.ReadMembers_Version3(System.Object,NRails.Reflect.TypeInfo,System.IO.Stream,NRails.Serialization.DeSerializeContext)">
            <summary>
            第三版读取成员的方式
            </summary>
            <param name="result"></param>
            <param name="typeInfo"></param>
            <param name="stream"></param>
            <param name="context"></param>
        </member>
        <member name="E:NRails.Serialization.SerializeEngine.ParseType">
            <summary>
            尝试将类型名称转换为类型时引发,如果需要更改已解析的类型，则直接返回目标类型
            </summary>
        </member>
        <member name="M:NRails.Serialization.SerializeEngine.OnParseType(NRails.Serialization.PaseTypeEventArg)">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Serialization.SerializeEngine.IsPrimitiveType(System.Type)">
            <summary>
            返回给定的类型是否为简单类型
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="F:NRails.Serialization.SerializeEngine3Test.Request.RequestType">
            <summary>
            获取或设置请求类型
            </summary>
        </member>
        <member name="F:NRails.Serialization.SerializeEngine3Test.Request.IsCompressedArg">
            <summary>
            表示所传输的参数是否为一个压缩字节数组
            </summary>
        </member>
        <member name="F:NRails.Serialization.SerializeEngine3Test.Request.IsErrorMessage">
            <summary>
            获取或设置当前是否返回了错误信息
            </summary>
        </member>
        <member name="F:NRails.Serialization.SerializeEngine3Test.Request.Argument">
            <summary>
            获取或设置请求附带的参数
            </summary>
        </member>
        <member name="M:NRails.Serialization.SerializeContext.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Serialization.SerializeContext.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="F:NRails.Serialization.DeSerializeContext.MemberHashList">
            <summary>
            在本次反序列化过程中，给定对象类型的字段哈希值列表
            </summary>
        </member>
        <member name="F:NRails.Serialization.DeSerializeContext.MemberNameList">
            <summary>
            在本次反序列化过程中，给定对象类型的字段哈希值列表
            </summary>
        </member>
        <member name="M:NRails.Serialization.DeSerializeContext.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Serialization.DeSerializeContext.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="T:NRails.Serialization.DynamicAssembly">
            <summary>
            动态程序集代理
            </summary>
        </member>
        <member name="M:NRails.Serialization.DynamicAssembly.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Serialization.DynamicAssembly.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="M:NRails.Serialization.DynamicAssembly.CreateInstance(System.AppDomain)">
            <summary>
            从给定的应用程序域中创建一个动态程序集代理
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Serialization.DynamicAssembly.CreateInstance(System.AppDomain,System.String)">
            <summary>
            从给定的应用程序域中创建一个动态程序集代理
            </summary>
        </member>
        <member name="M:NRails.Serialization.DynamicAssembly.LoadAssembly(System.String)">
            <summary>
            加载程序集
            </summary>
            <param name="assemblyFile"></param>
        </member>
        <member name="M:NRails.Serialization.DynamicAssembly.CreateInstance``1(System.String)">
            <summary>
            从程序集中创建一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="P:NRails.Serialization.DynamicAssembly.CanUnload">
            <summary>
            获取该动态程序集是否可被卸载
            </summary>
        </member>
        <member name="M:NRails.Serialization.DynamicAssembly.HasType(System.Type)">
            <summary>
            判断该程序集中是否包含给定类型或者其拓展继承的类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:NRails.Serialization.ISerializable">
            <summary>
            提供一个基本的序列化和反序列化支持
            </summary>
        </member>
        <member name="F:NRails.Serialization.SerializedDataEnumator.bufferEnd">
            <summary>
            缓冲区中有效数据结束偏移,结束偏移本身所指向的位置并不包含有效位置，该值为bufferOffset+bufferLen
            </summary>
        </member>
        <member name="F:NRails.Serialization.SerializedDataEnumator.RestOffset">
            <summary>
            在一次枚举过后，所给定的数组中剩下未处理的字节偏移,在枚举过程中不要试图修改此值，否则将导致以外的情况发生
            </summary>
        </member>
        <member name="F:NRails.Serialization.SerializedDataEnumator.MaxEnumCount">
            <summary>
            设置最大枚举次数
            </summary>
        </member>
        <member name="F:NRails.Serialization.SerializedDataEnumator.SIGN">
            <summary>
            系列化标识符
            </summary>
        </member>
        <member name="F:NRails.Serialization.SerializedDataEnumator.SIGN_LEN">
            <summary>
            系列化标识符长度
            </summary>
        </member>
        <member name="F:NRails.Serialization.SerializedDataEnumator.HeaderLen">
            <summary>
            序列化头长度
            </summary>
        </member>
        <member name="M:NRails.Serialization.SerializedDataEnumator.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Serialization.SerializedDataEnumator.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="T:NRails.ControlExtent">
            <summary>
            用于对控件的状态进行记忆，以便在下次程序启动时能够加载记忆着的状态
            </summary>
        </member>
        <member name="M:NRails.KVData`2.#ctor">
            <summary>
            创建一个KVData的实例
            </summary>
        </member>
        <member name="M:NRails.KVData`2.#ctor(`0,`1)">
            <summary>
            创建一个KVData的实例
            </summary>
        </member>
        <member name="M:NRails.KVData`2.op_Implicit(System.Collections.Generic.KeyValuePair{`0,`1})~NRails.KVData{`0,`1}">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.KVData`2.ToKV">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NRails.ExpressionParser">
            <summary>
            Lambda表达式的解析器
            </summary>
        </member>
        <member name="M:NRails.ExpressionParser.Parse(System.String,System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:NRails.ExpressionParser.Parse(System.String,System.Type,System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:NRails.ExpressionParser.Parse(System.String,System.Type,System.Type[],System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:NRails.ExpressionParser.Parse(System.Type,System.String,System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="delegateType">委托类型</param>
            <param name="firstTypeIsDefaultInstance">是否第一个类型是默认实例</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:NRails.ExpressionParser.Parse(System.Type,System.String,System.Boolean,System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="delegateType">委托类型</param>
            <param name="firstTypeIsDefaultInstance">是否第一个类型是默认实例</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:NRails.ExpressionParser.Parse``1(System.String,System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:NRails.ExpressionParser.Parse``1(System.String,System.Boolean,System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:NRails.ExpressionParser.Compile(System.String,System.String[])">
            <summary>
            解析Lambda表达式代码并编译成委托
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:NRails.ExpressionParser.Compile(System.String,System.Type,System.String[])">
            <summary>
            解析Lambda表达式代码并编译成委托
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:NRails.ExpressionParser.Compile(System.Type,System.String,System.String[])">
            <summary>
            解析Lambda表达式代码并编译成委托
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="delegateType">委托类型</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:NRails.ExpressionParser.Compile(System.Type,System.String,System.Boolean,System.String[])">
            <summary>
            解析Lambda表达式代码并编译成委托
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="delegateType">委托类型</param>
            <param name="firstTypeIsDefaultInstance">是否第一个类型是默认实例</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:NRails.ExpressionParser.Compile``1(System.String,System.String[])">
            <summary>
            解析Lambda表达式代码并编译成委托
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:NRails.ExpressionParser.Compile``1(System.String,System.Boolean,System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:NRails.ExpressionParser.Exec``1(System.Object,System.String,System.String[],System.Object[])">
            <summary>
            以instance为上下文，执行代码
            ($0表示instance，(可省略$0)；$1表示objects的第一个对象；$2表示objects的第二个对象....)
            </summary>
            <typeparam name="T">返回的结果类型</typeparam>
            <param name="instance">执行代码以此对象为上下文(在code中用$0表示，$0可省略)</param>
            <param name="code">被执行代码</param>
            <param name="namespaces">引入命名空间</param>
            <param name="objects">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:NRails.ExpressionParser.Exec(System.Object,System.String,System.String[],System.Object[])">
            <summary>
            以instance为上下文，执行代码
            ($0表示instance，(可省略$0)；$1表示objects的第一个对象；$2表示objects的第二个对象....)
            </summary>
            <param name="instance">执行代码以此对象为上下文(在code中用$0表示，$0可省略)</param>
            <param name="code">被执行代码</param>
            <param name="namespaces">引入命名空间</param>
            <param name="objects">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:NRails.ExpressionParser.ParseCore``1(System.Type,System.String,System.Type,System.Boolean,System.Type[],System.String[])">
            <summary>
            解析Lambda表达式代码
            </summary>
            <param name="lambdaCode">lambda表达式代码。如：m=>m.ToString()</param>
            <param name="namespaces">命名空间集</param>
        </member>
        <member name="M:NRails.Configuration.ParameterEnumator.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Configuration.ParameterEnumator.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="T:NRails.Configuration.ParameterProvider">
            <summary>
            提供读取或写入参数的支持
            </summary>
        </member>
        <member name="M:NRails.Configuration.ParameterProvider.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="M:NRails.Configuration.ParameterProvider.GetParameterA(System.String,System.Type,System.Int32)">
            <summary>
            读取给定名称的参数值
            </summary>
            <param name="name">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Configuration.ParameterProvider.SetParameter(System.String,System.Object)">
            <summary>
            为给定名称的参数赋值
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:NRails.Configuration.ParameterProvider.SaveToSource">
            <summary>
            将所有参数保存至目标源
            </summary>
        </member>
        <member name="M:NRails.Configuration.ParameterProvider.HasParameterProviderCtor(System.Type)">
            <summary>
            判断给定的类型是否有一个ParameterProvider作为参数的构造函数
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:NRails.Configuration.ParameterProvider.Disposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="T:NRails.Configuration.ParameterSetting">
            <summary>
            提供一个参数存储器的类型变换支持，目前已经支持所有FrameWork的基本数据类型和所有枚举类型，例如：int,Rectangle,Point,TimeSpan,DateTime等.....
            (如果需要自定义一个参数存储器请重载ParameterProvider的抽象方法)
            </summary>
        </member>
        <member name="M:NRails.Configuration.ParameterSetting.Initialize(System.String)">
            <summary>
            初始化参数
            </summary>
            <param name="provider">参数存储器，如果为null将使用默认的参数存储器(即读取App.Config)</param>
        </member>
        <member name="M:NRails.Configuration.ParameterSetting.Initialize(NRails.Configuration.ParameterProvider[])">
            <summary>
            初始化参数
            </summary>
            <param name="provider">参数存储器，如果为null将使用默认的参数存储器(即读取App.Config)</param>
        </member>
        <member name="M:NRails.Configuration.ParameterSetting.SetFieldValue(System.Reflection.FieldInfo,System.Object,System.Object)">
            <summary>
            給指定对象的指定字段赋值
            </summary>
            <param name="field">字段信息</param>
            <param name="value">值</param>
            <param name="target">指定对象</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Configuration.ParameterSetting.SaveToSource(System.String)">
            <summary>
            将参数保存到指定的参数提供器中
            </summary>
            <param name="provider">参数存储器，如果为null将使用默认的参数存储器(即读取App.Config)</param>
        </member>
        <member name="M:NRails.Configuration.ParameterSetting.SaveToSource(NRails.Configuration.ParameterProvider[])">
            <summary>
            将参数保存到指定的参数提供器中
            </summary>
            <param name="provider">参数存储器，如果为null将使用默认的参数存储器(即读取App.Config)</param>
        </member>
        <member name="M:NRails.Configuration.ParameterSetting.SetFieldValue(System.Reflection.FieldInfo,System.Object)">
            <summary>
            对指定参数的参数赋值
            </summary>
            <param name="field">参数信息</param>
            <param name="value">目标值</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Configuration.ParameterSetting.GetParameter(System.String,NRails.Configuration.ParameterProvider[],System.Type)">
            <summary>
            从给定的参数存储器中读取指定名称的参数配置
            </summary>
            <param name="name">参数名称</param>
            <param name="provider">参数存储器</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Configuration.ParameterSetting.SetConvertMapping(System.Type,System.Delegate)">
            <summary>
            为给定类型对象提供字符串到对象的转换方法
            </summary>
            <param name="type"></param>
            <param name="method">ConvertMethodHandler委托，这是一个输入string值，返回object对象的方法</param>
        </member>
        <member name="E:NRails.Configuration.ParameterSetting.ParameterError">
            <summary>
            当为某个参数赋值失败时引发的事件
            </summary>
        </member>
        <member name="M:NRails.Configuration.ParameterSetting.RaiseParameterErrorEvent(System.Object,System.Reflection.FieldInfo,System.Object,NRails.Configuration.ParameterSetting.ParameterErrorEnum)">
            <summary>
            引发ParameterError事件
            </summary>
            <param name="target">事件源</param>
            <param name="field">产生赋值失败时的参数</param>
            <param name="value">产生赋值失败时的参数目标值</param>
            <param name="errorNum">错误类型</param>
        </member>
        <member name="M:NRails.Configuration.ParameterSetting.RaiseParameterErrorEvent(System.Object,System.Reflection.FieldInfo,System.Object,System.Object,NRails.Configuration.ParameterSetting.ParameterErrorEnum)">
            <summary>
            引发ParameterError事件
            </summary>
            <param name="target">事件源</param>
            <param name="field">产生赋值失败时的参数</param>
            <param name="value">产生赋值失败时的参数目标值</param>
            <param name="errorNum">错误类型</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="T:NRails.Configuration.ParameterSetting.ParameterErrorEnum">
            <summary>
            赋值失败的错误枚举
            </summary>
        </member>
        <member name="F:NRails.Configuration.ParameterSetting.ParameterErrorEnum.ParameterNotFound">
            <summary>
            目标为空值
            </summary>
        </member>
        <member name="F:NRails.Configuration.ParameterSetting.ParameterErrorEnum.ParameterNotIsNumber">
            <summary>
            目标为非数字
            </summary>
        </member>
        <member name="F:NRails.Configuration.ParameterSetting.ParameterErrorEnum.UnknownParameterType">
            <summary>
            未知的字段格式
            </summary>
        </member>
        <member name="F:NRails.Configuration.ParameterSetting.ParameterErrorEnum.ParameterNotIsDateTime">
            <summary>
            指定的值不是一个有效的DateTime格式
            </summary>
        </member>
        <member name="F:NRails.Configuration.ParameterSetting.ParameterErrorEnum.ParameterNotIsSize">
            <summary>
            指定的字符串不是一个有效的Size格式
            </summary>
        </member>
        <member name="F:NRails.Configuration.ParameterSetting.ParameterErrorEnum.ParameterNotIsPoint">
            <summary>
            指定的字符串不是一个有效的Point格式
            </summary>
        </member>
        <member name="F:NRails.Configuration.ParameterSetting.ParameterErrorEnum.ParameterNotIsRectangle">
            <summary>
            指定的字符串不是一个有效的Rectangle格式
            </summary>
        </member>
        <member name="F:NRails.Configuration.ParameterSetting.ParameterErrorEnum.ParameterNotIsTimeSpan">
            <summary>
            指定的字符串不是一个有效的TimeSpan格式
            </summary>
        </member>
        <member name="F:NRails.Configuration.ParameterSetting.ParameterErrorEnum.ParameterNotIsNumArray">
            <summary>
            指定的字符串不是一个有效的数字数组格式
            </summary>
        </member>
        <member name="F:NRails.Configuration.ParameterSetting.ParameterErrorEnum.ParameterNotIsColor">
            <summary>
            指定的字符串不是一个有效的颜色格式
            </summary>
        </member>
        <member name="F:NRails.Configuration.ParameterSetting.ParameterErrorEnum.NoError">
            <summary>
            参数设置成功，没有发生异常
            </summary>
        </member>
        <member name="F:NRails.Configuration.ParameterSetting.ParameterErrorEnum.NoFieldFoundInObject">
            <summary>
            在对象中找不到指定字段
            </summary>
        </member>
        <member name="F:NRails.Configuration.ParameterSetting.ParameterErrorEnum.ExceptionAppeared">
            <summary>
            发生异常
            </summary>
        </member>
        <member name="F:NRails.Configuration.ParameterSetting.ParameterErrorEnum.NoSuchEnumMemberFound">
            <summary>
            未找到对应的枚举值
            </summary>
        </member>
        <member name="F:NRails.Configuration.ParameterSetting.ParameterErrorEnum.NoPropertyFoundInObject">
            <summary>
            在给定的对象中找不到指定的属性
            </summary>
        </member>
        <member name="F:NRails.Configuration.ParameterSetting.ParameterErrorEnum.SetParameterError">
            <summary>
            在给对象赋值的时候出错
            </summary>
        </member>
        <member name="T:NRails.Configuration.ParameterSetting.ParameterErrorEventHandler">
            <summary>
            设置值失败时引发的事件委托
            </summary>
            <param name="sender"></param>
            <param name="field"></param>
            <param name="destValue"></param>
            <param name="defaultValue"></param>
            <param name="description"></param>
        </member>
        <member name="M:NRails.Configuration.TextResourceManager.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Configuration.TextResourceManager.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="T:NRails.Configuration.AppConfigProvider">
            <summary>
            提供一个应用程序配置访问器
            </summary>
        </member>
        <member name="M:NRails.Configuration.AppConfigProvider.SetParameter(System.String,System.Object)">
            <summary>
            为给定名称的参数赋值
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
        </member>
        <member name="P:NRails.Configuration.AppConfigProvider.CanAccess">
            <summary>
            获取对应的配置文件是否访问
            </summary>
        </member>
        <member name="T:NRails.ISerializeEngine">
            <summary>
            序列化引擎接口
            </summary>
        </member>
        <member name="T:NRails.IAsyncOperationResult">
            <summary>
            用于实现发送邮件的对象
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NRails.SMath" -->
        <member name="M:NRails.SMath.BinarySearch``2(``1,NRails.StreamBinarySearchSentenceHandler{``0,``1},``0,System.Int32,System.Int64,System.Int64,System.Boolean)">
            <summary>
            找到大于等于Value值的位置,如果目标元素大于所有集合对象，则返回long.MaxValue,如果目标元素小于所有集合对象，则返回long.MinValue
            </summary>
            <typeparam name="TTarget">输入：需要查找的目标类型</typeparam>
            <typeparam name="TSource">输入：需要进行查找的数据集类型</typeparam>
            <param name="source">需要进行查找的数据集</param>
            <param name="SentenceMethod">判别方法,该方法是由三个参数构成的：source,position,value 分别为源，位置偏移和值</param>
            <param name="value">需要查找的目标</param>
            <param name="stride">给定的目标在数据集中的单元大小，查找过程中，该值用于二分跳转</param>
            <param name="startPos">开始查找的位置</param>
            <param name="endPos">结束查找的位置,通常情况下等于数组的length或者list的count</param>
            <param name="outOfRangeInvalidate">true ＝ 标识当所要查找的对象超过给定的数据源界限时，标记为无效,即返回long.MinValue</param>
            <param name="equalMoveEnd">true=当找到所给定的目标值相等的元素时，是否将返回的位置移动到其后面</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            找到大于等于Value值的位置,如果目标元素大于所有集合对象，则返回int.MaxValue,如果目标元素小于所有集合对象，则返回int.MinValue
            </summary>
            <typeparam name="T">输入：需要查找的目标类型</typeparam>
            <param name="source">需要进行查找的数据集</param>
            <param name="value">需要查找的目标</param>
            <param name="stride">给定的目标在数据集中的单元大小，查找过程中，该值用于二分跳转</param>
            <param name="startPos">开始查找的位置</param>
            <param name="endPos">结束查找的位置</param>
            <param name="equalMoveEnd">true=当找到所给定的目标值相等的元素时，是否将返回的位置移动到其后面</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.DecToNSystem(System.UInt64,System.Char[])">
            <summary>
            将十进制数转换为N进制的字符串
            </summary>
            <param name="num">需要转换的十进制数</param>
            <param name="nsystem">N进制数的全序列，例如 16进制为: 0123456789ABCDEF</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.DecToNSystem(System.UInt64,System.Char[],System.Char[]@)">
            <summary>
            将十进制数转换为N进制的字符串
            </summary>
            <param name="num">需要转换的十进制数</param>
            <param name="nsystem">N进制数的全序列，例如 16进制为: 0123456789ABCDEF</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.DecToNSystem(System.Int64,System.Char[],System.Char[]@)">
            <summary>
            将十进制数转换为N进制的字符串
            </summary>
            <param name="num">需要转换的十进制数</param>
            <param name="nsystem">N进制数的全序列，例如 16进制为: 0123456789ABCDEF</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.DecToNSystem(System.Int64,System.Char[])">
            <summary>
            将十进制数转换为N进制的字符串
            </summary>
            <param name="num">需要转换的十进制数</param>
            <param name="nsystem">N进制数的全序列，例如 16进制为: 0123456789ABCDEF</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.DecToNSystem(System.UInt32,System.Char[])">
            <summary>
            将十进制数转换为N进制的字符串
            </summary>
            <param name="num">需要转换的十进制数</param>
            <param name="nsystem">N进制数的全序列，例如 16进制为: 0123456789ABCDEF</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.DecToNSystem(System.Int32,System.Char[])">
            <summary>
            将十进制数转换为N进制的字符串
            </summary>
            <param name="num">需要转换的十进制数</param>
            <param name="nsystem">N进制数的全序列，例如 16进制为: 0123456789ABCDEF</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.NSystemToDec(System.String,System.Char[])">
            <summary>
            将一个N进制字符串转换为十进制数
            </summary>
            <param name="numStr"></param>
            <param name="nSystem">N进制数的全序列，例如 16进制为: 0123456789ABCDEF</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.NSystemToDec(System.String,System.String)">
            <summary>
            将一个N进制字符串转换为十进制数
            </summary>
            <param name="numStr"></param>
            <param name="nSystem">N进制数的全序列，例如 16进制为: 0123456789ABCDEF</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.NSystemToDec(System.String,System.Int32,System.Int32,System.Char[])">
            <summary>
            将一个N进制字符串转换为十进制数
            </summary>
            <param name="numStr"></param>
            <param name="nSystem">N进制数的全序列，例如 16进制为: 0123456789ABCDEF</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.NSystemToDec(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            将一个N进制字符串转换为十进制数
            </summary>
            <param name="numStr"></param>
            <param name="nSystem">N进制数的全序列，例如 16进制为: 0123456789ABCDEF</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.NSystemToDec(System.Char[],System.Int32,System.Int32,System.Char[])">
            <summary>
            将一个N进制字符串转换为十进制数
            </summary>
            <param name="numStr"></param>
            <param name="nSystem">N进制数的全序列，例如 16进制为: 0123456789ABCDEF</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.NSystemToDec(System.Char[],System.Int32,System.Int32,System.String)">
            <summary>
            将一个N进制字符串转换为十进制数
            </summary>
            <param name="numStr"></param>
            <param name="nSystem">N进制数的全序列，例如 16进制为: 0123456789ABCDEF</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.NSystemToDec(System.Char[],System.String)">
            <summary>
            将一个N进制字符串转换为十进制数
            </summary>
            <param name="numStr"></param>
            <param name="nSystem">N进制数的全序列，例如 16进制为: 0123456789ABCDEF</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.DegreesToRadians(System.Double)">
            <summary>
            将角度转换成弧度
            </summary>
            <param name="degrees">0-360表示的角度数</param>
            <returns>0-2Pi表示的弧度数</returns>
        </member>
        <member name="M:NRails.SMath.DegreesToRadians(System.Single)">
            <summary>
            将角度转换成弧度
            </summary>
        </member>
        <member name="M:NRails.SMath.RadiansToDegrees(System.Double)">
            <summary>
            将弧度转换成角度
            </summary>
            <param name="radians">0-2Pi表示的弧度数</param>
            <returns>0-360表示的角度数</returns>
        </member>
        <member name="M:NRails.SMath.Between(System.Double,System.Double,System.Double)">
            <summary>
            判断target是否在a和b两个数之间，a和b无大小区分
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.IsSameSign(System.Double,System.Double)">
            <summary>
            判断两个数是否同号
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.Log(System.Double)">
            <summary>
            返回指定数字的自然对数(以e为dishu)
            </summary>
        </member>
        <member name="M:NRails.SMath.Log(System.Single)">
            <summary>
            返回指定数字的自然对数(以e为dishu)
            </summary>
        </member>
        <member name="M:NRails.SMath.Log(System.Double,System.Double)">
            <summary>
            返回指定数字的自然对数(以e为dishu)
            <param name="baseNum">底数</param>
            </summary>
        </member>
        <member name="M:NRails.SMath.Log(System.Single,System.Single)">
            <summary>
            返回指定数字的自然对数(以e为dishu)
            <param name="baseNum">底数</param>
            </summary>
        </member>
        <member name="M:NRails.SMath.Pow(System.UInt64,System.Int32)">
            <summary>
            返回num的power次方 
            </summary>
        </member>
        <member name="M:NRails.SMath.Pow(System.Double,System.Int32)">
            <summary>
            返回num的power次方 
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.Pow(System.Single,System.Int32)">
            <summary>
            返回num的power次方 
            </summary>
        </member>
        <member name="M:NRails.SMath.Pow(System.Int32,System.Int32)">
            <summary>
            返回num的power次方 
            </summary>
        </member>
        <member name="M:NRails.SMath.Pow(System.Int64,System.Int64)">
            <summary>
            返回num的power次方 
            </summary>
        </member>
        <member name="M:NRails.SMath.Pow(System.Int64,System.Int32)">
            <summary>
            返回num的power次方 
            </summary>
        </member>
        <member name="F:NRails.SMath.ChinaRect">
            <summary>
            中国行政区划所界定的经纬度范围
            </summary>
        </member>
        <member name="F:NRails.SMath.HPIF">
            <summary>
            Math.PI/2 即90 度
            </summary>
        </member>
        <member name="F:NRails.SMath.DPIF">
            <summary>
            Math.PI*2
            </summary>
        </member>
        <member name="F:NRails.SMath.PIF">
            <summary>
            圆周率
            </summary>
        </member>
        <member name="F:NRails.SMath.FPIf">
            <summary>
            四分之PI即 45度
            </summary>
        </member>
        <member name="F:NRails.SMath.SixteenSystem">
            <summary>
            16进制全序列
            </summary>
        </member>
        <member name="F:NRails.SMath.SixteenSystemStr">
            <summary>
            16进制全序列
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:NRails.SMath.HPI" -->
        <!-- Badly formed XML comment ignored for member "F:NRails.SMath.HPIf" -->
        <member name="F:NRails.SMath.DPI">
            <summary>
            System.Math.PI*2
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:NRails.SMath.PI" -->
        <!-- Badly formed XML comment ignored for member "F:NRails.SMath.PiF" -->
        <!-- Badly formed XML comment ignored for member "F:NRails.SMath.SPI" -->
        <!-- Badly formed XML comment ignored for member "F:NRails.SMath.TPI" -->
        <!-- Badly formed XML comment ignored for member "F:NRails.SMath.FPI" -->
        <!-- Badly formed XML comment ignored for member "F:NRails.SMath.FPIF" -->
        <member name="F:NRails.SMath.EarthRadius">
            <summary>
            地球赤道半径长度(单位：米)
            </summary>
        </member>
        <member name="F:NRails.SMath.EarthRadiusF">
            <summary>
            地球赤道半径长度(单位：米)
            </summary>
        </member>
        <member name="F:NRails.SMath.EarthGirth">
            <summary>
            地球赤道周长(单位:米)
            </summary>
        </member>
        <member name="F:NRails.SMath.EarthGirthF">
            <summary>
            地球赤道周长(单位:米)
            </summary>
        </member>
        <member name="F:NRails.SMath.Second">
            <summary>
            以毫秒为单位的秒
            </summary>
        </member>
        <member name="F:NRails.SMath.Minute">
            <summary>
            以毫秒为单位的分钟
            </summary>
        </member>
        <member name="F:NRails.SMath.Hour">
            <summary>
            以毫秒为单位的小时
            </summary>
        </member>
        <member name="F:NRails.SMath.Day">
            <summary>
            以毫秒为单位的天
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:NRails.SMath.Month" -->
        <member name="F:NRails.SMath.CRLF">
            <summary>
            回车换行
            </summary>
        </member>
        <member name="F:NRails.SMath.CRLFD">
            <summary>
            两个回车换行
            </summary>
        </member>
        <member name="M:NRails.SMath.CalcVectorCos(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            计算两个平面向量的夹角余弦值，取值范围-1到1之间
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcVectorAngle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            计算两个平面向量的夹角(弧度),取值范围 0－PI
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcVectorCross(System.Double,System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            计算2向量的叉积
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:NRails.SMath.CalcVectorCross(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算2向量的叉积
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:NRails.SMath.CalcVectorDot(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算2向量的点积
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:NRails.SMath.CalcVectorCos(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            计算2个向量之间的夹角余玄值
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcVectorCos(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算2个向量之间的夹角余玄值
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcVectorAngle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            计算2个向量之间的夹角
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcVectorAngle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算2个向量之间的夹角
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.IsVectorLeft(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            判定给定的向量P(x,y)是否在已知向量P1(x1,y1)的左边
            </summary>
            <remarks>
            判定一个向量是否在已知向量的左边还是右边，要用其法向量上的点积进行判定，基本思路是，和法向量同向或者异向的判定
            </remarks>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.GetQuadCellIndex(System.String)">
            <summary>
            计算四叉树网格的索引
            </summary>
        </member>
        <member name="M:NRails.SMath.GetQuadCellName(System.Int64,System.Int32)">
            <summary>
            计算四叉树网格的名称
            </summary>
            <param name="step"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.GetQuadCellDeterminate(System.String,System.Int32@,System.Int32@)">
            <summary>
            计算四叉树网格的所在行列
            </summary>
        </member>
        <member name="M:NRails.SMath.GetQuadCellName(System.Int64,System.Int64,System.Int32)">
            <summary>
            计算四叉树网格的名称
            </summary>
        </member>
        <member name="M:NRails.SMath.LonLatToWorld(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            将经纬度转换为空间坐标
            </summary>
            <param name="lon">经度,单位：角度</param>
            <param name="lat">纬度，单位：角度</param>
            <param name="radius">球体半径</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.LonLatToWorld(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            将经纬度转换为空间坐标
            </summary>
            <param name="lon">经度,单位：角度</param>
            <param name="lat">纬度，单位：角度</param>
            <param name="radius">球体半径</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcArcLength(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算两个经纬度之间的距离
            </summary>
            <param name="lon1">经度1</param>
            <param name="lat1">纬度1</param>
            <param name="lon2">经度2</param>
            <param name="lat2">纬度2</param>
            <param name="radius">地球半径</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcArcLength(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            计算两个经纬度之间的距离
            </summary>
            <param name="lon1">经度1</param>
            <param name="lat1">纬度1</param>
            <param name="lon2">经度2</param>
            <param name="lat2">纬度2</param>
            <param name="radius">地球半径</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.GetDirectionText(System.Double)">
            <summary>
            方向文字描述
            </summary>
        </member>
        <member name="M:NRails.SMath.GetDirectionText(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算给定经纬度在指定经纬度的方位文本
            </summary>
            <param name="lon">需要计算方位的经度</param>
            <param name="lat">需要计算方位的维度</param>
            <param name="lonOrigin">中心经度</param>
            <param name="latOrigin">中心维度</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcTileLocation(System.String,System.Int32@,System.Int32@)">
            <summary>
            将一个QRTS行列式名称转换为
            </summary>
            <param name="cellName"></param>
            <param name="row"></param>
            <param name="column"></param>
        </member>
        <member name="M:NRails.SMath.CalcTileName(System.Int64,System.Int64,System.Int32)">
            <summary>
            读取一个行列式的QRTS名称
            </summary>
            <param name="tileRow"></param>
            <param name="tileColumn"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcTileIndex(System.String)">
            <summary>
            计算地图文件的标识
            </summary>
            <param name="fileName">文件名</param>
            <returns>十进制的长整型数</returns>
        </member>
        <member name="M:NRails.SMath.MileageToSegment(System.Single)">
            <summary>
            将公里转换为海里
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.MileageToSegment(System.Double)">
            <summary>
            将公里转换为海里
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.SegmentToMileage(System.Double)">
            <summary>
            将海里转换为公里
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.FahrenheitToCelsius(System.Double)">
            <summary>
            将华氏温度转换为摄氏温度
            </summary>
            <param name="fahrenheit">华氏温度</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CelsiusToFahrenheit(System.Double)">
            <summary>
            将摄氏温度转换为华氏温度
            </summary>
            <param name="celsius">摄氏温度</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.BarToPa(System.Double)">
            <summary>
            将巴转换为帕(压力单位)
            </summary>
            <param name="bar"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.PaToBar(System.Double)">
            <summary>
            将帕转换为巴(压力单位)
            </summary>
            <param name="bar"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcConvexPolygon(System.Collections.Generic.IEnumerable{NRails.Drawing.Vector2D})">
            <summary>
            将给定的非自交多边形拆解为多个凸多边形
            </summary>
            <param name="lonLats">非自交多边形，多边形面不能有自交</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcConvexPolygon(NRails.Drawing.Vector2D[])">
            <summary>
            将给定的非自交多边形拆解为多个凸多边形
            </summary>
            <param name="lonLats">非自交多边形，多边形面不能有自交</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcWarp(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            计算(X2,Y2)坐标处是凹点还是凸点,(x1,y1)是前一点,(x2,y3)是后一点
            </summary>
            <param name="clockwise">true 表示三点所在的路径为顺时针，false表示三点所在的路径为逆时针</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcWarp(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            计算(X2,Y2)坐标处是凹点还是凸点,(x1,y1)是前一点,(x2,y3)是后一点
            </summary>
            <param name="clockwise">true 表示三点所在的路径为顺时针，false表示三点所在的路径为逆时针</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcWarp(NRails.Drawing.Vector2D,NRails.Drawing.Vector2D,NRails.Drawing.Vector2D,System.Boolean)">
            <summary>
            计算(X2,Y2)坐标处是凹点还是凸点
            </summary>
            <param name="clockwise">true 表示三点所在的路径为顺时针，false表示三点所在的路径为逆时针</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcWarp(NRails.Drawing.Vector2D,System.Double,System.Double,NRails.Drawing.Vector2D,System.Boolean)">
            <summary>
            计算(x,y)坐标处是凹点还是凸点
            </summary>
            <param name="clockwise">true 表示三点所在的路径为顺时针，false表示三点所在的路径为逆时针</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcDistancePoint(System.Drawing.PointF,System.Drawing.PointF,System.Double)">
            <summary>
            求一条直线上到起始点距离为distance的点
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcDistancePoint(NRails.Drawing.Vector3D,NRails.Drawing.Vector3D,System.Double)">
            <summary>
            求一条直线上到起始点距离为distance的点
            </summary>
        </member>
        <member name="M:NRails.SMath.CalcDistancePoint(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            求一条直线上到起始点距离为distance的点
            </summary>
        </member>
        <member name="M:NRails.SMath.CalcDistancePoint(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            求一条直线上到起始点距离为distance的点
            </summary>
        </member>
        <member name="M:NRails.SMath.CalcDistancePointArray(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            将生成给定的两点之间的count个数个点
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcDistancePoint_(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算过A(x0,y0,z0)点，并且方向为m,n,p上距离A点长度为l的点
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcDistancePoint_(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算过A(x0,y0)点，并且方向为m,n上距离A点长度为l的点
            </summary>
        </member>
        <member name="M:NRails.SMath.QuickSort(System.Double[],System.Int32,System.Int32)">
            <summary>
            对一个数组进行快速排序
            </summary>
            <param name="array">需要排序的数组</param>
            <param name="low">数组中需要排序的起始索引</param>
            <param name="high">数组中需要排序的末尾索引</param>
        </member>
        <member name="M:NRails.SMath.QuickSort(System.Double[])">
            <summary>
            对一个数组进行快速排序
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:NRails.SMath.QuickSort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            对一个数组进行快速排序
            </summary>
            <param name="array">需要排序的数组</param>
            <param name="low">数组中需要排序的起始索引</param>
            <param name="high">数组中需要排序的末尾索引</param>
        </member>
        <member name="M:NRails.SMath.QuickSort(System.Int32[])">
            <summary>
            对一个数组进行快速排序
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:NRails.SMath.QuickSort(System.Single[],System.Int32,System.Int32)">
            <summary>
            对一个数组进行快速排序
            </summary>
            <param name="array">需要排序的数组</param>
            <param name="low">数组中需要排序的起始索引</param>
            <param name="high">数组中需要排序的末尾索引</param>
        </member>
        <member name="M:NRails.SMath.QuickSort(System.Single[])">
            <summary>
            对一个数组进行快速排序
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:NRails.SMath.ValidateOrder(System.Double[],System.Boolean)">
            <summary>
            验证一个数组集合的顺序性
            </summary>
            <param name="array">数组</param>
            <param name="desc">true=降序数组,false=升序数组</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.ValidateOrder(System.Int64[],System.Boolean)">
            <summary>
            验证一个数组集合的顺序性
            </summary>
            <param name="array">数组</param>
            <param name="desc">true=降序数组,false=升序数组</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.ValidateOrder(System.Double[][],System.Boolean,System.Int32)">
            <summary>
            验证一个数组集合的顺序性
            </summary>
            <param name="array">数组</param>
            <param name="desc">true=降序数组,false=升序数组</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.ValidateOrder(System.Int64[][],System.Boolean,System.Int32)">
            <summary>
            验证一个数组集合的顺序性
            </summary>
            <param name="array">数组</param>
            <param name="desc">true=降序数组,false=升序数组</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.ValidateOrder(System.Int32[],System.Boolean)">
            <summary>
            验证一个数组集合的顺序性
            </summary>
            <param name="array">数组</param>
            <param name="desc">true=降序数组,false=升序数组</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.ValidateOrder(System.Single[],System.Boolean)">
            <summary>
            验证一个数组集合的顺序性
            </summary>
            <param name="array">数组</param>
            <param name="desc">true=降序数组,false=升序数组</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.IsCCW(System.Collections.IList)">
            <summary>
            判断一个点集是否为逆时针,OGC标准中,一个面的外环为逆时针,内环为顺时针
            </summary>
            <param name="points">IPoint类型构成的点集</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.IsCCW(System.Collections.IList@)">
            <summary>
            判断一个点集是否为逆时针,OGC标准中,一个面的外环为逆时针,内环为顺时针
            </summary>
            <param name="points">PointF类型构成的点集</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcPointPolygonRelation(System.Single,System.Single,System.Drawing.PointF[])">
            <summary>
            计算点和面的关系
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="polygon"></param>
            <remarks>
            我们从目标点开始，向上做一条射线，如果该射线和边缘的交点为奇数个时，我们视为在面内
            </remarks>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcPointPolygonRelation(System.Double,System.Double,System.Collections.IList)">
            <summary>
            计算点和面的关系
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="polygon"></param>
            <remarks>
            我们从目标点开始，向上做一条射线，如果该射线和边缘的交点为奇数个时，我们视为在面内
            </remarks>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcPointPolygonRelation(NRails.Drawing.IVector,System.Collections.IList)">
            <summary>
            计算点和面的关系
            </summary>
            <param name="point"></param>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcPointTariangleRelation(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算点和三角形的关系
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcPointTariangleRelation(System.Double,System.Double,System.Collections.IList)">
            <summary>
            计算点和三角形的关系
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcVerticalBuffer(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            给定两个点，计算后一个点的垂直缓冲，计算结果排序为两点方向的左手边为第一个元素，右手边为第二个元素
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcVerticalBuffer(NRails.Drawing.Vector2D,NRails.Drawing.Vector2D,System.Double)">
            <summary>
            给定两个点，计算后一个点的垂直缓冲，计算结果排序为两点方向的左手边为第一个元素，右手边为第二个元素
            </summary>
        </member>
        <member name="M:NRails.SMath.CalcDeterminantIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            计算行列式索引
            </summary>
            <param name="row">行</param>
            <param name="column">列</param>
            <param name="columnCount">列数</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcDeterminantIndex(System.Int32,System.Int32,System.Int64)">
            <summary>
            计算行列式索引
            </summary>
            <param name="row">行</param>
            <param name="column">列</param>
            <param name="columnCount">列数</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcDeterminantPosition(System.Int64,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            将行列式索引还原为行列坐标
            </summary>
            <param name="index">列式索引</param>
            <param name="columnCount">列数</param>
            <param name="row">行(输出)</param>
            <param name="column">列(输出)</param>
        </member>
        <member name="M:NRails.SMath.CalcDeterminantPosition(System.Int64,System.Int64,System.Int32@,System.Int32@)">
            <summary>
            将行列式索引还原为行列坐标
            </summary>
            <param name="index">列式索引</param>
            <param name="columnCount">列数</param>
            <param name="row">行(输出)</param>
            <param name="column">列(输出)</param>
        </member>
        <member name="M:NRails.SMath.CalcDeterminantIndex(System.Int32[],System.Int32[])">
            <summary>
            计算N阶行列式的索引值
            </summary>
            <param name="dimensionValues">维度值，例如 三维行列式的值为三维点的坐标：x,y,z</param>
            <param name="dimensionMaxs">维度最大值，例如 三维行列式的值为三维立方体的边界最大值，一个正立方体的三个维度值是相等的，玩具魔方的维度最大值为 3,3,3</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcCross(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            计算2条线段的交点
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcCross(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            计算2直线的交点
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcCross(NRails.Drawing.IVector,NRails.Drawing.IVector,NRails.Drawing.IVector,NRails.Drawing.IVector,System.Double@,System.Double@)">
            <summary>
            计算2条线段的交点
            </summary>
        </member>
        <member name="M:NRails.SMath.Distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算2点间的距离
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.Distance2(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算2点间的距离的平方
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.Distance(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算2点间的距离
            </summary>
        </member>
        <member name="M:NRails.SMath.Distance(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            计算2点间的距离
            </summary>
        </member>
        <member name="M:NRails.SMath.Distance(NRails.Drawing.IVector3,NRails.Drawing.IVector3)">
            <summary>
            计算2点间的距离
            </summary>
        </member>
        <member name="M:NRails.SMath.Distance(NRails.Drawing.IVector,NRails.Drawing.IVector)">
            <summary>
            计算2点间的距离
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.Distance(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            计算两点之间的距离
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.Distance(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            计算两点之间的距离
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.Distance(System.Drawing.PointF,System.Double,System.Double)">
            <summary>
            计算两点之间的距离
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.Distance(System.Single,System.Single,System.Drawing.PointF)">
            <summary>
            计算两点之间的距离
            </summary>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.Distance(System.Double,System.Double,NRails.Drawing.Vector2D)">
            <summary>
            计算两点之间的距离
            </summary>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcArea(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算由点(X1,Y1) 和 (X2,Y2) 组成的矩形的面积
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.SMath.CalcArea(NRails.Drawing.Vector2D,NRails.Drawing.Vector2D)">
            <summary>
            计算由点(X1,Y1) 和 (X2,Y2) 组成的矩形的面积
            </summary>
            <returns></returns>
        </member>
        <member name="T:NRails.StreamBinarySearchSentenceHandler`2">
            <summary>
            在二分查找法中，指定判别方法的委托，该方法判别当前所指向的位置的数据和目标数据的大小关系, 例如:Position位置的数据大于目标值，则返回More，如果相等则返回Equal，否则返回Less
            </summary>
        </member>
        <member name="T:NRails.Threading.CTSQueue">
            <summary>
            将并发操作转换为串行操作队列
            </summary>
            <typeparam name="TActionEnum"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="F:NRails.Threading.CTSQueue._disposeNotCalled">
            <summary>
            在调用Dispose()函数或者析构函数时，该值会被设置为0
            </summary>
        </member>
        <member name="F:NRails.Threading.CTSQueue.QueueId">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="M:NRails.Threading.CTSQueue.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Threading.CTSQueue.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="F:NRails.Threading.CTSQueue.ActionItem._isAlive">
            <summary>
            在调用Dispose()函数或者析构函数时，该值会被设置为0
            </summary>
        </member>
        <member name="M:NRails.Threading.CTSQueue.ActionItem.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Threading.CTSQueue.ActionItem.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="T:NRails.Threading.CTSQueueBeforeProcessEventArg">
            <summary>
            将并发操作转换为串行操作队列
            </summary>
            <typeparam name="TActionEnum"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:NRails.Threading.DataProcessPool`1">
            <summary>
            多线程数据处理的水池模型，
            </summary>
            <typeparam name="T">需要处理的数据类型</typeparam>
        </member>
        <member name="F:NRails.Threading.DataProcessPool`1.MaxThreadCount">
            <summary>
            设置允许工作的最大线程数
            </summary>
        </member>
        <member name="F:NRails.Threading.DataProcessPool`1._isAlive">
            <summary>
            在调用Dispose()函数或者析构函数时，该值会被设置为0
            </summary>
        </member>
        <member name="M:NRails.Threading.DataProcessPool`1.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Threading.DataProcessPool`1.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="T:NRails.Threading.DataProcessQueue`1">
            <summary>
            多线程数据处理的队列模型,AveProcessRate和AveEnqueueRate标识出性能，正常情况下AveProcessRate如果小于AveEnqueueRate过多的话，说明处理速度过慢
            </summary>
            <typeparam name="T">需要处理的数据类型</typeparam>
        </member>
        <member name="T:NRails.Threading.DataProcessQueue`1.DataProcessHandler">
            <summary>
            
            </summary>
            <param name="datas"></param>
            <param name="state"></param>
        </member>
        <member name="T:NRails.Threading.DataProcessQueue`1.DataProcessHandlerList">
            <summary>
            
            </summary>
            <param name="datas"></param>
            <param name="state"></param>
        </member>
        <member name="F:NRails.Threading.DataProcessQueue`1.ProcessInterval">
            <summary>
            处理时间间隔
            </summary>
        </member>
        <member name="F:NRails.Threading.DataProcessQueue`1.TotalCount">
            <summary>
            总数
            </summary>
        </member>
        <member name="F:NRails.Threading.DataProcessQueue`1.WaitCount">
            <summary>
            正在等待处理的队列个数
            </summary>
        </member>
        <member name="F:NRails.Threading.DataProcessQueue`1.ProcessedCount">
            <summary>
            已经处理的个数
            </summary>
        </member>
        <member name="F:NRails.Threading.DataProcessQueue`1.ProcessingCount">
            <summary>
            处理中的个数
            </summary>
        </member>
        <member name="F:NRails.Threading.DataProcessQueue`1.MaxThreadCount">
            <summary>
            线程数
            </summary>
        </member>
        <member name="F:NRails.Threading.DataProcessQueue`1.MaxProcessCountOneTime">
            <summary>
            标示一次processor调用允许最多的数据个数，如果缓存数大于这个值，那么最多将会只传输这个数量的数据进行处理，默认值8000
            </summary>
        </member>
        <member name="F:NRails.Threading.DataProcessQueue`1._isAlive">
            <summary>
            在调用Dispose()函数或者析构函数时，该值会被设置为0
            </summary>
        </member>
        <member name="M:NRails.Threading.DataProcessQueue`1.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:NRails.Threading.DataProcessQueue`1.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Threading.DataProcessQueue`1.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="M:NRails.Threading.DataProcessQueue`1.#ctor(NRails.Threading.DataProcessQueue{`0}.DataProcessHandler,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="processor"></param>
            <param name="tickDistance">设置处理的时间间隔，单位:毫秒</param>
            <param name="threadCount">设置处理线程数</param>
            <param name="cacheCount">设置缓存数</param>
        </member>
        <member name="M:NRails.Threading.DataProcessQueue`1.#ctor(NRails.Threading.DataProcessQueue{`0}.DataProcessHandlerList,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="processor"></param>
            <param name="tickDistance">设置处理的时间间隔，单位:毫秒</param>
            <param name="threadCount">设置处理线程数</param>
            <param name="cacheCount">设置缓存数</param>
        </member>
        <member name="M:NRails.Threading.DataProcessQueue`1.Enqueue(`0[])">
            <summary>
            向队列传入一份数据，并且尝试开始异步处理，该函数在将数据传入队列后返回
            </summary>
            <param name="datas"></param>
        </member>
        <member name="P:NRails.Threading.DataProcessQueue`1.AveProcessRate">
            <summary>
            平均处理速度
            </summary>
        </member>
        <member name="P:NRails.Threading.DataProcessQueue`1.CurProcessRate">
            <summary>
            当前处理速度
            </summary>
        </member>
        <member name="P:NRails.Threading.DataProcessQueue`1.AveEnqueueRate">
            <summary>
            平均写入速度
            </summary>
        </member>
        <member name="P:NRails.Threading.DataProcessQueue`1.CurEnqueueRate">
            <summary>
            获取当前入队速度
            </summary>
        </member>
        <member name="M:NRails.Threading.DataProcessQueue`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Threading.DataProcessQueue`1.GetProcessInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:NRails.Util.BC">
            <summary>
            提供一种高性能的内存数据流访问方法
            </summary>
        </member>
        <member name="M:NRails.Util.BC.GetByteCount(System.String)">
            <summary>
            返回将给定的字符串转换为byte数组类型时的实际长度(UTF8编码，该方法有别于Encoding.GetByteCount)
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.BC.FromCharString(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            将一个字符串强制转换成字节，即每一个字符都使用(byte)进行强制转换
            </summary>
            <param name="str"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <param name="ignorewhitespace">true=忽略回车换行符,空格,Tab字符</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.BC.FromCharString(System.String,System.Int32,System.Int32)">
            <summary>
            将一个字符串强制转换成字节，即每一个字符都使用(byte)进行强制转换
            </summary>
            <param name="str"></param>
            <param name="offset"></param>
            <param name="len"></param>
        </member>
        <member name="M:NRails.Util.BC.FromCharString(System.String,System.Int32)">
            <summary>
            将一个字符串强制转换成字节，即每一个字符都使用(byte)进行强制转换
            </summary>
            <param name="str"></param>
            <param name="offset"></param>
            <param name="len"></param>
        </member>
        <member name="M:NRails.Util.BC.FromCharString(System.String,System.Int32,System.Boolean)">
            <summary>
            将一个字符串强制转换成字节，即每一个字符都使用(byte)进行强制转换
            </summary>
            <param name="str"></param>
            <param name="offset"></param>
            <param name="len"></param>
        </member>
        <member name="M:NRails.Util.BC.FromCharString(System.String)">
            <summary>
            将一个字符串强制转换成字节，即每一个字符都使用(byte)进行强制转换
            </summary>
        </member>
        <member name="M:NRails.Util.BC.FromCharString(System.String,System.Boolean)">
            <summary>
            将一个字符串强制转换成字节，即每一个字符都使用(byte)进行强制转换
            </summary>
        </member>
        <member name="M:NRails.Util.BC.BCDToByte(System.Byte[],System.Int32@)">
            <summary>
            将给定的序列中的数据按照BCD字面转换为十进制数字，例如 0x11 转换后变成十进制的11 即 十六进制的 0x0b
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.BC.BCDToByte(System.Byte[],System.Int32)">
            <summary>
            将给定的序列中数据按照BCD字面转换为十进制数字，例如 0x11 转换后变成十进制的11 即 十六进制的 0x0b
            </summary>
        </member>
        <member name="M:NRails.Util.BC.BCDToInt16(System.Byte[],System.Int32@)">
            <summary>
            将给定的序列中的数据按照BCD字面转换为十进制数字，例如 0x1123 转换后变成十进制的1123
            </summary>
        </member>
        <member name="M:NRails.Util.BC.BCDToInt16(System.Byte[],System.Int32)">
            <summary>
            将给定的序列中的数据按照BCD字面转换为十进制数字，例如 0x11 转换后变成十进制的1123
            </summary>
        </member>
        <member name="M:NRails.Util.BC.BCDToByte(System.Byte)">
            <summary>
            将给定的数字按照BCD字面转换为十进制数字，例如 0x11 转换后变成十进制的11 即 十六进制的 0x0b
            </summary>
        </member>
        <member name="M:NRails.Util.BC.BCDToUInt32(System.UInt32)">
            <summary>
            将给定的数字按照BCD字面转换为十进制数字，例如 0x11 转换后变成十进制的11 即 十六进制的 0x0b
            </summary>
        </member>
        <member name="M:NRails.Util.BC.BCDToUInt32(System.Int32)">
            <summary>
            将给定的数字按照BCD字面转换为十进制数字，例如 0x11 转换后变成十进制的11 即 十六进制的 0x0b
            </summary>
        </member>
        <member name="M:NRails.Util.BC.BCDToUInt24(System.UInt32)">
            <summary>
            将给定的数字按照BCD字面转换为十进制数字，例如 0x11 转换后变成十进制的11 即 十六进制的 0x0b
            </summary>
        </member>
        <member name="M:NRails.Util.BC.BCDToInt24(System.Int32)">
            <summary>
            将给定的数字按照BCD字面转换为十进制数字，例如 0x11 转换后变成十进制的11 即 十六进制的 0x0b
            </summary>
        </member>
        <member name="M:NRails.Util.BC.BCDToUInt16(System.UInt16)">
            <summary>
            将给定的数字按照BCD字面转换为十进制数字，例如 0x11 转换后变成十进制的11 即 十六进制的 0x0b
            </summary>
        </member>
        <member name="M:NRails.Util.BC.BCDToInt16(System.Int16)">
            <summary>
            将给定的数字按照BCD字面转换为十进制数字，例如 0x11 转换后变成十进制的11 即 十六进制的 0x0b
            </summary>
        </member>
        <member name="M:NRails.Util.BC.ByteToBCD(System.Byte)">
            <summary>
            将给定十进制数据按字面转换成BCD字节，例如11转换成0x11，即0x0B
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.BC.ToBytes(System.String)">
            <summary>
            将给定字符串转换为字节数组(UTF8编码，并且包含长度长度数据，该方法有别于Encoding.GetBytes)
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.BC.GetBytes(System.UInt16,System.Boolean)">
            <summary>
            获取 ushort 数据类型值的字节数据，高地址字节数据存放在返回的字节数组后面，底地址字节数据存放在返回的字节数组前面
            </summary>
            <param name="data"></param>
            <param name="isReverse">是否将返回结果数组反序，true 则反序，fale 则不反序，默认为 false </param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.BC.GetBytes(System.Int16,System.Boolean)">
            <summary>
            获取 short 数据类型值的字节数据，高地址字节数据存放在返回的字节数组后面，底地址字节数据存放在返回的字节数组前面
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.BC.GetBytes(System.UInt32,System.Boolean)">
            <summary>
            获取 uint 数据类型值的字节数据，高地址字节数据存放在返回的字节数组后面，底地址字节数据存放在返回的字节数组前面
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.BC.GetBytes(System.Int32,System.Boolean)">
            <summary>
            获取 int 数据类型值的字节数据，高地址字节数据存放在返回的字节数组后面，底地址字节数据存放在返回的字节数组前面
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.BC.GetBytes(System.UInt64,System.Boolean)">
            <summary>
            获取 ulong 数据类型值的字节数据，高地址字节数据存放在返回的字节数组后面，底地址字节数据存放在返回的字节数组前面
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.BC.GetBytes(System.Int64,System.Boolean)">
            <summary>
            获取 long 数据类型值的字节数据，高地址字节数据存放在返回的字节数组后面，底地址字节数据存放在返回的字节数组前面
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.BC.FindSymbol(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            在给定的字节数组中找到和目标一样的数据所在的偏移位置,如果找不到则返回-1
            </summary>
            <param name="buffer">需要查询的数据缓冲区</param>
            <param name="bufferStart">查询起始偏移</param>
            <param name="bufferEnd">查询结束偏移，注意：不是长度</param>
            <param name="symbol">所需要查询的数据</param>
            <param name="index">要求查询到的第N个符号位置，N>=0</param>
            <param name="moveEnd">当查找到数据时，是否将偏移位置移动到所需要查询数据的结束位置</param>
            <param name="reverseFind">是否从后面开始查询</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.BC.GetSymbolCount(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            获取指定的符号在数组中的个数
            </summary>
            <param name="buffer"></param>
            <param name="dataStart"></param>
            <param name="dataEnd">需要查找符号的结束处，注意：不是长度</param>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.BC.GetSymbolCount(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            获取指定的符号在数组中的个数
            </summary>
            <param name="buffer"></param>
            <param name="dataStart"></param>
            <param name="dataEnd">需要查找符号的结束处，注意：不是长度</param>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.BC.ReplaceSymbol(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Int32,NRails.Util.CreateNewArrayFlag,System.Boolean)">
            <summary>
            将给定的数组中的symbol 替换成 replacment
            </summary>
            <param name="buffer"></param>
            <param name="dataStart">替换范围开始处</param>
            <param name="dataEnd">替换范围结束处,注意不是长度</param>
            <param name="symbol">需要替换的内容</param>
            <param name="replacment">替换结果</param>
            <param name="createNewArray">是否创建新数组，如果该值指定为false那么必须要求buffer足够长度用于替换</param>
            <param name="outerRangeValidate">表示在替换范围外的数据是否有效，该值只有在createNewArray为true,或者createNewArray=Auto 并且替换后所产生的字节组长度比原来的大时才能生效，如果outerRangeValidate设置为true，那么在创建新的数组时，会考虑将替换范围之外的数据业原封不动地进行一次拷贝</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.BC.SetLow(System.UInt16@,System.Byte)">
            <summary>
            设置低位字节
            </summary>
            <param name="target"></param>
            <param name="low"></param>
        </member>
        <member name="M:NRails.Util.BC.SetHigh(System.UInt16@,System.Byte)">
            <summary>
            设置高位字节
            </summary>
            <param name="target"></param>
            <param name="low"></param>
        </member>
        <member name="M:NRails.Util.BC.UnicodeTurn(System.Byte[],System.Int32,System.Int32)">
            <summary>
            调换Unicode字节组的相邻前后2个字节
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="len"></param>
        </member>
        <member name="F:NRails.Util.CreateNewArrayFlag.TRUE">
            <summary>
            在判断一次需要替换的个数之后，都进行一次序列拷贝，无论是否有需要替换的内容
            </summary>
        </member>
        <member name="F:NRails.Util.CreateNewArrayFlag.FALSE">
            <summary>
            在判断一次需要替换的个数之后，不进行一次序列拷贝，无论是否有需要替换的内容
            </summary>
        </member>
        <member name="F:NRails.Util.CreateNewArrayFlag.AUTO">
            <summary>
            在判断一次需要替换的个数之后，如果没有需要替换的内容，则直接返回原序列，如果有需要替换的内容，则进行替换
            </summary>
        </member>
        <member name="T:NRails.Util.CompressUrl">
             <summary>
            URL 地址压缩 
             </summary>
        </member>
        <member name="F:NRails.Util.CompressUrl.chars">
            <summary>
            要使用生成URL的字符
            </summary>
        </member>
        <member name="M:NRails.Util.CompressUrl.ShortUrls(System.String,System.String)">
            <summary>
            Url 地址压缩，返回结果字符数组中有四个字符串
            1、将长网址md5生成32位签名串，分为4段，每段8个字节；
            2、对这四段循环处理，取8个字节，将他看成16进制串与0x3fffffff(30位1)与操作，即超过30位的忽略处理；
            3、这30位分成6段，每5位的数字作为字母表的索引取得特定字符，依次进行获得6位字符串；
            4、总的md5串可以获得4个6位串；取里面的任意一个就可作为这个长url的短url地址；
            </summary>
            <param name="url">Url</param>
            <param name="key">MD5加密字符的混合KEY </param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CompressUrl.ShortUrl(System.String,System.String)">
            <summary>
            Url 地址压缩，将方法 ShortUrls 中的结果进行拼接成一个字符串
            </summary>
            <param name="url">Url</param>
            <param name="key">MD5加密字符的混合KEY</param>
            <returns></returns>
        </member>
        <member name="T:NRails.Util.EncryptHelper">
            <summary>
            安全性处理类
            </summary>
            <summary>
            安全性处理类
            </summary>
        </member>
        <member name="F:NRails.Util.EncryptHelper.NSystem">
            <summary>
            用于生成客户端密文的密钥字符串
            </summary>
        </member>
        <member name="F:NRails.Util.EncryptHelper.UserNameSystem">
            <summary>
            用于生成解释用户名的密钥字符串
            </summary>
        </member>
        <member name="M:NRails.Util.EncryptHelper.IsValidate(System.String,System.String,System.Int32)">
            <summary>
            验证客户端的密锁是否正确
            </summary>
            <param name="userId">用户名</param>
            <param name="locker">密锁</param>
            <param name="maxTime">最大密钥生存期，单位：分钟，如果密钥时间过长，则会被视为无效密钥,设置为-1表示忽略此参数</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.BuildKey(System.String)">
            <summary>
            生成数据服务器校验Key
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.MD5Encrypt(System.Byte[])">
            <summary>
            MD5加密
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.MD5Encrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            MD5加密
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.MD5Encrypt(System.String)">
            <summary>
            对一个字符串进行MD5加密
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.MD5EncryptBytes(System.String)">
            <summary>
            对一个字符串进行MD5加密
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.MD5Encrypt(System.String,System.Boolean)">
            <summary>
            对一个字符串进行MD5加密
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.MD5Hash(System.String)">
            <summary>
            对一个字符串进行MD5哈希计算
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.DESEncrypt(System.String,System.String)">
            <summary>
            进行DES加密。
            </summary>
            <param name="pToEncrypt">要加密的字符串。</param>
            <param name="sKey">密钥，且必须为8位。</param>
            <returns>以Base64格式返回的加密字符串。</returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.DESDecrypt(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            进行DES解密。
            </summary>
            <param name="pToDecrypt">要解密的以Base64</param>
            <param name="sKey">密钥，且必须为8位。</param>
            <returns>已解密的字符串。</returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.DESDecrypt(System.String,System.String)">
            <summary>
            进行DES解密。
            </summary>
            <param name="pToDecrypt">要解密的以Base64</param>
            <param name="sKey">密钥，且必须为8位。</param>
            <returns>已解密的字符串。</returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.DES(System.String,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
            C# DES加解密主函数
            </summary>
            <param name="key">密码，</param>
            <param name="strMessage">待加密内容</param>
            <param name="isEncrypt">true 表示加密，false 表示解密</param>
            <param name="mode">1 表示CBC 模式，其它值表示非CBC模式</param>
            <param name="strIV">IV</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.DES_CreateKey(System.String)">
            <summary>
            密钥生成函数
            </summary>
            <param name="strKey">密钥</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.MoveByte(System.Int32,System.Int32)">
            <summary>
            实现无符号右移,相当于javascript中的>>>运算符
            </summary>
            <param name="val"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.StringToHex(System.String)">
            <summary>
            将普通的字符串转换成16进制的字符串
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.HexToString(System.String)">
            <summary>
            将16进制的字符串转换成普通的字符串
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.DesEncrypt2JS(System.String,System.String)">
            <summary>
            C# DES加密函数
            </summary>
            <param name="key">密钥</param>
            <param name="message">待加密内容</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.DesDecrypt2JS(System.String,System.String)">
            <summary>
            C# DES解密函数
            </summary>
            <param name="key">密钥</param>
            <param name="message">待解密内容</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.QuotedPrintable.Encode(System.String)">
            <summary> 
            Encodes a string to QuotedPrintable 
            </summary> 
            <param name="_ToEncode">String to encode</param> 
            <returns>QuotedPrintable encoded string</returns> 
        </member>
        <member name="M:NRails.Util.EncryptHelper.QuotedPrintable.Decode(System.String)">
            <summary> 
            Decodes a QuotedPrintable encoded string 
            </summary> 
            <param name="_ToDecode">The encoded string to decode</param> 
            <returns>Decoded string</returns> 
        </member>
        <member name="M:NRails.Util.EncryptHelper.NREncrypt(System.String,System.UInt32@,System.UInt32@)">
            <summary>
            随机加密字符串
            </summary>
            <param name="str"></param>
            <param name="m"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.NRDecrypt(System.String,System.UInt32,System.UInt32)">
            <summary>
            解密由NREncrypt方法加密后的字符串
            </summary>
            <param name="str"></param>
            <param name="m"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.GetRSAParameters">
            <summary>
            生成RSA密钥
            </summary>
            <returns></returns>
        </member>
        <member name="F:NRails.Util.EncryptHelper._auchCRCHi">
            <summary>
            crc高位表
            </summary>
        </member>
        <member name="F:NRails.Util.EncryptHelper._auchCRCLo">
            <summary>
            crc低位表
            </summary>
        </member>
        <member name="M:NRails.Util.EncryptHelper.CRC16(System.Byte[],System.Int32,System.Int32)">
            <summary>
            计算CRC16校验值
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.CRC16(System.Byte[],System.Int32,System.Int32,System.Byte@,System.Byte@)">
            <summary>
            计算CRC16校验值
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.CRC16(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}},System.Int32,System.Int32,System.Byte@,System.Byte@,System.Int32@)">
            <summary>
            计算CRC16
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="crcHi"></param>
            <param name="crcLo"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.CRC16(System.Byte[])">
            <summary>
            计算CRC16校验值
            </summary>
        </member>
        <member name="M:NRails.Util.EncryptHelper.CRC16ITU(System.Byte[],System.Int32,System.Int32)">
            <summary>
            计算CRC16校验值
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="T:NRails.Util.EncryptHelper.CRC8Calc">
            
            Class for calculating CRC8 checksums...
            
        </member>
        <member name="M:NRails.Util.EncryptHelper.B64Encrypt(System.String,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="encoding">传入null则默认为 gbk编码</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.B64Encrypt(System.String,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="encoding">传入null则默认为 gbk编码</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.B64Decrypt(System.String,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="encoding">传入null则默认为 gbk编码</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.EncryptHelper.B64Decrypt(System.String,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="encoding">传入null则默认为 gbk编码</param>
            <returns></returns>
        </member>
        <member name="F:NRails.Util.CUSTOM_VALIDATE_RESULT.无效的密钥">
            <summary>
            不是一个有效的密钥
            </summary>
        </member>
        <member name="F:NRails.Util.CUSTOM_VALIDATE_RESULT.过期的密钥">
            <summary>
            这是一个无效的过期密钥
            </summary>
        </member>
        <member name="F:NRails.Util.CUSTOM_VALIDATE_RESULT.SUCCESS">
            <summary>
            验证通过
            </summary>
        </member>
        <member name="T:NRails.Util.FileSystemHelper">
            <summary>
            提供文件系统的操作便捷功能
            </summary>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ReadIniValue(System.String,System.String,System.String)">
            <summary>
            读取Ini配置文件
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="spath"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.GetFile(System.String)">
            <summary>
            返回给定绝对路径
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.GetPath(System.String,System.String[])">
            <summary>
            取得当前应用程序目录下的子目录
            </summary>
            <param name="path"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ReName(System.String,System.String)">
            <summary>
            将给定的文件名更换一个名称
            </summary>
            <param name="fileName"></param>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.Combine(System.String,System.String[])">
            <summary>
            拼接路径
            </summary>
            <param name="path"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.CreateDirectory(System.String)">
            <summary>
            尝试创建一个目录
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.IsFileUsing(System.String)">
            <summary>
            判断给定的文件是否正在被使用
            </summary>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="T:NRails.Util.FileSystemHelper.EnumFileSystemMethodHandler">
            <summary>
            遍历文件夹所要执行的方法委托
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.CopyDirectory(System.String,System.String)">
              <summary>    
              复制文件夹    
              </summary>    
              <param   name="sourceDirName">源文件夹</param>    
              <param   name="destDirName">目标文件夹</param>    
              <param   name="statusWinForm">状态窗口</param>    
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ReplaseExtention(System.String,System.String)">
            <summary>
            替换给定文件的扩展名为给定的名称
            </summary>
            <param name="fileName"></param>
            <param name="extention"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.IsValidatePath(System.String)">
            <summary>
            判断给定的字符串是否可用于文件系统路径
            </summary>
            <param name="terminalID"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ShowImageSave(System.String)">
            <summary>
            显示一个图片保存对话框
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ShowFolderSelector(System.String,System.String,System.String)">
            <summary>
            打开一个目录选择对话框，如果操作被取消返回null
            </summary>
            <param name="caption">标题</param>
            <param name="defaultFolder">默认所选择的目录</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ShowFolderSelector(System.String)">
            <summary>
            打开一个目录选择对话框，如果操作被取消返回null
            </summary>
            <param name="caption">标题</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ShowFolderSelector(System.String,System.String)">
            <summary>
            打开一个目录选择对话框，如果操作被取消返回null
            </summary>
            <param name="caption">标题</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ShowFileSave(System.String,System.String,System.String)">
            <summary>
            打开一个文件保存对话框，如果操作被取消，返回null
            </summary>
            <param name="caption">标题</param>
            <param name="defaultFile">默认所选择的文件位置</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ShowFileSave(System.String)">
            <summary>
            打开一个文件保存对话框，如果操作被取消，返回null
            </summary>
            <param name="caption">标题</param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ShowFileSave(System.String,System.String)">
            <summary>
            打开一个文件保存对话框，如果操作被取消，返回null
            </summary>
            <param name="caption">标题</param>
            <param name="filter">过滤器</param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ShowFileOpen(System.String,System.String,System.String)">
            <summary>
            打开一个打开文件对话框，如果操作被取消，返回null
            </summary>
            <param name="caption">标题</param>
            <param name="defaultFile">默认所选择的文件位置</param>
            <param name="filter">文件类型过滤器</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ShowFileOpen(System.String,System.String,System.String,System.Boolean)">
            <summary>
            打开一个打开文件对话框，如果操作被取消，返回null
            </summary>
            <param name="caption">标题</param>
            <param name="defaultFile">默认所选择的文件位置(如果为空或者为string.Empty本次打开操作将被记录到注册表)</param>
            <param name="filter">文件类型过滤器</param>
            <param name="multiSelect">true=可以选择多个文件</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ShowFileOpen(System.String,System.String,System.Boolean)">
            <summary>
            打开一个打开文件对话框，如果操作被取消，返回null
            </summary>
            <param name="caption">标题</param>
            <param name="filter">文件类型过滤器</param>
            <param name="multiSelect">true=可以选择多个文件</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ShowFileOpen(System.String,System.String)">
            <summary>
            打开一个打开文件对话框，如果操作被取消，返回null
            </summary>
            <param name="caption">标题</param>
            <param name="filter">文件类型过滤器</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ShowFileOpen(System.String)">
            <summary>
            打开一个打开文件对话框，如果操作被取消，返回null
            </summary>
            <param name="caption">标题</param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.GetFilesCount(System.IO.DirectoryInfo)">
            <summary>
            读取给定目录下的文件数量
            </summary>
            <param name="dirInfo"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.FindFile(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            找到给定fileName的绝对路径文件,如果传入了一个绝对路径，则直接返回，如果找不到文件则返会null
            </summary>
            <param name="fileName"></param>
            <param name="dirs">优先查找的文件目录，可以为空</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.EnumFiles(System.String,System.String,NRails.Util.FileSystemHelper.EnumFileSystemMethodHandler)">
            <summary>
            遍历指定目录下的所有文件夹
            </summary>
            <param name="rootDir"></param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.EnumDirectory(System.String,NRails.Util.FileSystemHelper.EnumFileSystemMethodHandler)">
            <summary>
            遍历指定目录下的所有文件夹
            </summary>
            <param name="rootDir"></param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            删除指定目录
            </summary>
            <param name="dirName"></param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.DeleteDirectory(System.String)">
            <summary>
            删除指定目录
            </summary>
            <param name="dirName"></param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ClearDirectory(System.String,System.Boolean)">
            <summary>
            清除给定目录下的内容
            </summary>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.DoDeleteFile(System.String,System.String@)">
            <summary>
            删除文件
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.DoDeleteFolder(System.String,System.String@)">
            <summary>
            删除文件夹
            </summary>
            <param name="folder"></param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.DeleteFile(System.String)">
            <summary>
            尝试删除一个文件
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.OpenFile(System.String,System.IO.FileAccess@)">
            <summary>
            尝试打开一个文件，如果文件不存在，则会创建它，并且尝试以完全访问的方式打开
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.AppendText(System.String,System.String)">
            <summary>
            追加文本到文件
            </summary>
            <param name="fileName"></param>
            <param name="text"></param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.WriteAllBytes(System.String,System.Byte[],System.Boolean)">
            <summary>
            将一个对象序列化后写入到文件中
            </summary>
            <param name="obj">需要写入的对象</param>
            <param name="fileName">目标文件名</param>
            <param name="backup">true=备份到系统目录下</param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.WriteAllBytes(System.String,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            将字节数据写入到文件中
            </summary>
            <param name="obj">需要写入的对象</param>
            <param name="fileName">目标文件名</param>
            <param name="backup">true=备份到系统目录下</param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.WriteAllText(System.String,System.String)">
            <summary>
            以Utf8编码写入文本到文件
            </summary>
            <param name="fileName"></param>
            <param name="text"></param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ReadAllBytes(System.String)">
            <summary>
            从文件中读取用所以字节数据，如果文件不存在则返回null
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.SaveToFile(System.Object,System.String,System.Boolean,System.Int32)">
            <summary>
            以延迟的方式将一个对象序列化后写入到文件中，对于同一个文件存储位置重复挂起写入的操作将被取消
            </summary>
            <param name="obj">需要写入的对象</param>
            <param name="fileName">目标文件名</param>
            <param name="backup">true=保留一份原有文件的副本作为备份</param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.SaveToFile(System.Object,System.String,System.Boolean)">
            <summary>
            将一个对象序列化后写入到文件中
            </summary>
            <param name="obj">需要写入的对象</param>
            <param name="fileName">目标文件名</param>
            <param name="backup">true=保留一份原有文件的副本作为备份</param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.SaveToFile``1(``0,System.String,System.Boolean)">
            <summary>
            将一个对象序列化后写入到文件中
            </summary>
            <param name="obj">需要写入的对象</param>
            <param name="fileName">目标文件名</param>
            <param name="backup">true=保留一份原有文件的副本作为备份</param>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ReadFromFile(System.String)">
            <summary>
            从文件中读取用WriteObject方法写入的对象,如果找不到文件则返回空
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.FileSystemHelper.ReadFromFile``1(System.String)">
            <summary>
            从文件中读取用WriteObject方法写入的对象,如果找不到文件则返回空
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NRails.Util.FileSystemHelper.GetEncoding(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:NRails.Util.FileSystemHelper.GetEncoding(System.IO.Stream)" -->
        <member name="M:NRails.Util.FileSystemHelper.IsUTF8Bytes(System.Byte[])">
            <summary>
            判断是否是不带 BOM 的 UTF8 格式 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:NRails.Util.FSH">
            <summary>
            FileSystemHelper缩写
            </summary>
        </member>
        <member name="T:NRails.Util.NetHelper">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:NRails.Util.NetHelper.Post(System.String,System.Byte[],NRails.Util.DoHttpRequestAsyncCallback,System.Int32)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="datas"></param>
            <param name="callback"></param>
            <param name="timeout">请求超时时长，单位：毫秒，默认 30秒</param>
        </member>
        <member name="M:NRails.Util.NetHelper.Get(System.String,NRails.Util.DoHttpRequestAsyncCallback,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="callback"></param>
            <param name="userToken"></param>
            <param name="timeout">请求超时时长，单位：毫秒，默认 30秒</param>
        </member>
        <member name="M:NRails.Util.NetHelper.Get(System.String,NRails.Util.Cookies,NRails.Util.DoHttpRequestAsyncCallback,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="cookies"></param>
            <param name="callback"></param>
            <param name="userToken"></param>
            <param name="timeout">请求超时时长，单位：毫秒，默认 30秒</param>
        </member>
        <member name="M:NRails.Util.NetHelper.Post(System.String,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="datas"></param>
            <param name="timeout">请求超时时长，单位：毫秒，默认 30秒</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.Get(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="timeout">请求超时时长，单位：毫秒，默认 30秒</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.Get(System.String,System.Text.Encoding,System.Int32)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="encoding"></param>
            <param name="timeout">请求超时时长，单位：毫秒，默认 30秒</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.Get(System.String,NRails.Util.Cookies,System.Int32)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="cookies"></param>
            <param name="timeout">请求超时时长，单位：毫秒，默认 30秒</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.Get(System.String,System.Net.CookieContainer,System.Int32)">
            <summary>
            读取指定URL的网页内容，有可能抛出异常
            </summary>
            <param name="url"></param>
            <param name="cookies"></param>
            <param name="timeout">请求超时时长，单位：毫秒，默认 30秒</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.NetFwAddPorts(System.String,System.Int32,System.String)">
            <summary>  
            添加防火墙例外端口，在服务资源初始化过程中，可能抛出异常
            </summary>  
            <param name="name">名称</param>  
            <param name="port">端口</param>  
            <param name="protocol">协议(TCP、UDP)</param>  
        </member>
        <member name="M:NRails.Util.NetHelper.NetFwAddApps(System.String,System.String)">
            <summary>  
            将应用程序添加到防火墙例外，在服务资源初始化过程中，可能抛出异常
            </summary>  
            <param name="name">应用程序名称</param>  
            <param name="executablePath">应用程序可执行文件全路径</param>  
        </member>
        <member name="M:NRails.Util.NetHelper.NetFwDelApps(System.Int32,System.String)">
            <summary>  
            删除防火墙例外端口，在服务资源初始化过程中，可能抛出异常
            </summary>  
            <param name="port">端口</param>  
            <param name="protocol">协议（TCP、UDP）</param>  
        </member>
        <member name="M:NRails.Util.NetHelper.NetFwDelApps(System.String)">
            <summary>  
            删除防火墙例外中应用程序，在服务资源初始化过程中，可能抛出异常
            </summary>  
            <param name="executablePath">程序的绝对路径</param>  
        </member>
        <member name="M:NRails.Util.NetHelper.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            验证Http证书默认方法，该方法一定返回true
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.GetResponseStream(System.String,System.Net.CookieContainer)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="cookie"></param>
            <returns></returns>
        </member>
        <member name="P:NRails.Util.NetHelper.NetCardEnabled">
            <summary>
            获取当前网卡的可用状态
            </summary>
        </member>
        <member name="P:NRails.Util.NetHelper.NetConnected">
            <summary>
            获取当前网络连接状态
            </summary>
        </member>
        <member name="M:NRails.Util.NetHelper.IsPortUsed(System.Int32,System.Net.Sockets.ProtocolType)">
            <summary>
            检测本机的端口是否可用
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.GetFreeSocketPort(System.Net.Sockets.ProtocolType)">
            <summary>
            检测本机的端口是否可用
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.GetUrlRemoteAddress(System.String)">
            <summary>
            从给定的URL中分析出目标主机信息
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.GetUrlHost(System.String)">
            <summary>
            从给定的URL中分析出目标主机信息
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.GetWanAddress">
            <summary>
            获取外网IP地址，该方法性能低，如果有需要重复使用，请缓存结果
            获取失败则返回空
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.GetWanCityCode">
            <summary>
            获取外网IP地址所处的城市代码，该方法性能低，如果有需要重复使用，请缓存结果
            获取失败则返回空
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.GetMailServer(System.String)">
            <summary>
            通过邮件地址获取邮件服务器
            </summary>
            <param name="mailAddress">邮件地址</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.GetSpf(System.String)">
            <summary>
            通过邮件地址获取邮件服务器
            </summary>
            <param name="mailAddress">邮件地址</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.SendMail(NRails.Util.SendMailParms)">
            <summary>
            以原生SMTP协议发送一个邮件
            </summary>
            <param name="from">邮件发送源地址，这是一个邮箱地址，正常情况下应该是某服务器域名</param>
            <param name="fromName">发送者名称</param>
            <param name="to">收件邮箱地址</param>
            <param name="toName">收件者名称</param>
            <param name="subject">邮件标题</param>
            <param name="content">邮件内容</param>
            <param name="isHtml">true＝邮件内容是Html文本</param>
            <param name="dkimSelector">DKIM公钥选择器，你需要在域名管理的运营商那里配置你的DKIM公钥</param>
            <param name="customHeaders">自定义邮件头</param>
            <param name="sigHeader">DKIM签名头，如果不填写则默认为{From,To,Subject}</param>
            <param name="dkimPrivateKey">DKIM私钥，如果不配置这个值，那么发出去的邮件不会携带DKIM签名，这会大大提高邮件被丢入垃圾箱的可能性</param>
        </member>
        <member name="M:NRails.Util.NetHelper.SendMail(System.String,System.String,System.String,System.String)">
            <summary>
            已本机作为邮件服务器发送一份邮件到目标邮箱
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="content"></param>
        </member>
        <member name="M:NRails.Util.NetHelper.SendEmail(System.String,System.Int32,System.String,System.String,System.String,System.String[],System.String,System.String,System.Text.Encoding,System.Net.Mail.Attachment[])">
            <summary>
            发送邮件
            </summary>
            <param name="host">SMTP 事务的主机的名称或 IP 地址</param>
            <param name="port">host 上使用的端口</param>
            <param name="userName">电子邮件地址</param>
            <param name="pwd">邮箱密码</param>
            <param name="toAddress">接收邮箱地址</param>
            <param name="ccAddress">抄送邮箱地址</param>
            <param name="subject">主题</param>
            <param name="body">内容</param>
            <param name="encoding">邮件正文编码</param>
            <param name="attachment">附件，附件名称不要包含非ASCII字符</param>
        </member>
        <member name="M:NRails.Util.NetHelper.CanConnect(System.Net.IPEndPoint)">
            <summary>
            
            </summary>
            <param name="iPEndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.CanConnect(System.String)">
            <summary>
            返回给定的地址是否可以连接
            </summary>
            <param name="serveraddress"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.CanConnect(System.Net.EndPoint)">
            <summary>
            返回给定的地址是否可以连接
            </summary>
            <param name="serveraddress"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.Connect(System.Net.Sockets.Socket,System.Net.EndPoint,System.Int32,System.Boolean)">
            <summary>
            尝试在timeout时间内连接到指定的套接字连接到指定的地址
            </summary>
            <param name="socket"></param>
            <param name="host">指定的地址</param>
            <param name="timeout">超时时间</param>
            <param name="disposeWhenFaild">标识是否在连接失败的时候释放套接字对象</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.Connect(System.Net.Sockets.Socket,System.Net.EndPoint,System.Int32)">
            <summary>
            尝试在timeout时间内连接到指定的套接字连接到指定的地址
            </summary>
        </member>
        <member name="M:NRails.Util.NetHelper.Receive(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32,System.Boolean)">
            <summary>
            尝试在timeout时间内连接到指定的套接字连接到指定的地址
            </summary>
        </member>
        <member name="M:NRails.Util.NetHelper.Receive(System.Net.Sockets.Socket,System.Byte[],System.Int32@,System.Int32,System.Boolean)">
            <summary>
            尝试在timeout时间内连接到指定的套接字连接到指定的地址
            </summary>
        </member>
        <member name="M:NRails.Util.NetHelper.Receive(System.Net.Sockets.Socket,System.Byte[],System.Int32@,System.Int32)">
            <summary>
            尝试在timeout时间内连接到指定的套接字连接到指定的地址
            </summary>
        </member>
        <member name="M:NRails.Util.NetHelper.Receive(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            尝试接收数据并返回 
            </summary>
            <param name="socket"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.ReceiveHttp(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            接收Http数据
            </summary>
            <param name="socket"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.Receive(System.Net.Sockets.Socket,System.Int32,System.Text.Encoding)">
            <summary>
            读取文本
            </summary>
            <param name="socket"></param>
            <param name="timeout"></param>
            <param name="encoding">如果传入 null 则默认使用 gbk 编码</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.Send(System.Net.Sockets.Socket,System.String,System.Text.Encoding)">
            <summary>
            写入一行文本
            </summary>
            <param name="socket"></param>
            <param name="text">需要写入的文本</param>
            <param name="encoding">需要写入的编码类型,设置为null默认为GBK编码</param>
        </member>
        <member name="M:NRails.Util.NetHelper.Send(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            发送数据
            </summary>
            <param name="socket"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <param name="timeout"></param>
            <param name="disposeWhenFaild"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.CancelIO(System.Net.Sockets.Socket)">
            <summary>
            取消套接字上的异步操作
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:NRails.Util.NetHelper.DisConnectAsync(System.Net.Sockets.Socket,System.Boolean,System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs},System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            尝试断开连接
            </summary>
            <param name="socket"></param>
            <param name="reuse"></param>
            <param name="completed"></param>
            <param name="e"></param>
        </member>
        <member name="M:NRails.Util.NetHelper.Bind(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            将给定的套接字绑定到本机的指定端口
            </summary>
            <param name="socket"></param>
            <param name="port"></param>
        </member>
        <member name="M:NRails.Util.NetHelper.SetKeepAlive(System.Net.Sockets.Socket,System.Boolean,System.Int32,System.Int32)">
            <summary>
            设置一个给定的Socket的KeepAlive值
            </summary>
            <param name="socket"></param>
            <param name="wait">空闲状态时间，即：当链路连接空闲多久后开始第一次发送探测数据，单位：毫秒</param>
            <param name="interval">发送间隔，开始发送探测后的时间间隔，单位：毫秒</param>
        </member>
        <member name="M:NRails.Util.NetHelper.AcceptAsync(System.Net.Sockets.Socket,System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs},System.Net.Sockets.SocketAsyncEventArgs,System.Net.Sockets.Socket)">
            <summary>
            准备一个连接
            </summary>
            <param name="socket"></param>
            <param name="completed"></param>
            <param name="e"></param>
        </member>
        <member name="M:NRails.Util.NetHelper.Write(System.Net.Sockets.Socket,System.String,System.Text.Encoding)">
            <summary>
            向套接字所链接的服务器发送一段文本
            </summary>
            <param name="text"></param>
            <param name="encoding">不填写则默认为gbk</param>
        </member>
        <member name="M:NRails.Util.NetHelper.WriteLine(System.Net.Sockets.Socket,System.String,System.Text.Encoding)">
            <summary>
            向套接字所链接的服务器发送一段文本
            </summary>
            <param name="text"></param>
            <param name="encoding">不填写则默认为gbk</param>
        </member>
        <member name="M:NRails.Util.NetHelper.ClearCookieCache">
            <summary>
            删除电脑浏览器缓存和cookie
            </summary>
        </member>
        <member name="M:NRails.Util.NetHelper.Socket(System.Net.Sockets.ProtocolType)">
            <summary>
            创建一个给定协议类型的套接字实例
            </summary>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.NetHelper.SendAsync(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs},System.Net.Sockets.SocketAsyncEventArgs,System.Net.EndPoint)">
            <summary>
            发送数据
            </summary>
            <param name="socket"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="completed"></param>
            <param name="e"></param>
            <param name="endPoint"></param>
        </member>
        <member name="M:NRails.Util.NetHelper.SendAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte}[],System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs},System.Net.Sockets.SocketAsyncEventArgs,System.Net.EndPoint)">
            <summary>
            发送数据
            </summary>
            <param name="socket"></param>
            <param name="bytes"></param>
            <param name="completed"></param>
            <param name="e"></param>
            <param name="endPoint"></param>
        </member>
        <member name="M:NRails.Util.NetHelper.ConnectAsync(System.Net.Sockets.Socket,System.String,System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs},System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            连接到指定服务器
            </summary>
            <param name="socket"></param>
            <param name="serverAddress">服务器地址，例如 www.baidu.com 或者 123.32.23.12:700 或者 www.baidu.com:9898</param>
        </member>
        <member name="M:NRails.Util.NetHelper.ConnectAsync(System.Net.Sockets.Socket,System.Net.EndPoint,System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs},System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            连接到指定服务器
            </summary>
            <param name="socket"></param>
            <param name="serverAddress">服务器地址，例如 www.baidu.com 或者 123.32.23.12:700 或者 www.baidu.com:9898</param>
        </member>
        <member name="M:NRails.Util.NetHelper.ReceiveAsync(System.Net.Sockets.Socket,System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs},System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            准备一个连接
            </summary>
            <param name="socket"></param>
            <param name="completed"></param>
            <param name="e"></param>
        </member>
        <member name="M:NRails.Util.LambdaHelper.GetElementType(System.Linq.Expressions.Expression)">
            <summary>
            获取返回类型
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="F:NRails.Util.DoHttpRequestAsyncState.Success">
            <summary>
            true=请求成功返回,false=请求过程发生错误，错误信息详见Exception字段
            </summary>
        </member>
        <member name="F:NRails.Util.DoHttpRequestAsyncState.ResponseData">
            <summary>
            应答数据
            </summary>
        </member>
        <member name="F:NRails.Util.InvokeHttpContext.HttpInvoker">
            <summary>
            用于执行Http请求
            </summary>
        </member>
        <member name="F:NRails.Util.InvokeHttpContext._isAlive">
            <summary>
            在调用Dispose()函数或者析构函数时，该值会被设置为0
            </summary>
        </member>
        <member name="M:NRails.Util.InvokeHttpContext.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Util.InvokeHttpContext.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="M:NRails.Util.InvokeHttpContext.GetSubConentes(System.String,System.String[])">
            <summary>
            找到包含指定关键字的表单
            </summary>
            <param name="contentStrign"></param>
            <param name="keyword"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.InvokeHttpContext.GetSubConentes(System.String,System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Regex,System.String[])">
            <summary>
            找到包含指定关键字的Html内容
            </summary>
            <param name="contentStrign"></param>
            <param name="keyword"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.InvokeHttpContext.GetHtmlConentes(System.String,System.String,System.String[])">
            <summary>
            找到包含指定关键字的Html内容
            </summary>
            <param name="contentStrign"></param>
            <param name="keyword"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.InvokeHttpContext.GetHtmlConentes(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            找到包含指定关键字的Html内容
            </summary>
            <param name="contentStrign"></param>
            <param name="keyword"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.InvokeHttpContext.GetSubConentes(System.String,System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Regex,System.Boolean,System.String[])">
            <summary>
            找到包含指定关键字的Html内容
            </summary>
            <param name="contentStrign"></param>
            <param name="keyword"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.InvokeHttpContext.GetDiferenceCookie(System.String,System.String)">
            <summary>
            找出在cookie1中有的，cookie2没有的cookie元素
            </summary>
            <param name="cookie1"></param>
            <param name="cookie2"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.InvokeHttpContext.GetRegexValue(System.String,System.String,System.Int32)">
            <summary>
            从input中获取满足正则表达式pattern中的值
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.InvokeHttpContext.GetRegexValue(System.String,System.Text.RegularExpressions.Regex,System.Int32)">
            <summary>
            从input中获取满足正则表达式pattern中的值
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="F:NRails.Util.HttpInvoker._isAlive">
            <summary>
            在调用Dispose()函数或者析构函数时，该值会被设置为0
            </summary>
        </member>
        <member name="M:NRails.Util.HttpInvoker.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Util.HttpInvoker.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="M:NRails.Util.CmsHList.UrlEncode(System.Text.Encoding)">
            <summary>
            将给定字典中的值进行URL编码
            </summary>
            <param name="dic"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CmsHList.UrlDecode(System.Text.Encoding)">
            <summary>
            将给定字典中的值进行URL解码
            </summary>
            <param name="dic"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CmsHList.ToUrlParam(System.Text.Encoding)">
            <summary>
            将给定的字典转换成URL字符串参数
            </summary>
            <param name="encoding">用于参与编码的编码类型，默认为utf8</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CmsHList.ToUrlParam">
            <summary>
            将给定的字典转换成URL字符串参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CmsHList.SetUrlParam(System.String,System.Boolean,System.Boolean,System.Boolean,System.Text.Encoding)">
            <summary>
            将给定的URL参数中的参数写入到字典中
            </summary>
            <param name="dic">目标字典</param>
            <param name="url">需要解析参数的URL</param>
            <param name="clear">true＝在设置之前清空字典</param>
            <param name="setToLower">true＝将名称转换为小写字母</param>
            <param name="doDecode">true＝进行解码</param>
            <param name="encoding">当doDecode＝true时，用于解码的编码类型，不写则默认为utf8</param>
        </member>
        <member name="M:NRails.Util.CmsHList.FromUrl(System.String,System.Boolean)">
            <summary>
            转换成URL参数字典
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.SerPersistence`1.Flush">
            <summary>
            将数据刷写到硬盘，在进行序列化的过程中会锁定对象
            </summary>
        </member>
        <member name="M:NRails.Util.SerPersistence`1.FlushDelay(System.Int32)">
            <summary>
            尝试在ticks毫秒后执行flush函数，如果此操作被挂起，则会取消最后一次操作。
            </summary>
            <param name="ticks"></param>
        </member>
        <member name="M:NRails.Util.SerPersistence`1.Delete">
            <summary>
            
            </summary>
        </member>
        <member name="T:NRails.Util.ConsoleHelper">
            <summary>
            控制台帮助类
            </summary>
        </member>
        <member name="M:NRails.Util.ConsoleHelper.Read``1(System.String)">
            <summary>
            在控制台上写入一行content并且转到输入状态
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ConsoleHelper.Write(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在控制台上写入信息，非阻塞，并且是线程安全的
            </summary>
            <param name="format"></param>
            <param name="cursofLeft"></param>
            <param name="cursorTop"></param>
            <param name="args"></param>
        </member>
        <member name="M:NRails.Util.ConsoleHelper.WriteLine(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在控制台上写入信息，非阻塞，并且是线程安全的
            </summary>
        </member>
        <member name="M:NRails.Util.ConsoleHelper.AllocConsole">
            <summary>
            为当前进程分配一个控制台窗口
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ConsoleHelper.FreeConsole">
            <summary>
            释放当前进程的控制台窗口
            </summary>
            <returns></returns>
        </member>
        <member name="F:NRails.Util.ConsoleHelper.ConsoleWriteData._isAlive">
            <summary>
            当调用Dispose()或者析构函数[~ConsoleWriteData()]时，该值会被设置为0
            </summary>
        </member>
        <member name="M:NRails.Util.ConsoleHelper.ConsoleWriteData.Dispose(System.Boolean)">
            <summary>
            释放所占用的资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:NRails.Util.ConsoleHelper.ConsoleWriteData.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:NRails.Util.ConsoleHelper.ConsoleWriteData.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Util.ConsoleHelper.ConsoleWriteData.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="M:NRails.Util.ILHelper.PropertiesAction(System.Reflection.PropertyInfo[])">
            <summary>
            创建一个设置指定属性的IL方法
            </summary>
            <param name="infos"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ILHelper.FieldAction(System.Reflection.FieldInfo[])">
            <summary>
            创建一个设置指定字段的IL方法
            </summary>
            <param name="infos"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ILHelper.PropertiesFunc(System.Reflection.PropertyInfo[])">
            <summary>
            创建一个读取指定属性的IL方法
            </summary>
            <param name="infos"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ILHelper.FieldFunc(System.Reflection.FieldInfo[])">
            <summary>
            创建一个读取指定字段的IL方法
            </summary>
            <param name="infos"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ILHelper.CreateInstanceFunc(System.Type)">
            <summary>
            生成一个创建指定对象的IL方法，注意，如果您需要连续创建的对象个数小于20000个的时候，不要使用这个方法
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ILHelperTest.Main">
            <summary>
            应用程序的主入口点。
            </summary>
        </member>
        <member name="F:NRails.Util.ILHelperTest.Request.RequestType">
            <summary>
            获取或设置请求类型
            </summary>
        </member>
        <member name="F:NRails.Util.ILHelperTest.Request.IsCompressedArg">
            <summary>
            表示所传输的参数是否为一个压缩字节数组
            </summary>
        </member>
        <member name="F:NRails.Util.ILHelperTest.Request.IsErrorMessage">
            <summary>
            获取或设置当前是否返回了错误信息
            </summary>
        </member>
        <member name="F:NRails.Util.ILHelperTest.Request.Argument">
            <summary>
            获取或设置请求附带的参数
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.UserName">
            <summary>
            可选参数，如果设置此字段将以SMTP客户端模式发送，此时需要配置SMTPServer字段，不设置此字段发送邮件时将以邮件服务器模式发送。
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.Password">
            <summary>
            邮件客户端验证密码
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.SMTPServer">
            <summary>
            邮件服务器
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.ReplyTo">
            <summary>
            应答地址（可选） 默认为DisplayAddress参数，如果收件人回复邮件，回复到的邮件地址
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.From">
            <summary>
            发件地址
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.Sender">
            <summary>
            代发件地址
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.FromName">
            <summary>
            发件人(可选)
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.To">
            <summary>
            目标收件人 To和Tos两个参数其一是必选的
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.Cc">
            <summary>
            抄送
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.Tos">
            <summary>
            其他收件人
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.ToName">
            <summary>
            接收人（可选）
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.Subject">
            <summary>
            邮件内容
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.Content">
            <summary>
            邮件正文
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.DkimPrivateKey">
            <summary>
            DKIM私钥（可选）如果不配置这个值，那么发出去的邮件不会携带DKIM签名，这会大大提高邮件被丢入垃圾箱的可能性
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.DkimSelector">
            <summary>
            DKIM公钥选择器（可选，只有在配置了DkimPrivateKey之后才是必须的，默认是 dkim），你需要在域名管理的运营商那里配置你的DKIM公钥
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.SigHeader">
            <summary>
            DKIM签名头，如果不填写则默认为{From,To,Subject}
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.EHLOMessage">
            <summary>
            （可选）Smtp连接到目标服务器时所发送的鉴权消息，默认为From参数的域名
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.Mailler">
            <summary>
            邮件发送器
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.Priority">
            <summary>
            优先级
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.MailFrom">
            <summary>
            指定MailFrom
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.IsTextPlain">
            <summary>
            true=邮件正文是文本，false=邮件正文是html
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.Attachments">
            <summary>
            附件（可选）
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.LinkedResource">
            <summary>
            内嵌资源（可选）
            </summary>
        </member>
        <member name="F:NRails.Util.SendMailParms.Headers">
            <summary>
            自定义头信息
            </summary>
        </member>
        <member name="M:NRails.Util.SendMailParms.Send(NRails.Util.SendMailParms,System.Boolean)">
            <summary>
            
            </summary>
            <param name="parm"></param>
        </member>
        <member name="F:NRails.Util.HttpResponseData.Cookies">
            <summary>
            Cookie数据
            </summary>
        </member>
        <member name="F:NRails.Util.HttpResponseData.ContentBytes">
            <summary>
            返回的数据
            </summary>
        </member>
        <member name="F:NRails.Util.HttpResponseData._ResponseUri">
            <summary>
            获取实际响应此请求的 Internet 资源的 URI
            </summary>
        </member>
        <member name="P:NRails.Util.HttpResponseData.ResponseUri">
            <summary>
            获取实际响应此请求的 Internet 资源的 URI
            </summary>
        </member>
        <member name="F:NRails.Util.HttpResponseData._isAlive">
            <summary>
            在调用Dispose()函数或者析构函数时，该值会被设置为0
            </summary>
        </member>
        <member name="M:NRails.Util.HttpResponseData.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Util.HttpResponseData.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="P:NRails.Util.HttpResponseData.OriginResponseBytes">
            <summary>
            原始应答数据
            </summary>
        </member>
        <member name="F:NRails.Util.HttpRequestParm.Timeout">
            <summary>
            设置请求超时时间,单位毫秒，默认值2分钟
            </summary>
        </member>
        <member name="F:NRails.Util.HttpRequestParm.Cookies">
            <summary>
            设置Cookie
            </summary>
        </member>
        <member name="F:NRails.Util.HttpRequestParm.Certificates">
            <summary>
            设置客户端证书集合
            </summary>
        </member>
        <member name="F:NRails.Util.HttpRequestParm.Encoding">
            <summary>
            设置提交表单或其他数据时的编码，默认为GBK编码
            </summary>
        </member>
        <member name="F:NRails.Util.HttpRequestParm.AutoRedirect">
            <summary>
            true=当服务器返回3xx的代码时，直接重定向，false＝不进行重定向
            </summary>
        </member>
        <member name="F:NRails.Util.HttpRequestParm.RemoteEndPoint">
            <summary>
            设置当前请求首先的远程连接地址，如果不设置此字段，则会默认从Uri中分析主机IP地址
            </summary>
        </member>
        <member name="F:NRails.Util.HttpRequestParm.bodyBytes">
            <summary>
            如果Http访问模式为Post，则这里指定了Post所需要发送的数据
            </summary>
        </member>
        <member name="P:NRails.Util.HttpRequestParm.Method">
            <summary>
            设置Http调用模式
            </summary>
        </member>
        <member name="M:NRails.Util.HttpRequestParm.ToString">
            <summary>
            返回完整的HttpRequest头信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.HttpRequestParm.GetHeaderString">
            <summary>
            返回完整的HttpRequest头信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.HttpRequestParm.SetHeader(System.String,System.String)">
            <summary>
            设置自定义Http头
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:NRails.Util.HttpRequestParm.GetHeader(System.String)">
            <summary>
            获取Http头数据
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:NRails.Util.HttpRequestParm.GetHeaders">
            <summary>
            获取在提交Http请求时会被提交到服务器的头信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.HttpRequestParm.RemoveHeader(System.String)">
            <summary>
            移除一个Http头
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:NRails.Util.HttpRequestParm.IsSsl">
            <summary>
            true=该请求是一个加密请求
            </summary>
        </member>
        <member name="P:NRails.Util.HttpRequestParm.UserAgent">
            <summary>
            设置UserAgent
            </summary>
        </member>
        <member name="P:NRails.Util.HttpRequestParm.Referer">
            <summary>
            设置Referer
            </summary>
        </member>
        <member name="P:NRails.Util.HttpRequestParm.Accept">
            <summary>
            设置Referer
            </summary>
        </member>
        <member name="P:NRails.Util.HttpRequestParm.ContentType">
            <summary>
            
            </summary>
        </member>
        <member name="P:NRails.Util.HttpRequestParm.Uri">
            <summary>
            设置Url
            </summary>
        </member>
        <member name="P:NRails.Util.HttpRequestParm.Url">
            <summary>
            设置Url
            </summary>
        </member>
        <member name="M:NRails.Util.HttpRequestParm.SetBodyBytes(System.Byte[])">
            <summary>
            设置需要提交到服务器的数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:NRails.Util.HttpRequestParm.SetPostData(System.Byte[])">
            <summary>
            设置需要提交到服务器的数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:NRails.Util.HttpPostParamBuild">
             <summary>
             HttpWebRequest 中按照HTTP协议填写 Post 参数
             </summary>
             <example>
             参数填写格式示例：
            Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryWwHOzfwuyemsLccy
            Accept-Encoding: gzip, deflate
            Accept-Language: zh-CN,zh;q=0.8,en;q=0.6
            
            ------WebKitFormBoundaryWwHOzfwuyemsLccy
            Content-Disposition: form-data; name="UserNumber"
            
            18559985599
            ------WebKitFormBoundaryWwHOzfwuyemsLccy
            Content-Disposition: form-data; name="MessageContent"
            
            0040
            ------WebKitFormBoundaryWwHOzfwuyemsLccy
            Content-Disposition: form-data; name="token"
            
            JzwiMFVVVl9RV1ZSUlw
            ------WebKitFormBoundaryWwHOzfwuyemsLccy--
            
             </example>
        </member>
        <member name="M:NRails.Util.HttpPostParamBuild.PostParamBuild(System.Net.HttpWebRequest,System.String,System.Object[])">
            <summary>
            HttpWebRequest 中按照HTTP协议填写 Post 参数
            </summary>
            <param name="request">HttpWebRequest 对象</param>
            <param name="randBoundary">边界字符串中的随机字符部分</param>
            <param name="Params">PostObjectParameter 类型的参数</param>
            <returns></returns>
        </member>
        <member name="T:NRails.Util.PostObjectParameter">
            <summary>
            Post 参数对象
            </summary>
        </member>
        <member name="P:NRails.Util.PostObjectParameter.ParameterName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:NRails.Util.PostObjectParameter.ParameterValue">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:NRails.Util.PostObjectParameter.ContentType">
            <summary>
            参数的 Content-Type
            </summary>
        </member>
        <member name="P:NRails.Util.PostObjectParameter.FileName">
            <summary>
            Content-Disposition: form-data; name="fileBuffer"; filename="460015825015912-3.jpg" 中的 filename 参数
            </summary>
        </member>
        <member name="M:NRails.Util.Cookies.Union(NRails.Util.Cookies)">
            <summary>
            和另外一个Cookie列表进行合并
            </summary>
            <param name="cookies"></param>
        </member>
        <member name="M:NRails.Util.Cookies.Parse(System.String)">
            <summary>
            将Cookie字符串转换为Cookie数组
            </summary>
            <param name="cookieStr"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.Cookies.FromCookieStr(System.String)">
            <summary>
            将Cookie字符串转换成Cookies对象
            </summary>
            <param name="cookieStr"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.Cookies.Difference(NRails.Util.Cookies,NRails.Util.Cookies)">
            <summary>
            找到C1中有C2中没有的元素
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="T:NRails.Util.AssemblyHelper">
            <summary>
            提供一些关于程序集操作的便捷方法
            </summary>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.GetDelegateMethoInfo(System.Type)">
            <summary>
            读取给定代理类型所代理的方法信息
            </summary>
            <param name="delegateType"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.CreateAssembly(System.String)">
            <summary>
            从指定Dll文件路径创建程序集
            </summary>
            <param name="dllName"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.FindAssemblyFile(System.String)">
            <summary>
            从程序集目录下搜索指定的文件
            </summary>
            <param name="fileName">需要搜索的文件名，如果是全路径则直接返回</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.AddAssemblyPath(System.String)">
            <summary>
            为当前程序域添加程序集搜索路径
            </summary>
            <param name="targetPath"></param>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.CreateInstance``1(System.Reflection.Assembly,System.Object[],System.String)">
            <summary>
            从程序集创建指定类型的实例
            </summary>
            <typeparam name="T">需要创建的类型</typeparam>
            <param name="assembly">程序集</param>
            <param name="args">类型参数，传入null表示无参数</param>
            <param name="typeName">类型全名，如果传入null或者string.Empty视为所有类型</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.CreateInstance``1(System.Reflection.Assembly,System.Object[])">
            <summary>
            尝试从指定的程序集文件中创建实例，如果失败返回null
            </summary>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.CreateInstance``1(System.Reflection.Assembly)">
            <summary>
            尝试从指定的程序集文件中创建实例，如果失败返回null
            </summary>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.CreateInstance(System.String[],System.Object[])">
            <summary>
            尝试从指定的程序集文件中创建实例，如果失败返回null
            </summary>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.CreateInstance(System.String,System.String,System.Object[])">
            <summary>
            尝试从指定的程序集文件中创建实例，如果失败返回null
            </summary>
            <param name="assemblyFile">程序集文件，支持相对路径</param>
            <param name="typeName">类型名，不要求全名，但如果不是全名，则创建第一个最相近类型名称的对象</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.CreateInstance``1(System.String)">
            <summary>
            尝试从指定的程序集文件中创建实例，如果失败返回null
            </summary>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.CloneValue(System.Object,System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object},System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Boolean)">
            <summary>
            将给定的对象转换为其相似类型
            </summary>
            <param name="src"></param>
            <param name="dstType"></param>
            <param name="srcReferences"></param>
            <param name="dstReferences"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.CloneValue(System.Object,System.Type,System.Collections.Generic.Dictionary{System.Object,System.Object},System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Boolean)">
            <summary>
            将给定的对象转换为其相似类型
            </summary>
            <param name="src"></param>
            <param name="dstType"></param>
            <param name="srcReferences"></param>
            <param name="dstReferences"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.CloneValue(System.Object)">
            <summary>
            通过反射的模式创建一个对象的副本（不会对标记为[NoneSerialize]的字段或属性赋值）
            </summary>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.CloneValue``1(``0)">
            <summary>
            通过反射的模式创建一个对象的副本（不会对标记为[NoneSerialize]的字段或属性赋值）
            </summary>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.LoadReferences(System.Reflection.Assembly[])">
            <summary>
            加载引用的程序集
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.DynamicHasType(System.String,System.Type)">
            <summary>
            通过动态加载的方式去判断一个程序集文件中是否包含给定类型或者其拓展继承的类型
            </summary>
            <param name="fileName">程序集文件</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.DynamicHasType(System.String,System.String)">
            <summary>
            通过动态加载的方式去判断一个程序集文件中是否包含给定类型或者其拓展继承的类型
            </summary>
            <param name="fileName">程序集文件</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.GetEntryFileName">
            <summary>
            获取当前正在运行的程序集入口点
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.EnumDir(System.String@,NRails.Util.EnumDirectoryArg)">
            <summary>
            在搜索程序集路径的时候所使用的方法
            </summary>
            <param name="enumValue"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:NRails.Util.AssemblyHelper.EnumDirectoryMethodHandler">
            <summary>
            遍历文件夹所要执行的方法委托
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.EnumDirectory(System.String@,NRails.Util.AssemblyHelper.EnumDirectoryMethodHandler,System.String,NRails.Util.EnumDirectoryArg)">
            <summary>
            遍历指定文件夹的所有目录
            </summary>
            <param name="dir">给定的文件夹</param>
            <param name="method">搜索时所要执行的方法</param>
            <param name="filter">文件名过滤器</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.FindTypes(System.Reflection.Assembly,System.Type,System.Boolean,System.Boolean)">
            <summary>
            获取可以从指定类型派生的所有类型
            </summary>
            <param name="assembly">需要获取类型的程序集</param>
            <param name="type">基类型</param>
            <param name="canInitialize">true=必须可以是被实例化的类型</param>
            <param name="emptyConstructor">true=必须包含空构造函数</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.HasType(System.Reflection.Assembly,System.Type,System.Boolean,System.Boolean)">
            <summary>
            获取可以从指定类型派生的所有类型
            </summary>
            <param name="assembly">需要获取类型的程序集</param>
            <param name="type">基类型</param>
            <param name="canInitialize">true=必须可以是被实例化的类型</param>
            <param name="emptyConstructor">true=必须包含空构造函数</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.HasEmptyParamConstructor(System.Type)">
            <summary>
            判断一个类型是否包含空构造函数
            </summary>
            <param name="constructorInfo"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.GetType``1">
            <summary>
            获取目标类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.Load(System.String)">
            <summary>
            从文件加载程序集，如果失败则返回null
            </summary>
            <param name="assemblyFile">需要加载的程序集文件</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.LoadAllAssemblies">
            <summary>
            加载所有程序集
            </summary>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.FindType(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>
            找到给定程序集中最匹配的的类型
            </summary>
            <param name="idBuilder"></param>
            <param name="exact">true=精确查找，如果不进行精确查找，那么可能找到的会是一个错误的类型</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.FindType(System.String)">
            <summary>
            找到给定程序集中最匹配的的类型
            </summary>
            <param name="idBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.GetMembers(System.Type,System.Reflection.MemberTypes,System.Boolean,System.Type[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="types"></param>
            <param name="readAndWrite">该值只有在MemberTypes包含属性时才有效</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.ToTs(System.Type)">
            <summary>
            将给定的类型转化成字符串描述信息，例如 System.Int32 会被转化成 int
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.GetPropertys(System.Type,System.Type)">
            <summary>
            读取目标类型中包含指定标识的属性
            </summary>
            <param name="target">目标类型</param>
            <param name="attribyte">标识</param>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.GetProperties(System.Type,NRails.Util.PropertyAccessMode,System.Boolean)">
            <summary>
            读取给定类型的所有属性
            </summary>
            <param name="target"></param>
            <param name="indecialProp">true=包括索引器</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.AssemblyHelper.SizeOf(System.Type)">
            <summary>
            返回给定的数据类型大小，因为荧光不支持计算类型大小，这里做的只是已知类型的映射
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="F:NRails.Util.EnumDirectoryArg.Success">
            <summary>
            当枚举方法返回true时该值会被设置为true
            </summary>
        </member>
        <member name="F:NRails.Util.EnumDirectoryArg.TargetPath">
            <summary>
            当枚举方法返回true时该值会被设置为枚举方法的参数
            </summary>
        </member>
        <member name="F:NRails.Util.EnumDirectoryArg.Tag">
            <summary>
            参数存储位
            </summary>
        </member>
        <member name="M:NRails.Util.EnumDirectoryArg.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Util.EnumDirectoryArg.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="M:NRails.Util.CollectionHelper.GetTicks(System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            返回给定时间数组的tick
            </summary>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.Clone(System.Byte[],System.Int32,System.Int32)">
            <summary>
            复制一份字节数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.Clone``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            创建一个新的字段实例，并且把原有字典的元素复制到新实例，注意：元素对象不会重建
            </summary>
            <typeparam name="TK"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.Clone``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            复制数据,但对引用类型的元素不进行复制
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.Clone``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            复制数据,但对引用类型的元素不进行复制
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.Clone``1(``0[],System.Int32,System.Int32)">
            <summary>
            获取buffer 从偏移offset开始的 count 个元素
            </summary>
            <typeparam name="T">数组元素类型</typeparam>
            <param name="buffer">数组</param>
            <param name="offset">偏移</param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.Clone``2(System.Collections.Generic.IEnumerable{``0},System.Action{NRails.Util.ChangeTypeParm{``0,``1}},System.Int32,System.Int32)">
            <summary>
            从offset处开始将count个元素<typeparamref name="TSource"/>克隆为<typeparamref name="TResult"/>，并允许在克隆过程修改结果
            </summary>
        </member>
        <member name="M:NRails.Util.CollectionHelper.Clone``2(System.Collections.Generic.IEnumerable{``0},System.Action{NRails.Util.ChangeTypeParm{``0,``1}},System.Int32)">
            <summary>
            从offset处开始将<typeparamref name="TSource"/>克隆为<typeparamref name="TResult"/>，并允许在克隆过程修改结果
            </summary>
        </member>
        <member name="M:NRails.Util.CollectionHelper.Clone``2(System.Collections.Generic.IEnumerable{``0},System.Action{NRails.Util.ChangeTypeParm{``0,``1}})">
            <summary>
            将<typeparamref name="TSource"/>克隆为<typeparamref name="TResult"/>，并允许在克隆过程修改结果
            </summary>
        </member>
        <member name="M:NRails.Util.CollectionHelper.Clone``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将<typeparamref name="TSource"/>克隆为<typeparamref name="TResult"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.Clone``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            从offset处开始将count个元素<typeparamref name="TSource"/>克隆为<typeparamref name="TResult"/>
            </summary>
        </member>
        <member name="M:NRails.Util.CollectionHelper.Clone``2(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            从offset处开始将<typeparamref name="TSource"/>克隆为<typeparamref name="TResult"/>
            </summary>
        </member>
        <member name="M:NRails.Util.CollectionHelper.Split``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            将一个List按指定个数分为若干份
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            将一个collection按指定个数分为若干份
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.Dequeue``1(System.Collections.Generic.Queue{``0},System.Int32)">
            <summary>
            尝试从队列中取出最多count个元素直，如果队列为空则返回元素个数为0的数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queue"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.LockToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.ToList``1(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.LockToList``1(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.ToArray``1(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.ToArray``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            ToArray
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.ToArray``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            ToArray
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.ToArray``1(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            ToArray
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.ToArray``1(System.Collections.IList,System.Boolean)">
            <summary>
            ToArray
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.LockToArray``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            锁定列表，并且返回其所有元素的数组对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.LockToArray``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            锁定列表，并且返回其所有元素的数组对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.LockToArray``1(System.Collections.IList,System.Boolean)">
            <summary>
            锁定列表，并且返回其所有元素的数组对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.LockToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            锁定列表，并且返回其所有元素的数组对象
            </summary>
        </member>
        <member name="M:NRails.Util.CollectionHelper.ToKeyArray``2(System.Collections.Generic.Dictionary{``0,``1},System.Int32,System.Int32)">
            <summary>
            锁定列表，并且返回其所有元素的数组对象
            </summary>
        </member>
        <member name="M:NRails.Util.CollectionHelper.ToValueArray``2(System.Collections.Generic.Dictionary{``0,``1},System.Int32,System.Int32)">
            <summary>
            锁定列表，并且返回其所有元素的数组对象
            </summary>
        </member>
        <member name="M:NRails.Util.CollectionHelper.LockToKeyArray``2(System.Collections.Generic.Dictionary{``0,``1},System.Int32,System.Int32)">
            <summary>
            锁定列表，并且返回其所有元素的数组对象
            </summary>
        </member>
        <member name="M:NRails.Util.CollectionHelper.LockToValueArray``2(System.Collections.Generic.Dictionary{``0,``1},System.Int32,System.Int32)">
            <summary>
            锁定列表，并且返回其所有元素的数组对象
            </summary>
        </member>
        <member name="M:NRails.Util.CollectionHelper.ToArray``1(System.Array,System.Int32,System.Int32)">
            <summary>
            转化为数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.LockToArray``1(System.Array,System.Int32,System.Int32)">
            <summary>
            锁定列表，并且返回其所有元素的数组对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Boolean)">
            <summary>
            以线程安全的模式（即：lock(dic)）尝试从一个字典中获取一个元素
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="create">true=如果字典中不存在指定元素则创建</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.GetValueAt``2(System.Collections.Generic.Dictionary{``0,``1},System.Int32)">
            <summary>
            获取给定字典第一个元素的值
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dic"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.GetKeyAt``2(System.Collections.Generic.Dictionary{``0,``1},System.Int32)">
            <summary>
            获取给定字典第一个元素的键
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dic"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.SetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            以线程安全的模式（即：lock(dic)）尝试从一个字典中移除一个元素，并且返回对象值
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="create"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.RemoveValue``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            以线程安全的模式（即：lock(dic)）尝试从一个字典中移除一个元素，并且返回对象值
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="create"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.GetElement``1(System.Collections.Generic.IList{``0},System.Int32@)">
            <summary>
            尝试获取一个在给定列表个数范围内的索引，并对索引号做增长处理
            </summary>
            <param name="list"></param>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CollectionHelper.GetElement``1(System.Collections.Generic.IList{``0})">
            <summary>
            尝试获取一个随机元素
            </summary>
            <param name="list"></param>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="F:NRails.Util.ChangeTypeParm`2.Source">
            <summary>
            转换前的对象
            </summary>
        </member>
        <member name="F:NRails.Util.ChangeTypeParm`2.Result">
            <summary>
            转换后的对象
            </summary>
        </member>
        <member name="F:NRails.Util.ChangeTypeParm`2.Ignore">
            <summary>
            true=忽略这个元素
            </summary>
        </member>
        <member name="M:NRails.Util.ChangeTypeParm`2.Clone">
            <summary>
            重新执行一次克隆操作
            </summary>
        </member>
        <member name="F:NRails.Util.ToDictionaryRepeatOpt.Ignore">
            <summary>
            忽略
            </summary>
        </member>
        <member name="F:NRails.Util.ToDictionaryRepeatOpt.Replace">
            <summary>
            替换
            </summary>
        </member>
        <member name="F:NRails.Util.ToDictionaryRepeatOpt.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:NRails.Util.CompressHelper.BufferSize">
            <summary>
            缓冲区大小
            </summary>
        </member>
        <member name="M:NRails.Util.CompressHelper.Compress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            使用GZip模式压缩数据
            </summary>
            <param name="buffer">需要压缩的数据</param>
            <param name="offset">需要压缩数据的起始位置</param>
            <param name="len">需要压缩的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CompressHelper.Compress(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})">
            <summary>
            使用GZip模式压缩数据
            </summary>
            <param name="buffer">需要压缩的数据</param>
            <param name="offset">需要压缩数据的起始位置</param>
            <param name="len">需要压缩的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CompressHelper.DeCompress(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            解压缩给定的GZip数据
            </summary>
            <param name="bytesArray"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CompressHelper.DeCompress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            解压缩给定的GZip数据
            </summary>
            <param name="buffer">需要解压缩的数据</param>
            <param name="offset">需要解压缩的数据偏移位置</param>
            <param name="len">需要解压缩的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.CompressHelper.Compress(System.IO.Stream,System.IO.Stream)">
            <summary>
            使用GZip模式压缩数据
            </summary>
        </member>
        <member name="M:NRails.Util.CompressHelper.DeCompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            解压缩给定的GZip数据
            </summary>
        </member>
        <member name="M:NRails.Util.ControlHelper.GetValue(System.Windows.Forms.Control)">
            <summary>
            获取给定控件的值表现形式
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ControlHelper.SetValue(System.Windows.Forms.Control,System.Object)">
            <summary>
            为给定的控件设置用于展示的值
            </summary>
            <param name="control"></param>
            <param name="value"></param>
        </member>
        <member name="M:NRails.Util.ControlHelper.ShowTootip(System.Windows.Forms.Control,System.String)">
            <summary>
            在给定控件的中间显示一个提示标签
            </summary>
            <param name="control"></param>
            <param name="message"></param>
        </member>
        <member name="M:NRails.Util.ControlHelper.ShowTootip(System.Windows.Forms.Control,System.String,System.Int32)">
            <summary>
            在给定控件的中间显示一个提示标签
            </summary>
            <param name="control"></param>
            <param name="message"></param>
        </member>
        <member name="M:NRails.Util.ControlHelper.ShowTootip(System.Windows.Forms.Control,System.String,System.Boolean)">
            <summary>
            在给定控件的中间显示一个提示标签
            </summary>
            <param name="control"></param>
            <param name="message"></param>
        </member>
        <member name="M:NRails.Util.ControlHelper.HideTooptip(System.Windows.Forms.Control)">
            <summary>
            隐藏显示的标签（在同一个窗体中的控件都可以有效隐藏任意一个控件显示的标签）
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:NRails.Util.ControlHelper.GetSearchableComboValue``1(System.Windows.Forms.ComboBox)">
            <summary>
            获取已经调用RegistSearchableCombo方法注册的可查询下拉框的真实值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ControlHelper.GetSearchableComboValue(System.Windows.Forms.ComboBox)">
            <summary>
            获取已经调用RegistSearchableCombo方法注册的可查询下拉框的真实值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ControlHelper.RegistDescriptionText(System.Windows.Forms.TextBox,System.String)">
            <summary>
            给文本框加上一个注释说明字符串,该字符串在有输入焦点的情况下不输入,在失去焦点的情况下如果内容为空则显示该注释
            </summary>
            <param name="textbox"></param>
            <param name="description"></param>
        </member>
        <member name="M:NRails.Util.ControlHelper.RegistRememberText(System.Windows.Forms.Control)">
            <summary>
            给控件注册一个自动记住文本数据的功能
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:NRails.Util.ControlHelper.HasRegistedRememberText(System.Windows.Forms.Control)">
            <summary>
            返回给定的控件是否已经被注册了状态记忆功能
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ControlHelper.RegistRememberText(System.Windows.Forms.Control[])">
            <summary>
            给控件注册一个自动记住文本数据的功能
            </summary>
        </member>
        <member name="M:NRails.Util.ControlHelper.BeginInvoke(System.Windows.Forms.Control,NRails.VoidMethodInvoker)">
            <summary>
            在给定控件的UI线程上执行function
            </summary>
            <param name="control"></param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ControlHelper.EndInvoke(System.Windows.Forms.Control,NRails.VoidMethodInvoker,System.IAsyncResult)">
            <summary>
            在给定控件的UI线程上执行function
            </summary>
            <param name="control"></param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ControlHelper.Invoke(System.Windows.Forms.Control,NRails.VoidMethodInvoker)">
            <summary>
            在给定控件的UI线程上执行function
            </summary>
            <param name="control"></param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ControlHelper.InvokeFunc(System.Windows.Forms.Control,System.Func{System.Object})">
            <summary>
            在给定控件的UI线程上执行function
            </summary>
            <param name="control"></param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ControlHelper.InvokeAction(System.Windows.Forms.Control,NRails.VoidMethodInvoker)">
            <summary>
            执行一段逻辑，并且将执行这段逻辑的控件Enabled属性设置为false，执行完成后设置为true
            </summary>
            <param name="control"></param>
            <param name="action"></param>
        </member>
        <member name="M:NRails.Util.ControlHelper.InvokeAction(System.Windows.Forms.Control,NRails.VoidMethodInvoker,NRails.VoidMethodInvoker,NRails.VoidMethodInvoker)">
            <summary>
            执行一段逻辑，并且将执行这段逻辑的前后分别执行逻辑
            </summary>
            <param name="control"></param>
            <param name="action"></param>
        </member>
        <member name="M:NRails.Util.ControlHelper.GetOwnerForm(System.Windows.Forms.Control)">
            <summary>
            获取给定控件所属的窗体对象该方法是 GetParentForm 的别名
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ControlHelper.GetParentForm(System.Windows.Forms.Control)">
            <summary>
            获取给定控件所属的窗体对象该方法是 GetOwnerForm 的别名
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ControlHelper.RegistHotKey(System.IntPtr,NRails.Util.HotKeyModifiers,System.Windows.Forms.Keys,NRails.VoidMethodInvoker)">
            <summary>
            注册一个热键，如果成功则返回热键id，否则返回0
            </summary>
            <param name="hWnd"></param>
            <param name="modifiers"></param>
            <param name="vk"></param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ControlHelper.UnregisterHotKeyReal(System.IntPtr,System.Int32)">
            <summary>
            卸载之前注册的热键
            </summary>
            <param name="hWnd"></param>
            <param name="id">调用RegistHotKey返回的id</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ConvertMapping.ConvertToObject(System.Type,System.String)">
            <summary>
            转换给定的值
            </summary>
            <param name="type">值的类型</param>
            <param name="value">给定的值，如果为null则返回默认设定项</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ConvertMapping.SetMappingToObject(System.Type,System.Delegate,System.Boolean)">
            <summary>
            为给定类型对象提供字符串到对象的转换方法
            </summary>
            <param name="type"></param>
            <param name="method">ConvertMethodHandler委托，这是一个输入string值，返回object对象的方法</param>
            <param name="overWrite"></param>
        </member>
        <member name="M:NRails.Util.ConvertMapping.SetMappingToObject(System.Type,System.Delegate)">
            <summary>
            为给定类型对象提供字符串到对象的转换方法
            </summary>
            <param name="type"></param>
            <param name="method">ConvertMethodHandler委托，这是一个输入string值，返回object对象的方法</param>
        </member>
        <member name="T:NRails.Util.CM">
            <summary>
            ConvertMapping的别名
            </summary>
        </member>
        <member name="M:NRails.Util.XmlHelper.GetAttribValue(System.Xml.XmlNode,System.String)">
            <summary>
            读取指定名称的属性值,如果没有该属性则返回Null
            </summary>
            <param name="attName"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.XmlHelper.CreateChild(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            在指定XML节点上新增一个节点
            </summary>
            <param name="name"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.XmlHelper.CreateRoot(System.Xml.XmlDocument,System.String)">
            <summary>
            创建XML根节点，如果已存在同名根节点直接返回，否则会抛出异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.XmlHelper.CreateAttribute(System.Xml.XmlNode,System.String,System.Object,System.String)">
            <summary>
            在指定的XML节点上新增一个属性
            </summary>
            <returns></returns>
        </member>
        <member name="T:NRails.Util.CRC8_POLY">
            
             This enum is used to indicate what kind of checksum you will be calculating.
             
        </member>
        <member name="P:NRails.Util.FolderBroswer.FolderBrowserStyles">
            <summary>
            获取或设置浏览模式，默认为FolderBrowserStyles.RestrictToFilesystem
            </summary>
        </member>
        <member name="P:NRails.Util.FolderBroswer.BrowseInfos">
            <summary>
            获取或设置选择框模式 BrowseInfos.EditBox | BrowseInfos.NewDialogStyle
            </summary>
        </member>
        <member name="P:NRails.Util.FolderBroswer.SelectedPath">
            <summary>
            获取或设置选中的文件夹
            </summary>
        </member>
        <member name="P:NRails.Util.FolderBroswer.Description">
            <summary>
            获取或设置标题
            </summary>
        </member>
        <member name="T:NRails.Util.FolderBroswer._FolderBrowserStyles">
            <summary>
            浏览文件夹类型
            </summary>
        </member>
        <member name="T:NRails.Util.GdiHelper">
            <summary>
            提供一些基本的绘图功能支持
            </summary>
        </member>
        <member name="M:NRails.Util.GdiHelper.GetPixel(System.Drawing.Bitmap,System.Double,System.Double,System.Double)">
            <summary>
            从一张图例图片中读取色阶颜色
            </summary>
            <param name="legendImage">图例图片</param>
            <param name="gradeMax">最大Grade值(通常情况下，图例都是表示某种数值的渐变过程，Grade和Color是一一对应的)</param>
            <param name="gradeMin">最小Grade值(通常情况下，图例都是表示某种数值的渐变过程，Grade和Color是一一对应的)</param>
            <param name="value">当前Grade值(通常情况下，图例都是表示某种数值的渐变过程，Grade和Color是一一对应的)</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.GetPixel(System.Drawing.Imaging.BitmapData,System.Double,System.Double,System.Double)">
            <summary>
            从一张图例图片中读取色阶颜色
            </summary>
            <param name="legendImage">图例图片</param>
            <param name="gradeMax">最大Grade值(通常情况下，图例都是表示某种数值的渐变过程，Grade和Color是一一对应的)</param>
            <param name="gradeMin">最小Grade值(通常情况下，图例都是表示某种数值的渐变过程，Grade和Color是一一对应的)</param>
            <param name="value">当前Grade值(通常情况下，图例都是表示某种数值的渐变过程，Grade和Color是一一对应的)</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.GetPixels(System.Drawing.Bitmap)">
            <summary>
            获取指定图片的所有像素点
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.DrawLegendImage(System.Drawing.Size,System.Double[],System.Drawing.Color[],NRails.Util.LegendDirection,System.String)">
            <summary>
            绘制一张图例图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.DrawContourString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Single,System.Int32,System.Drawing.Brush,System.Drawing.Brush)">
            <summary>
            绘制一个轮廓文本
            </summary>
            <param name="g">画板</param>
            <param name="content">需要绘制的文本</param>
            <param name="fnt"></param>
            <param name="x">绘制的位置X</param>
            <param name="y">绘制的位置Y</param>
            <param name="fontBrush">文本画刷</param>
            <param name="contourBrush">轮廓画刷</param>
        </member>
        <member name="M:NRails.Util.GdiHelper.DrawLegendImage(System.Drawing.Size,System.Double[],System.Drawing.Color[],NRails.Util.LegendDirection)">
            <summary>
            绘制一个图例图片
            </summary>
            <param name="size">图例大小(注意不等于图片大小)</param>
            <param name="grades">图例等级</param>
            <param name="colors">等级所对应的颜色</param>
            <param name="direction">图例方向</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.DrawRect(System.IntPtr,System.Drawing.Rectangle,System.Int32,System.Drawing.Color)">
            <summary>
            在给定的窗口上绘制一个矩形
            </summary>
            <param name="wnd"></param>
            <param name="rect"></param>
            <param name="borderWidth"></param>
            <param name="color"></param>
        </member>
        <member name="M:NRails.Util.GdiHelper.PrintScreen">
            <summary>
            截取屏幕
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.PrintScreen(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            截取屏幕
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.DrawArrow(System.Drawing.Pen,System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Double)">
            <summary>
            在给定的图片上画箭头
            </summary>
            <param name="g">需要画箭头的图片</param>
            <param name="x">箭头中心的X坐标</param>
            <param name="y">箭头中心的Y坐标</param>
            <param name="length">箭头长度</param>
            <param name="width">箭头宽度</param>
            <param name="angle">角度值</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.RandomJPG(System.Byte[])">
            <summary>
            在不改变JPG图片的质量和图像的情况下在JPG图片中插入一段随机数据，以达到修改哈希值的目的
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.BoxFillImage(System.Drawing.Bitmap,System.Drawing.Color,System.Drawing.Size)">
            <summary>
            将一张图片扩充大小
            </summary>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.GetConverseColor(System.Drawing.Color,System.Boolean)">
            <summary>
            获取给定颜色的反色
            </summary>
            <param name="alph">true=对alph通道取反</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.GetConverseBitmap(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            将给定的图片变换为其反色图片
            </summary>
            <param name="source">需要转换的图片</param>
            <param name="alph">标识是否转换透明色值,true=转换</param>
        </member>
        <member name="M:NRails.Util.GdiHelper.GetPixel(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            在指定图片上读取指定像素的颜色
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.GetPixel(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            在指定图片上读取指定像素的颜色(性能劣势，请使用GetPixel(BitmapData data, int x, int y)代替)
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.SetPixel(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            在指定图片内存数据中打上颜色点
            </summary>
            <param name="data"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="color"></param>
        </member>
        <member name="M:NRails.Util.GdiHelper.SetPixel(System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            在指定图片内存数据中打上颜色点(性能劣势，请使用SetPixel(BitmapData data, int x, int y, Color color)代替)
            </summary>
        </member>
        <member name="M:NRails.Util.GdiHelper.SetPixel(System.Drawing.Imaging.BitmapData,System.Int32,System.Drawing.Color)">
            <summary>
            在指定图片内存数据中打上颜色点
            <param name="index">行列式索引</param>
            </summary>
        </member>
        <member name="M:NRails.Util.GdiHelper.SetPixel(System.Drawing.Bitmap,System.Int32,System.Drawing.Color)">
            <summary>
            在指定图片内存数据中打上颜色点(性能劣势，请使用SetPixel(BitmapData bmpData, int index, Color color)代替)
            <param name="index">行列式索引</param>
            </summary>
        </member>
        <member name="M:NRails.Util.GdiHelper.GetThumbnailImage(System.Drawing.Bitmap,System.Int32,System.Int32,System.Boolean[])">
            <summary>
            生成缩略图
            </summary>
            <param name="src">原图</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="disposeOld">true=生成缩略图之后释放原图</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.SaveAsJPG(System.Drawing.Image,System.Int32)">
            <summary>
            保存为JPG
            </summary>
            <param name="quality">图像质量, 最底为0, 最高为100</param>
        </member>
        <member name="M:NRails.Util.GdiHelper.SaveAsJPG(System.Drawing.Image,System.Int32,System.String)">
            <summary>
            保存为JPG
            </summary>
            <param name="quality">图像质量, 最底为0, 最高为100</param>
        </member>
        <member name="M:NRails.Util.GdiHelper.PrintWarterMark(System.Drawing.Image,System.String,System.Drawing.Font,System.Int32,System.Drawing.Brush)">
            <summary>
            打水印
            </summary>
            <param name="g">需要打水印的画板</param>
            <param name="content">水印正文</param>
            <param name="font">水印字体</param>
            <param name="angle">水印倾斜度(角度制表示)</param>
            <param name="brush">水印画刷</param>
        </member>
        <member name="M:NRails.Util.GdiHelper.PrintWarterMark(System.Drawing.Image,System.String,System.Drawing.Font,System.Int32,System.Drawing.Color)">
            <summary>
            打水印
            </summary>
            <param name="g">需要打水印的画板</param>
            <param name="content">水印正文</param>
            <param name="font">水印字体</param>
            <param name="angle">水印倾斜度(角度制表示)</param>
            <param name="color">水印颜色</param>
        </member>
        <member name="M:NRails.Util.GdiHelper.PrintWarterMark(System.Drawing.Image,System.String,System.Drawing.Font,System.Int32)">
            <summary>
            打水印
            </summary>
            <param name="g">需要打水印的画板</param>
            <param name="content">水印正文</param>
            <param name="font">水印字体</param>
            <param name="angle">水印倾斜度(角度制表示)</param>
        </member>
        <member name="M:NRails.Util.GdiHelper.GetPartOfImage(System.Drawing.Bitmap,System.Drawing.Rectangle)">
             <summary>
            截取给定图片的一小部分
             </summary>
             <param name="srcBmp"></param>
             <param name="srcRect"></param>
             <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.LockBits(System.Drawing.Bitmap)">
            <summary>
            以ImageLockMode.ReadWrite 和PixelFormat.Format32bppArgb方式 锁定图片大小范围的内存块
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.RoamPixel(System.Int32@,System.Int32@,System.Int32,NRails.Util.TrackingHandler)">
            <summary>
            漫游所有网格点
            </summary>
            <param name="row">起始漫游行</param>
            <param name="column">起始漫游列</param>
            <param name="columnCount">总列数</param>
            <param name="tracking">判断是否该点可漫游的方法</param>
        </member>
        <member name="M:NRails.Util.GdiHelper.SetTrans(System.Drawing.Bitmap,System.Byte)">
            <summary>
            为图片设置透明度
            </summary>
            <param name="bmp1"></param>
            <param name="trans"></param>
        </member>
        <member name="M:NRails.Util.GdiHelper.SetTrans(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">
            <summary>
            为图片中的transColor设置透明度
            </summary>
            <param name="bmp1"></param>
            <param name="transColor"></param>
            <param name="trans"></param>
        </member>
        <member name="T:NRails.Util.GdiHelper.ValiCodePic">
            <summary>
            验证码图片生成器
            </summary>
        </member>
        <member name="F:NRails.Util.GdiHelper.ValiCodePic.objRandom">
            <summary>
            随机种子
            </summary>
        </member>
        <member name="F:NRails.Util.GdiHelper.ValiCodePic.length">
            <summary>
            验证码长度
            </summary>
        </member>
        <member name="P:NRails.Util.GdiHelper.ValiCodePic.Length">
            <summary>
            验证码长度(默认为4)
            </summary>
        </member>
        <member name="F:NRails.Util.GdiHelper.ValiCodePic.verifyCodeText">
            <summary>
            验证码字符串
            </summary>
        </member>
        <member name="P:NRails.Util.GdiHelper.ValiCodePic.VerifyCodeText">
            <summary>
            验证码字符串
            </summary>
        </member>
        <member name="F:NRails.Util.GdiHelper.ValiCodePic.addLowerLetter">
            <summary>
            是否加入小写字母
            </summary>
        </member>
        <member name="P:NRails.Util.GdiHelper.ValiCodePic.AddLowerLetter">
            <summary>
            是否加入小写字母(不包括o)
            </summary>
        </member>
        <member name="F:NRails.Util.GdiHelper.ValiCodePic.addUpperLetter">
            <summary>
            是否加入大写字母
            </summary>
        </member>
        <member name="P:NRails.Util.GdiHelper.ValiCodePic.AddUpperLetter">
            <summary>
            是否加入大写字母(不包括O)
            </summary>
        </member>
        <member name="F:NRails.Util.GdiHelper.ValiCodePic.fontSize">
            <summary>
            字体大小
            </summary>
        </member>
        <member name="P:NRails.Util.GdiHelper.ValiCodePic.FontSize">
            <summary>
            字体大小(默认为18)
            </summary>
        </member>
        <member name="F:NRails.Util.GdiHelper.ValiCodePic.fontColor">
            <summary>
            字体颜色
            </summary>
        </member>
        <member name="P:NRails.Util.GdiHelper.ValiCodePic.FontColor">
            <summary>
            字体颜色(默认为Blue)
            </summary>
        </member>
        <member name="F:NRails.Util.GdiHelper.ValiCodePic.fontFamily">
            <summary>
            字体类型
            </summary>
        </member>
        <member name="P:NRails.Util.GdiHelper.ValiCodePic.FontFamily">
            <summary>
            字体类型(默认为Verdana)
            </summary>
        </member>
        <member name="F:NRails.Util.GdiHelper.ValiCodePic.backgroundColor">
            <summary>
            背景色
            </summary>
        </member>
        <member name="P:NRails.Util.GdiHelper.ValiCodePic.BackgroundColor">
            <summary>
            背景色(默认为AliceBlue)
            </summary>
        </member>
        <member name="F:NRails.Util.GdiHelper.ValiCodePic.foreNoisePointCount">
            <summary>
            前景噪点数量
            </summary>
        </member>
        <member name="P:NRails.Util.GdiHelper.ValiCodePic.ForeNoisePointCount">
            <summary>
            前景噪点数量(默认为2)
            </summary>
        </member>
        <member name="F:NRails.Util.GdiHelper.ValiCodePic.randomAngle">
            <summary>
            随机码的旋转角度
            </summary>
        </member>
        <member name="P:NRails.Util.GdiHelper.ValiCodePic.RandomAngle">
            <summary>
            随机码的旋转角度(默认为40度)
            </summary>
        </member>
        <member name="M:NRails.Util.GdiHelper.ValiCodePic.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:NRails.Util.GdiHelper.ValiCodePic.GetText">
            <summary>
            得到验证码字符串
            </summary>
        </member>
        <member name="M:NRails.Util.GdiHelper.ValiCodePic.GetImage">
            <summary>
            得到验证码图片
            </summary>
        </member>
        <member name="M:NRails.Util.GdiHelper.ValiCodePic.AddForeNoisePoint(System.Drawing.Bitmap)">
            <summary>
            添加前景噪点
            </summary>
            <param name="objBitmap"></param>
        </member>
        <member name="M:NRails.Util.GdiHelper.ValiCodePic.AddBackgroundNoisePoint(System.Drawing.Bitmap,System.Drawing.Graphics)">
            <summary>
            添加背景噪点
            </summary>
            <param name="objBitmap"></param>
            <param name="objGraphics"></param>
        </member>
        <member name="M:NRails.Util.GdiHelper.RGBToHSB(System.Int32,System.Int32,System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary> 
            HSB用float数据类型表示 
            </summary> 
        </member>
        <member name="M:NRails.Util.GdiHelper.RGBToHSB(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary> 
            HSB用int数据类型表示，同Winform中的ColorDialog中HSB的表示 
            </summary> 
        </member>
        <member name="M:NRails.Util.GdiHelper.HSBToRGB(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary> 
            传入的HSB用int型表示，如果用float型表示，可将下面的转换成float过程去掉 
            </summary> 
        </member>
        <member name="M:NRails.Util.GdiHelper.HSBToRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            将HSB颜色转换为RGB颜色
            </summary>
            <param name="hue">色调</param>
            <param name="sat">饱和度</param>
            <param name="bri">亮度</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.GdiHelper.CalcInterpolateColor(System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            给定坐标值,计算4个角点的插值颜色
            </summary>
        </member>
        <member name="M:NRails.Util.GdiHelper.DrawFancyLabel(System.Drawing.Graphics,System.String,System.Single,System.Single,System.Drawing.Brush,System.Drawing.Brush,System.Drawing.Font)">
            <summary>
            画轮廓标签
            </summary>
            <param name="g"></param>
            <param name="content"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="brBack"></param>
            <param name="brFore"></param>
            <param name="font"></param>
        </member>
        <member name="M:NRails.Util.GdiHelper.MakeBlandRect(System.Drawing.RectangleF,System.Single,NRails.Util.BlandRectSide)">
            <summary>
            获取一个柔角的矩形框路径
            </summary>
            <param name="rectMain"></param>
            <param name="blandDegree">柔和度,该值介于 0 到 90 之间</param>
            <returns></returns>
        </member>
        <member name="T:NRails.Util.TrackingHandler">
            <summary>
            GDIHelper中通用像素漫游方法所用到的方法代理
            </summary>
            <param name="row">像素行</param>
            <param name="column">像素列</param>
            <param name="index">像素索引</param>
            <returns></returns>
        </member>
        <member name="T:NRails.Util.RoamState">
            <summary>
            像素漫游状态
            </summary>
        </member>
        <member name="F:NRails.Util.RoamState.CanRoam">
            <summary>
            可被漫游
            </summary>
        </member>
        <member name="F:NRails.Util.RoamState.CanNotRoam">
            <summary>
            不可被漫游
            </summary>
        </member>
        <member name="F:NRails.Util.RoamState.Setted">
            <summary>
            无效点
            </summary>
        </member>
        <member name="T:NRails.Util.Oct">
            <summary>
            类型转换器
            </summary>
        </member>
        <member name="M:NRails.Util.Oct.ToPoint(System.String)">
            <summary>
            从Point格式的字符串中生成Point对象
            </summary>
            <param name="valueString"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.Oct.ToPointF(System.String)">
            <summary>
            从PointF格式的字符串中生成PointF对象
            </summary>
            <param name="valueString"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.Oct.ToSize(System.String)">
            <summary>
            从Size格式的字符串中生成Size对象
            </summary>
            <param name="valueString"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.Oct.ToSizeF(System.String)">
            <summary>
            从SizeF格式的字符串中生成SizeF对象
            </summary>
            <param name="valueString"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.Oct.ToRectangleF(System.String)">
            <summary>
            从RectangleF格式的字符串中生成RectangleF对象
            </summary>
            <param name="valueString"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.Oct.ToRectangle(System.String)">
            <summary>
            从Rectangle格式的字符串中生成Rectangle对象
            </summary>
            <param name="valueString"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.Oct.ToColor(System.String)">
            <summary>
            将一个颜色字符串类型转换为颜色
            </summary>
            <param name="valueString"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.Oct.ToTimeSpan(System.String)">
            <summary>
            从TimeSpan格式的字符串中生成TimeSpan对象
            </summary>
            <param name="valueString"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.Oct.ToString(System.Object)">
            <summary>
            将给定的对象转换为参数形式的字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.Oct.ToStringArray(System.String)">
            <summary>
            转换为字符串数组，每个数组之间用分号格开，如果需要表示分号，用\;代替
            </summary>
            <param name="valueString"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.Oct.ToBoolean(System.String)">
            <summary>
            将字符串转换为布尔值
            </summary>
            <param name="valueString"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.Oct.ConvertNumber(System.Type,System.Object,System.Type)">
            <summary>
            将typeSrc类型的数字转换成dst类型的数字，srcValue是需要转换的值
            </summary>
            <param name="typeSrc"></param>
            <param name="srcValue"></param>
            <param name="dst"></param>
            <returns></returns>
        </member>
        <member name="T:NRails.Util.RegexHelper">
            <summary>
            提供一些常用的正则表达式匹配方法
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.EMailPatternP">
            <summary>
            邮件地址判别字符串（强制匹配）
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.EMailPattern">
            <summary>
            邮件地址判别字符串
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.NumberPattern">
            <summary>
            用于匹配数字的正则表达式
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.AZ09">
            <summary>
            用于匹配字母和数字的正则表达式
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.AZ09_">
            <summary>
            用于匹配字母和数字的正则表达式
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.AZ">
            <summary>
            用于匹配字母的正则表达式
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.AZ_Lower">
            <summary>
            用于匹配字母的正则表达式
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.AZ_Upper">
            <summary>
            用于匹配字母的正则表达式
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.NumberPatternP">
            <summary>
            用于强制匹配数字的正则表达式
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.NumberPattern16">
            <summary>
            用于匹配16进制数字的正则表达式
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.NumberPattern16P">
            <summary>
            用于强制匹配16进制数字的正则表达式
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.SizePattern">
            <summary>
            用于匹配Size的正则表达式
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.SizePatternP">
            <summary>
            用于匹配Size的正则表达式
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.NumberArrayPattern">
            <summary>
            用于匹配数字数组(该数组以逗号或者)
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.CharZhCNPattern">
            <summary>
            用于匹配汉字的正则表达式
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.ZhCNPattern">
            <summary>
            用于匹配汉字的正则表达式
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.NoSymbolPattern">
            <summary>
            不带符号验证器
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.SpacePattern">
            <summary>
            匹配空格的正则表达式 \s*
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.RectanglePattern">
            <summary>
            用于匹配Size的正则表达式
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.Point3Pattern">
            <summary>
            用于匹配Size的正则表达式
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.TimeSpanPattern">
            <summary>
            用于匹配TimeSpan的正则表达式
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.EndPointPattern">
            <summary>
            强制远程地址判别串
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.IPAddressPattern">
            <summary>
            匹配IP地址格式字符串，非严格匹配
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.IPAddressPatternP">
            <summary>
            匹配IP地址格式字符串，非严格匹配
            </summary>
        </member>
        <member name="F:NRails.Util.RegexHelper.EndPointPatternP">
            <summary>
            强制远程地址判别串
            </summary>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsNum(System.String)">
            <summary>
            返回传入的字符串是否为数字
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsNum(System.String,System.Int32)">
            <summary>
            返回传入的字符串是否为数字
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsNumArray(System.String)">
            <summary>
            返回传入的字符串是否为数字数组
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsPoint(System.String)">
            <summary>
            返回传入的字符串是否为一个Point字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsTime_CST(System.String)">
            <summary>
            true＝给定的字符是CST时间
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsTime_GMT(System.String)">
            <summary>
            true＝给定的字符是CST时间
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsAZ09(System.String)">
            <summary>
            判断给定的字符串是否为数字和字符组成的
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsNameable(System.String)">
            <summary>
            判断给定的字符串是否允许作为对象名称
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsQQNumMail(System.String)">
            <summary>
            判定是否为qq号码邮箱
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsAZ(System.String)">
            <summary>
            判断给定的字符串是否为数字和字符组成的
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsZhCNCharacter(System.Char)">
            <summary>
            返回给定的字符是否为汉字 true=是汉字
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsZhCn(System.String)">
            <summary>
            判定是否为中文字符
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsNoSymbol(System.String)">
            <summary>
            不带符号的字符
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsSize(System.String)">
            <summary>
            返回该字符串是否是以Size定义的形式，例如  800,600
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsRectangle(System.String)">
            <summary>
            返回传入的字符串是否为一个矩形字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsTimeSpan(System.String)">
            <summary>
            判别是否为TimeSpan类型的字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsColor(System.String)">
            <summary>
            判断一个字符串是否为ARGB格式的颜色字符(是矩形形式，或者三维点形式)
            </summary>
        </member>
        <member name="M:NRails.Util.RegexHelper.StartWithNum(System.String)">
            <summary>
            判断一个字符串是否以数字开头
            </summary>
            <param name="valueStr"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.GetMatchCount(System.String,System.String)">
            <summary>
            计算给定的字符串（source）中包含的目标字符串(target)的个数
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsEmail(System.String)">
            <summary>
            返回ture表示字符串为邮件地址
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsEndPoint(System.String)">
            <summary>
            判断给定的字符串是否为一个EndPoint
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegexHelper.IsIPAddress(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.RegistryHelper.OpenKey(System.String,System.Boolean)">
            <summary>
            尝试打开一个注册表路径
            </summary>
            <param name="path">注册表路径，允许如果不包含根路径，则默认根路径为HKEY_CURRENT_USER</param>
            <param name="create">true=如果不存在路径则进行创建，默认值 true</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.SerializeHelper.SerToBytes``1(``0)">
            <summary>
            将给定的对象序列化成字节
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.SerializeHelper.ToObject(System.Byte[])">
            <summary>
            将给定的对象反序列化成对象
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.SerializeHelper.ToObject(System.Byte[],System.Int32)">
            <summary>
            将给定的对象反序列化成对象
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="E:NRails.Util.SerializeHelper.ParseType">
            <summary>
            尝试将类型名称转换为类型时引发,如果需要更改已解析的类型，则直接返回目标类型
            </summary>
        </member>
        <member name="M:NRails.Util.SerializeHelper.SerializeToXml(System.Object)">
            <summary>
            将给定的对象序列化成Xml
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.SerializeHelper.DeSerializeFromXml``1(System.String)">
            <summary>
            将给定的字符串反序列化为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.SerializeHelper.DeSerializeFromXml(System.Type,System.String)">
            <summary>
            将给定的字符串反序列化为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StreamHelper.ReadAll(System.IO.Stream)">
            <summary>
            从给定的数据流中读取所有字节，该方法用于某些特殊的流无法获取长度时使用
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StreamHelper.ReadAll(System.IO.Stream,System.Int32)">
            <summary>
            从给定的数据流中读取所有字节，该方法用于某些特殊的流无法获取长度时使用
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StreamHelper.Write(System.IO.Stream,System.Int64)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:NRails.Util.StreamHelper.Write(System.IO.Stream,System.Double)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:NRails.Util.StreamHelper.Write(System.IO.Stream,System.Int32)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:NRails.Util.StreamHelper.GetByteCount(System.String)">
            <summary>
            返回将给定的字符串转换为byte数组类型时的实际长度(UTF8编码，该方法有别于Encoding.GetByteCount)
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StreamHelper.WriteChars(System.IO.Stream,System.String)">
            <summary>
            将给定的字符串中的字符强制转换为byte后写入到流中
            </summary>
            <param name="stream"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StreamHelper.WriteChars(System.IO.Stream,System.Char[])">
            <summary>
            将给定的字符强制转换为byte后写入到流中
            </summary>
            <param name="stream"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StreamHelper.WriteSafe(System.IO.Stream,System.Int64)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:NRails.Util.StreamHelper.WriteSafe(System.IO.Stream,System.Double)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:NRails.Util.StreamHelper.WriteSafe(System.IO.Stream,System.Int32)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:NRails.Util.StreamHelper.WriteEmpty(System.IO.Stream,System.Int64)">
            <summary>
            写入一片空白区域
            </summary>
            <param name="stream"></param>
            <param name="p"></param>
        </member>
        <member name="M:NRails.Util.StreamHelper.WriteEmpty(System.IO.Stream,System.Int32)">
            <summary>
            写入一片空白区域
            </summary>
            <param name="stream"></param>
            <param name="p"></param>
        </member>
        <member name="M:NRails.Util.StreamHelper.WriteEmpty(System.IO.Stream,System.Int32,System.Byte)">
            <summary>
            写入一片空白区域
            </summary>
            <param name="stream"></param>
            <param name="p"></param>
        </member>
        <member name="M:NRails.Util.StreamHelper.WriteEmpty(System.IO.Stream,System.Int64,System.Byte)">
            <summary>
            写入一片空白区域
            </summary>
            <param name="stream"></param>
            <param name="p"></param>
        </member>
        <member name="M:NRails.Util.StreamHelper.BeginSerialize(System.IO.Stream,System.Byte)">
            <summary>
            开始进行序列化
            </summary>
            <param name="stream"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StreamHelper.EndSerialize(System.IO.Stream,System.Int64)">
            <summary>
            结束进行序列化
            </summary>
            <param name="stream"></param>
            <param name="beginPos">该值为BeginSerialize调用后返回的结果</param>
        </member>
        <member name="M:NRails.Util.StreamHelper.EndDeSerialize(System.IO.Stream,NRails.Util.StreamHelper.DeSerArg)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="arg">该参数为BeginDeSerialize调用后返回的结果</param>
        </member>
        <member name="M:NRails.Util.StreamHelper.WriteBCD(System.IO.Stream,System.Byte)">
            <summary>
            在给定的流中写入一个BCD数字，例如11写入后将变成 0x11 ,即 17
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:NRails.Util.StreamHelper.WriteBCD(System.IO.Stream,System.String)">
            <summary>
            在给定的流中写入一个BCD字符串，例如:12345678 写入后将变成 0x12,0x34,0x56,0x78
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:NRails.Util.StringHelper.KeywordContains(System.Object,System.String)">
            <summary>
            判定给定的对象各个字段是否包含给定的目标字符串
            </summary>
            <param name="obj"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.ToCookies(System.String)">
            <summary>
            解析Cookie字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.GetString(System.Text.Encoding,System.Byte[],System.Int32@,System.Int32)">
            <summary>
            按照指定编码读取字符串信息，并且修正offset值
            </summary>
            <param name="encoding"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.GetBytes(System.Text.Encoding,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="encoding"></param>
            <param name="str"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.Append(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            在次字符串末尾添加指定个数的\t字符后，再添加指定的字符串文本
            </summary>
            <param name="builder"></param>
            <param name="content"></param>
            <param name="tabCount"></param>
        </member>
        <member name="M:NRails.Util.StringHelper.AppendLine(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            在次字符串末尾添加指定个数的\t字符后，再添加指定的字符串文本
            </summary>
            <param name="builder"></param>
            <param name="content"></param>
            <param name="tabCount"></param>
        </member>
        <member name="M:NRails.Util.StringHelper.GetChineseSpell(System.String,System.Boolean)">
            <summary>
            获取给第字符串的中文拼音
            </summary>
            <param name="chineseChars"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.GetChineseSpell(System.Char,System.Boolean)">
            <summary>
            获取给第字符串的中文拼音,非中文传入会返回null
            </summary>
            <param name="chineseChars"></param>
            <param name="withTone">true=返回的拼音末尾加上一个声调标示</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.GetChineseSpellFirst(System.String)">
            <summary>
            获取第中文字符的第一个拼音
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            对给定的字符串进行URL编码，
            </summary>
            <param name="target"></param>
            <param name="encoding">默认为Encoding.Default</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            对给定的字符串进行URL解码，
            </summary>
            <param name="target"></param>
            <param name="encoding">默认为Encoding.Default</param>
            <returns></returns>
        </member>
        <member name="F:NRails.Util.StringHelper.DefaultUrlParamEncoding">
            <summary>
            默认URL编码
            </summary>
        </member>
        <member name="M:NRails.Util.StringHelper.ToUrlParam(System.String)">
            <summary>
            转换成URL参数字典
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.ToUrlParam(System.String,System.Boolean)">
            <summary>
            转换成URL参数字典
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.ToUrlParam(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,System.Text.Encoding)">
            <summary>
            将给定的字典转换成URL字符串参数
            </summary>
            <param name="dic">需要转换的字典</param>
            <param name="encod">true=进行参数编码</param>
            <param name="encoding">当encod=true时，用于参与编码的编码类型，默认为utf8</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.UrlEncode(System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            将给定字典中的值进行URL编码
            </summary>
            <param name="dic"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.UrlDecode(System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            将给定字典中的值进行URL解码
            </summary>
            <param name="dic"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.SetUrlParam(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Boolean,System.Boolean,System.Boolean,System.Text.Encoding)">
            <summary>
            将给定的URL参数中的参数写入到字典中
            </summary>
            <param name="dic">目标字典</param>
            <param name="url">需要解析参数的URL</param>
            <param name="clear">true＝在设置之前清空字典</param>
            <param name="setToLower">true＝将名称转换为小写字母</param>
            <param name="doDecode">true＝进行解码</param>
            <param name="encoding">当doDecode＝true时，用于解码的编码类型，不写则默认为utf8</param>
        </member>
        <member name="M:NRails.Util.StringHelper.HtmlEscapeToNormal(System.String)">
            <summary>
            将给定的字符串中html转义字符转换为真实的实体字符
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.NormalToHtmlEscape(System.String)">
            <summary>
            将给定的字符串中html转义字符转换为真实的实体字符
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.format(System.String,System.Object[])">
            <summary>
            格式化指定字符串，等同与string.Format()
            </summary>
            <param name="format"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.f(System.String,System.Object[])">
            <summary>
            格式化指定字符串，等同与string.Format()
            </summary>
        </member>
        <member name="M:NRails.Util.StringHelper.FormatWith(System.String,System.Object[])">
            <summary>
            格式化指定字符串，等同与string.Format()
            </summary>
        </member>
        <member name="M:NRails.Util.StringHelper.FormatJson(System.String)">
            <summary>
            格式化Json数据，使其可读性更强
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.FormatJS(System.String)">
            <summary>
            格式化Json数据，使其可读性更强
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.FormatToRead(System.String,System.Char)">
            <summary>
            格式化Json数据，使其可读性更强
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.XmlEscape(System.String,System.Boolean)">
            <summary>
            对给定的XMl或者Html文本进行转义处理
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.XmlDscape(System.String)">
            <summary>
            对给定的XML或者HTML进行反转义处理
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.GenChineseName">
            <summary>
            随机生成中文名
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.GenChineseChars(System.Int32)">
            <summary>
            此函数为生成指定数目的汉字
            </summary>
            <param name="charLen">汉字数目</param>
            <returns>所有汉字</returns>
        </member>
        <member name="M:NRails.Util.StringHelper.GenEngishChars(System.Int32)">
            <summary>
            随机生成一串英文字符，纯英文字符，不包含数字
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.GenSymbolChars(System.Int32)">
            <summary>
            随机生成一串符号文本
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.GenNumber(System.Int32)">
            <summary>
            随机生成数字
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.GenEngishCharsNumber(System.Int32)">
            <summary>
            随机生成一串英文字符,可能包含数字
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.GenMobileNumber">
            <summary>
            随机生成手机号码
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.GenChinesePinCode">
            <summary>
            随机生成身份证号码
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.StringHelper.GenBlessing">
            <summary>
            随机生成礼貌用语
            </summary>
            <returns></returns>
        </member>
        <member name="T:NRails.Util.MemberModifier">
            <summary>
            提供一个基本的序列化和反序列化支持
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.SetVisible(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            设置给定控件的可见状态
            </summary>
            <param name="control"></param>
            <param name="visible"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.SetEnable(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            设置指定控件的启用状态
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.AddTreeNode(System.Windows.Forms.TreeView,System.String)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ThreadHelper.AddTreeNode(System.Windows.Forms.TreeNode,System.String)">
            <summary>
            
            </summary>
            <param name="parentNode"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ThreadHelper.AddTreeNode(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode)">
            <summary>
            
            </summary>
            <param name="parentNode"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ThreadHelper.AddTreeNode(System.Windows.Forms.TreeView,System.Windows.Forms.TreeNode)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ThreadHelper.AddTreeNode(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode[])">
            <summary>
            
            </summary>
            <param name="parentNode"></param>
            <param name="node"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.AddTreeNodeAsync(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode[])">
            <summary>
            
            </summary>
            <param name="parentNode"></param>
            <param name="node"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.AddTreeNode(System.Windows.Forms.TreeView,System.Windows.Forms.TreeNode[])">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="node"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.RemoveTreeNode(System.Windows.Forms.TreeView,System.Windows.Forms.TreeNode[])">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="nodes"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.RemoveTreeNode(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode[])">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="nodes"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.RemoveTreeNodeAsync(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode[])">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="nodes"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.CloseForm(System.Windows.Forms.Form)">
            <summary>
            调用给定窗体的Close方法(异步支持)
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.TickMoreThen(System.Int32,System.Int32)">
            <summary>
            返回给定的时间点到目前为止是否已经超出给定的值
            </summary>
            <param name="tick">时间点</param>
            <param name="tickDistance">时间距离</param>
            <returns></returns>
        </member>
        <member name="P:NRails.Util.ThreadHelper.TickMoreThenOneSecond">
            <summary>
            每秒返回一次true
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.DoVerb(System.Delegate,System.Int32,System.Object[])">
            <summary>
            在tick毫秒后执行method
            </summary>
            <param name="method"></param>
            <param name="tick">时间间隔，单位:毫秒</param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.DoVerb(NRails.VoidMethodInvoker,System.Int32,NRails.VoidMethodInvoker)">
            <summary>
            在tick毫秒后执行method
            </summary>
            <param name="method"></param>
            <param name="tick">时间间隔，单位:毫秒</param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.DoVerb(System.Threading.WaitCallback,System.Int32,System.Object,System.Threading.WaitCallback)">
            <summary>
            
            </summary>
            <param name="method"></param>
            <param name="tick">时间间隔，单位:毫秒</param>
            <param name="state"></param>
            <param name="callback"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.DoVerb(System.Delegate,System.Int32,System.Object[],System.Delegate,System.Object[])">
            <summary>
            
            </summary>
            <param name="method"></param>
            <param name="tick">时间间隔，单位:毫秒</param>
            <param name="args"></param>
            <param name="callback"></param>
            <param name="callbackArgs"></param>
        </member>
        <member name="F:NRails.Util.ThreadHelper.DelegateInvoker._isAlive">
            <summary>
            在调用Dispose()函数或者析构函数时，该值会被设置为0
            </summary>
        </member>
        <member name="F:NRails.Util.ThreadHelper.DelegateInvoker.IsAnonymous">
            <summary>
            true=此容器承载的是匿名方法， 需要在执行完成释放此容器
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.DelegateInvoker.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Util.ThreadHelper.DelegateInvoker.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.DelegateInvoker.Invoke(System.Delegate,System.Int32,System.Object[],System.Boolean,System.Boolean)">
            <summary>
            尝试在ticks毫秒之后执行function,如果function正在执行则退出
            </summary>
            <param name="function"></param>
            <param name="ticks"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeOnce(System.Delegate,System.Int32,System.Boolean,System.Boolean,System.Object[])">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后一次调用将被取消
            </summary>
            <param name="function"></param>
            <param name="tick">0=立即执行</param>
            <param name="loop">true=循环执行</param>
            <param name="inovkeImm">true=第一次立即执行</param>
            <param name="args"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeOnce(System.Delegate,System.Int32,System.Boolean)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后一次调用将被取消
            </summary>
            <param name="function"></param>
            <param name="tick">0=立即执行</param>
            <param name="loop">true=循环执行</param>
            <param name="inovkeImm">true=第一次立即执行</param>
            <param name="args"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeOnce(System.Delegate,System.Int32,System.Boolean,System.Object[])">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后一次调用将被取消
            </summary>
            <param name="function"></param>
            <param name="tick">0=立即执行</param>
            <param name="loop">true=循环执行</param>
            <param name="inovkeImm">true=第一次立即执行</param>
            <param name="args"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeOnce(NRails.VoidMethodInvoker,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后一次调用将被取消
            </summary>
            <param name="function"></param>
            <param name="tick"></param>
            <param name="loop"></param>
            <param name="invokeImm">true=第一次立即执行</param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeOnce(NRails.VoidMethodInvoker,System.Int32,System.Boolean)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后一次调用将被取消
            </summary>
            <param name="function"></param>
            <param name="tick">如果小于等于0则立即执行</param>
            <param name="loop">true=循环执行</param>
            <param name="invokeImm">true=立即执行第一次</param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeOnce(NRails.VoidMethodInvoker,System.Int32)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后一次调用将被取消
            </summary>
            <param name="function"></param>
            <param name="tick">如果小于等于0则立即执行</param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeOnce(NRails.VoidMethodInvoker)">
            <summary>
            
            </summary>
            <param name="function"></param>
            <param name="tick"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeOnce(System.Delegate,System.Int32,System.Object[])">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后一次调用将被取消
            </summary>
            <param name="function"></param>
            <param name="tick">如果小于等于0则立即执行</param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeOnce(System.Delegate,System.Object[])">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后一次调用将被取消
            </summary>
            <param name="function"></param>
            <param name="tick">如果小于等于0则立即执行</param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeTwice(System.Delegate,System.Int32,System.Boolean,System.Boolean,System.Object[])">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第三次调用将被取消
            </summary>
            <param name="function"></param>
            <param name="tick">0=立即执行</param>
            <param name="loop">true=循环执行</param>
            <param name="inovkeImm">true=第一次立即执行</param>
            <param name="args"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeTwice(System.Delegate,System.Int32,System.Boolean)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第三次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeTwice(System.Delegate,System.Int32,System.Boolean,System.Object[])">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第三次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeTwice(NRails.VoidMethodInvoker,System.Int32,System.Boolean)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第三次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeTwice(NRails.VoidMethodInvoker,System.Int32)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第三次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeTwice(NRails.VoidMethodInvoker)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第三次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeTwice(System.Delegate,System.Int32,System.Object[])">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第三次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeTwice(System.Delegate,System.Object[])">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第三次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeThrce(System.Delegate,System.Int32,System.Boolean,System.Boolean,System.Object[])">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第四次调用将被取消
            </summary>
            <param name="function"></param>
            <param name="tick">0=立即执行</param>
            <param name="loop">true=循环执行</param>
            <param name="inovkeImm">true=第一次立即执行</param>
            <param name="args"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeThrce(System.Delegate,System.Int32,System.Boolean)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第四次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeThrce(System.Delegate,System.Int32,System.Boolean,System.Object[])">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第四次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeThrce(NRails.VoidMethodInvoker,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第四次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeThrce(NRails.VoidMethodInvoker,System.Int32,System.Boolean)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第四次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeThrce(NRails.VoidMethodInvoker,System.Int32)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第四次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeThrce(NRails.VoidMethodInvoker)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第四次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeThrce(System.Delegate,System.Int32,System.Object[])">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第四次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeThrce(System.Delegate,System.Object[])">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第四次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeFource(System.Delegate,System.Int32,System.Boolean,System.Boolean,System.Object[])">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第五次调用将被取消
            </summary>
            <param name="function"></param>
            <param name="tick">0=立即执行</param>
            <param name="loop">true=循环执行</param>
            <param name="inovkeImm">true=第一次立即执行</param>
            <param name="args"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeFource(System.Delegate,System.Int32,System.Boolean)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第五次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeFource(System.Delegate,System.Int32,System.Boolean,System.Object[])">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第五次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeFource(NRails.VoidMethodInvoker,System.Int32,System.Boolean)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第五次调用将被取消
            </summary>
            <param name="function"></param>
            <param name="tick">如果小于等于0则立即执行</param>
            <param name="loop">true=循环执行</param>
            <param name="invokeImm">true=立即执行第一次</param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeFource(NRails.VoidMethodInvoker,System.Int32)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第五次调用将被取消
            </summary>
            <param name="function"></param>
            <param name="tick">如果小于等于0则立即执行</param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeFource(NRails.VoidMethodInvoker)">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第五次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeFource(System.Delegate,System.Int32,System.Object[])">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第五次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.InvokeFource(System.Delegate,System.Object[])">
            <summary>
            尝试延迟tick毫秒之后执行function,如果延迟操作已经被挂起，则最后第五次调用将被取消
            </summary>
        </member>
        <member name="M:NRails.Util.ThreadHelper.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
        </member>
        <member name="M:NRails.Util.ThreadHelper.IsFlagUsed(System.Int32@)">
            <summary>
            返回给定的标签是否已经被使用,如果当前Flag未被使用则将其占用
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Util.ThreadHelper.ReleaseFlagUsed(System.Int32@)">
            <summary>
            释放使用标签
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:NRails.Util.ValidateHelper.ShowValidateInfo(System.String,System.String,System.Windows.Forms.Control)">
            <summary>
            显示一个验证消息，并且设置控件焦点
            </summary>
            <param name="content">需要显示的消息</param>
            <param name="control">该消息验证需要激活的控件</param>
        </member>
        <member name="M:NRails.Util.ValidateHelper.ShowValidateInfo(System.String,System.Windows.Forms.Control)">
            <summary>
            显示一个验证消息
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:NRails.Util.ValidateHelper.ShowToolTip(System.String,System.String,System.Windows.Forms.Control)">
            <summary>
            在指定控件上显示一个泡泡提示框
            </summary>
            <param name="title">标题</param>
            <param name="message">消息提示</param>
            <param name="control">所需要显示的控件</param>
        </member>
        <member name="M:NRails.Util.ValidateHelper.GenValidateCode">
            <summary>
            生成验证码信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:NRails.Util.ValidateCodeInfo">
            <summary>
            生成验证码
            </summary>
        </member>
        <member name="F:NRails.Util.ValidateCodeInfo.ValidateQueImg">
            <summary>
            验证码图片
            </summary>
        </member>
        <member name="F:NRails.Util.ValidateCodeInfo.ValidateAns">
            <summary>
            验证码答案
            </summary>
        </member>
        <member name="F:NRails.Util.PropertyAccessMode.All">
            <summary>
            返回所有属性
            </summary>
        </member>
        <member name="F:NRails.Util.PropertyAccessMode.Read">
            <summary>
            返回可读属性，但有可能不可写
            </summary>
        </member>
        <member name="F:NRails.Util.PropertyAccessMode.Write">
            <summary>
            返回可写属性，但有可能不可读
            </summary>
        </member>
        <member name="F:NRails.Util.PropertyAccessMode.ReadWrite">
            <summary>
            返回可读并且可写的属性
            </summary>
        </member>
        <member name="F:NRails.Util.PropertyAccessMode.ReadOnly">
            <summary>
            返回单可读属性
            </summary>
        </member>
        <member name="F:NRails.Util.PropertyAccessMode.WriteOnly">
            <summary>
            返回单可写属性
            </summary>
        </member>
        <member name="M:NRails.TimeHelper.IsBetween(System.Double,System.Double)">
            <summary>
            判定当前时间是否为设定的时间范围内，time1和time2表示的是一天24小时，最大为23.99
            </summary>
            <param name="time1"></param>
            <param name="time2"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.TimeHelper.GetAllMonth(System.DateTime,System.DateTime)">
            <summary>
            获取给定时间范围内所经历的所有月份
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:NRails.WinForm.MessagePump">
            <summary>
            提供一个在没有界面时的消息循环线程
            </summary>
        </member>
        <member name="M:NRails.WinForm.MessagePump.#ctor(NRails.VoidMethodInvoker)">
            <summary>
            
            </summary>
            <param name="MainThread">启动时需要执行的入口函数</param>
        </member>
        <member name="M:NRails.WinForm.MessagePump.Start">
            <summary>
            启动消息循环
            </summary>
        </member>
        <member name="M:NRails.WinForm.MessagePump.Stop">
            <summary>
            停止消息循环
            </summary>
        </member>
        <member name="M:NRails.WinForm.MessagePump.Suspend">
            <summary>
            挂起消息线程
            </summary>
        </member>
        <member name="M:NRails.WinForm.MessagePump.Resume">
            <summary>
            恢复消息线程
            </summary>
        </member>
        <member name="T:NRails.WinForm.MP">
            <summary>
            MessagePump的静态实例
            </summary>
        </member>
        <member name="F:NRails.WinForm.MessagePumpSyncContext._isAlive">
            <summary>
            在调用Dispose()函数或者析构函数时，该值会被设置为0
            </summary>
        </member>
        <member name="M:NRails.WinForm.MessagePumpSyncContext.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.WinForm.MessagePumpSyncContext.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="T:NRails.WinForm.WBH">
            <summary>
            WebBrowserHelper
            </summary>
        </member>
        <member name="M:NRails.WinForm.WBH.EnumNodes(System.Windows.Forms.HtmlElement,NRails.WinForm.IsCorrectHtmlElement)">
            <summary>
            枚举所有Html元素
            </summary>
            <param name="node"></param>
            <param name="isCorrect"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.WinForm.WBH.GetElementByClassName(System.Windows.Forms.HtmlDocument,System.String)">
            <summary>
            
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.WinForm.WBH.GetElementByTagName(System.Windows.Forms.HtmlDocument,System.String)">
            <summary>
            
            </summary>
            <param name="tagName"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.WinForm.WBH.GetElementByAttributeValue(System.Windows.Forms.HtmlDocument,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <param name="attributeValue"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.WinForm.WBH.GetElementByTagNameAndAttributeValue(System.Windows.Forms.HtmlDocument,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tagName"></param>
            <param name="attributeName"></param>
            <param name="attributeValue"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.WinForm.WBH.GetElementByClassName(System.Windows.Forms.HtmlElement,System.String)">
            <summary>
            
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.WinForm.WBH.GetElementByTagName(System.Windows.Forms.HtmlElement,System.String)">
            <summary>
            
            </summary>
            <param name="tagName"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.WinForm.WBH.GetElementByAttributeValue(System.Windows.Forms.HtmlElement,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <param name="attributeValue"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.WinForm.WBH.GetElementByTagNameAndAttributeValue(System.Windows.Forms.HtmlElement,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tagName"></param>
            <param name="attributeName"></param>
            <param name="attributeValue"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.WinForm.WBH.GetElementByTagNameAndInnerText(System.Windows.Forms.HtmlDocument,System.String,System.String)">
            <summary>
            根据标签类型和innerText获取元素
            </summary>
            <param name="document"></param>
            <param name="tagName"></param>
            <param name="innerText"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.WinForm.WBH.GetElementByInnerText(System.Windows.Forms.HtmlDocument,System.String)">
            <summary>
            根据标签类型和innerText获取元素
            </summary>
            <param name="document"></param>
            <param name="tagName"></param>
            <param name="innerText"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.WinForm.WBH.GetElementByTagNameAndInnerText(System.Windows.Forms.HtmlElement,System.String,System.String)">
            <summary>
            根据标签类型和innerText获取元素
            </summary>
            <param name="document"></param>
            <param name="tagName"></param>
            <param name="innerText"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.WinForm.WBH.GetElementByInnerText(System.Windows.Forms.HtmlElement,System.String)">
            <summary>
            根据标签类型和innerText获取元素
            </summary>
            <param name="document"></param>
            <param name="tagName"></param>
            <param name="innerText"></param>
            <returns></returns>
        </member>
        <member name="T:NRails.Drawing.CustomColors">
            <summary>
            Provides custom colors members to use in the OfficeColorPicker.
            </summary>
        </member>
        <member name="F:NRails.Drawing.CustomColors._ColorNames">
            <summary>
            Provides a list of color names that matches the SelectableColors array.
            </summary>
        </member>
        <member name="M:NRails.Drawing.CustomColors.ColorEquals(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Compare 2 colors by their RGB properties.
            </summary>
            <param Name="color1"></param>
            <param Name="color2"></param>
            <returns>True when R,G and B properties of both colors are equals</returns>
        </member>
        <member name="T:NRails.Drawing.IVector">
            <summary>
            表示一个二维坐标结构,是所有点类型的基本接口
            </summary>
        </member>
        <member name="T:NRails.Drawing.IVector3">
            <summary>
            表示一个三维坐标结构，继承自IPoint2
            </summary>
        </member>
        <member name="T:NRails.Drawing.IVector4">
            <summary>
            表示一个四维坐标结构，继承自IPoint2
            </summary>
        </member>
        <member name="T:NRails.Drawing.RectangleD">
            <summary>
            边界结构
            </summary>
        </member>
        <member name="F:NRails.Drawing.RectangleD.Min">
            <summary>
            最小值坐标
            </summary>
        </member>
        <member name="F:NRails.Drawing.RectangleD.Max">
            <summary>
            最大值坐标
            </summary>
        </member>
        <member name="M:NRails.Drawing.RectangleD.#ctor(NRails.Drawing.Vector2D,NRails.Drawing.Vector2D)">
            <summary>
            从Vector2构造
            </summary>
            <param Name="min">左下点坐标</param>
            <param Name="max">右上点坐标</param>
        </member>
        <member name="M:NRails.Drawing.RectangleD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造函数(左下,右上)
            </summary>
            <param Name="minX">左下X坐标</param>
            <param Name="minY">左下Y坐标</param>
            <param Name="maxX">右上X坐标</param>
            <param Name="maxY">右上Y坐标</param>
        </member>
        <member name="M:NRails.Drawing.RectangleD.Clone">
            <summary>
            克隆
            </summary>
            <returns>自身的副本</returns>
        </member>
        <member name="M:NRails.Drawing.RectangleD.FromString(System.String)">
            <summary>
            从字符串中加载一个RectangleD对象
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Drawing.RectangleD.QuadSplit(System.Double)">
            <summary>
            根据指定的比例分割该矩形
            </summary>
            <param Name="split">分割率</param>
            <returns>分割后的矩形数组</returns>
        </member>
        <member name="M:NRails.Drawing.RectangleD.Intersects(NRails.Drawing.RectangleD)">
            <summary>
            判断两个矩形是否相交
            </summary>
            <param Name="box">所要测试的矩形</param>
            <returns>是否相交</returns>
        </member>
        <member name="M:NRails.Drawing.RectangleD.Contains(NRails.Drawing.RectangleD)">
            <summary>
            判断两个矩形是否是包含关系
            </summary>
            <param Name="box">所要测试的矩形</param>
            <returns>是否包含关系</returns>
        </member>
        <member name="M:NRails.Drawing.RectangleD.op_Equality(NRails.Drawing.RectangleD,NRails.Drawing.RectangleD)">
            <summary>
            相等判断
            </summary>
            <param Name="a">第一个矩形</param>
            <param Name="b">第二个矩形</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:NRails.Drawing.RectangleD.op_Inequality(NRails.Drawing.RectangleD,NRails.Drawing.RectangleD)">
            <summary>
            不等于判断
            </summary>
            <param Name="a">第一个矩形</param>
            <param Name="b">第二个矩形</param>
            <returns>是否不相等</returns>
        </member>
        <member name="M:NRails.Drawing.RectangleD.Join(NRails.Drawing.RectangleD,NRails.Drawing.RectangleD)">
            <summary>
            合并两个矩形
            </summary>
            <param Name="box">所要合并的矩形</param>
            <returns>合并后的矩形</returns>
        </member>
        <member name="M:NRails.Drawing.RectangleD.Join(NRails.Drawing.RectangleD)">
            <summary>
            合并两个矩形
            </summary>
            <param Name="box">所要合并的矩形</param>
        </member>
        <member name="M:NRails.Drawing.RectangleD.IntersectRect(NRails.Drawing.RectangleD)">
            <summary>
            返回两个矩形的相交部分
            </summary>
            <param Name="box">矩形</param>
            <returns>相交的矩形</returns>
        </member>
        <member name="M:NRails.Drawing.RectangleD.Grow(System.Double)">
            <summary>
            返回该矩形扩大指定值后的矩形
            </summary>
            <param Name="amount">增加的指定值</param>
            <returns>扩大后的矩形</returns>
        </member>
        <member name="M:NRails.Drawing.RectangleD.MoveTo(NRails.Drawing.Vector2D)">
            <summary>
            将中心移动到
            </summary>
            <param Name="p">所要移动到的点坐标</param>
        </member>
        <member name="M:NRails.Drawing.RectangleD.Equals(System.Object)">
            <summary>
            判断两个矩形是否相等
            </summary>
            <param Name="obj">所要测试的矩形</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Drawing.RectangleD.Contains(NRails.Drawing.IVector)">
            <summary>
            判断点是否在这个矩形内
            </summary>
            <param Name="p">所要测试的点</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Drawing.RectangleD.ResetToEmpty">
            <summary>
            将该矩形设置为空
            </summary>
        </member>
        <member name="M:NRails.Drawing.RectangleD.Contains(System.Double,System.Double)">
            <summary>
            返回指定的点是否被包含在矩形中
            </summary>
            <param name="x">X坐标</param>
            <param name="y">Y坐标</param>
            <returns></returns>
        </member>
        <member name="P:NRails.Drawing.RectangleD.Empty">
            <summary>
            表示一个不存在的矩形区域
            </summary>
        </member>
        <member name="P:NRails.Drawing.RectangleD.Left">
            <summary>
            获取左边缘的 x 坐标。
            </summary>
        </member>
        <member name="P:NRails.Drawing.RectangleD.Right">
            <summary>
            获取右边缘的 x 坐标
            </summary>
        </member>
        <member name="P:NRails.Drawing.RectangleD.Top">
            <summary>
            获取上边缘的 y 坐标
            </summary>
        </member>
        <member name="P:NRails.Drawing.RectangleD.Bottom">
            <summary>
            获取下边缘的 y 坐标
            </summary>
        </member>
        <member name="P:NRails.Drawing.RectangleD.MinX">
            <summary>
            获取左边缘的 x 坐标。
            </summary>
        </member>
        <member name="P:NRails.Drawing.RectangleD.MaxX">
            <summary>
            获取右边缘的 x 坐标
            </summary>
        </member>
        <member name="P:NRails.Drawing.RectangleD.MaxY">
            <summary>
            获取上边缘的 y 坐标
            </summary>
        </member>
        <member name="P:NRails.Drawing.RectangleD.MinY">
            <summary>
            获取下边缘的 y 坐标
            </summary>
        </member>
        <member name="P:NRails.Drawing.RectangleD.Width">
            <summary>
            获取边界宽度
            </summary>
        </member>
        <member name="P:NRails.Drawing.RectangleD.Height">
            <summary>
            获取边界高度
            </summary>
        </member>
        <member name="P:NRails.Drawing.RectangleD.Item(System.Int32)">
            <summary>
            根据索引值取得四个角点
            </summary>
        </member>
        <member name="P:NRails.Drawing.RectangleD.Center">
            <summary>
            获取该矩形的中心点
            </summary>
        </member>
        <member name="M:NRails.Drawing.RectangleD.ToString">
            <summary>
            边界的文字表示
            </summary>
            <returns></returns>
        </member>
        <member name="P:NRails.Drawing.RectangleD.IsEmpty">
            <summary>
            返回该矩形是否为一个不存在的矩形(Min=Vector2.Empty 或 Max=Vector2.Empty)
            </summary>
        </member>
        <member name="T:NRails.Drawing.Vector2D">
            <summary>
            表示一个三维空间点
            </summary>
        </member>
        <member name="P:NRails.Drawing.Vector2D.Empty">
            <summary>
            无效对象
            </summary>
        </member>
        <member name="P:NRails.Drawing.Vector2D.IsEmpty">
            <summary>
            返回改点是否为一个无效点
            </summary>
        </member>
        <member name="P:NRails.Drawing.Vector2D.Lon">
            <summary>
            经度，即 X 坐标
            </summary>
        </member>
        <member name="P:NRails.Drawing.Vector2D.Lat">
            <summary>
            纬度，即 Y 坐标
            </summary>
        </member>
        <member name="T:NRails.Drawing.Vector3D">
            <summary>
            表示一个三维空间点
            </summary>
        </member>
        <member name="M:NRails.Drawing.Vector3D.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Drawing.Vector3D.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="T:NRails.Drawing.Vector4D">
            <summary>
            表示一个四维空间点
            </summary>
        </member>
        <member name="P:NRails.Drawing.Vector4D.Empty">
            <summary>
            无效对象
            </summary>
        </member>
        <member name="M:NRails.Drawing.Vector4D.CoordinateEquals(NRails.Drawing.Vector4D)">
            <summary>
            判断坐标是否相同
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="P:NRails.Drawing.Vector4D.IsEmpty">
            <summary>
            返回改点是否为一个无效点
            </summary>
        </member>
        <member name="T:NRails.Drawing.BrushType">
            <summary>
            画刷类型
            </summary>
        </member>
        <member name="F:NRails.Drawing.BrushType.SolidBrush">
            <summary>
            实心画刷
            </summary>
        </member>
        <member name="F:NRails.Drawing.BrushType.HatchBrush">
            <summary>
            阴影画刷
            </summary>
        </member>
        <member name="F:NRails.Drawing.BrushType.TextureBrush">
            <summary>
            纹理画刷
            </summary>
        </member>
        <member name="T:NRails.Core.Initialization">
            <summary>
            初始化器
            </summary>
        </member>
        <member name="T:NRails.IProgress">
            <summary>
            一个用于表示控件进度状态的对象
            </summary>
        </member>
        <member name="E:NRails.IProgress.ValueChanged">
            <summary>
            进度值改变时引发改事件
            </summary>
        </member>
        <member name="P:NRails.IProgress.Value">
            <summary>
            当前进度值
            </summary>
        </member>
        <member name="P:NRails.IProgress.Min">
            <summary>
            最小进度
            </summary>
        </member>
        <member name="P:NRails.IProgress.Max">
            <summary>
            最大进度
            </summary>
        </member>
        <member name="P:NRails.IProgress.Message">
            <summary>
            进度信息
            </summary>
        </member>
        <member name="T:NRails.Media.MCIPlayer">
            <summary>
            clsMci 的摘要说明。
            </summary>
        </member>
        <member name="M:NRails.Media.MCIPlayer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Media.MCIPlayer._isAlive">
            <summary>
            在调用Dispose()函数或者析构函数时，该值会被设置为0
            </summary>
        </member>
        <member name="M:NRails.Media.MCIPlayer.Dispose">
            <summary>
            释放所占用的资源
            </summary>
        </member>
        <member name="P:NRails.Media.MCIPlayer.IsDisposed">
            <summary>
            获取该对象是否已经被释放
            </summary>
        </member>
        <member name="P:NRails.Media.MCIPlayer.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="M:NRails.Media.MCIPlayer.Play">
            <summary>
            播放
            </summary>
        </member>
        <member name="M:NRails.Media.MCIPlayer.StopT">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:NRails.Media.MCIPlayer.Puase">
            <summary>
            暂停
            </summary>
        </member>
        <member name="P:NRails.Media.MCIPlayer.Duration">
            <summary>
            总时间
            </summary>
        </member>
        <member name="P:NRails.Media.MCIPlayer.CurrentPosition">
            <summary>
            当前时间
            </summary>
        </member>
        <member name="T:NRails.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:NRails.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:NRails.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:NRails.Properties.Resources.NLog">
            <summary>
              查找类似 &lt;nlog xmlns=&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot;
                 xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;
             &lt;targets&gt;
               &lt;target name=&quot;info&quot; xsi:type=&quot;File&quot; fileName=&quot;${basedir}/Log/${shortdate}_log.txt&quot; layout=&quot;${message}&quot;/&gt;
            	&lt;target name=&quot;debug&quot; xsi:type=&quot;File&quot; fileName=&quot;${basedir}/Log/${shortdate}_debug.txt&quot; layout=&quot;${message}&quot;/&gt;
            	&lt;target name=&quot;trace&quot; xsi:type=&quot;File&quot; fileName=&quot;${basedir}/Log/${shortdate}_trace.txt&quot; layout=&quot;${message}&quot;/&gt;
            	&lt;target name=&quot;error&quot; xsi:type=&quot;File&quot; fileNa [字符串的其余部分被截断]&quot;; 的本地化字符串。
            </summary>
        </member>
        <member name="T:NRails.Native.WinMsg">
            <summary>
            表示系统消息类型 省略了WM_
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MOUSEWHEEL">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMI_GLOBAL_LOGGER_ID">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMIGUID_EXECUTE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMIGUID_READ_DESCRIPTION">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMIGUID_NOTIFICATION">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMIGUID_SET">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMIGUID_QUERY">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMI_GUIDTYPE_EVENT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMI_GUIDTYPE_DATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMI_GUIDTYPE_TRACE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMI_GUIDTYPE_TRACECONTROL">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMIREG_FLAG_EVENT_ONLY_GUID">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMIREG_FLAG_TRACE_CONTROL_GUID">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMIREG_FLAG_TRACED_GUID">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMIREG_FLAG_RESERVED2">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMIREG_FLAG_RESERVED1">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMIREG_FLAG_REMOVE_GUID">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMIREG_FLAG_INSTANCE_PDO">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMIREG_FLAG_INSTANCE_BASENAME">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMIREG_FLAG_INSTANCE_LIST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMIREG_FLAG_EXPENSIVE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMSZ_BOTTOMRIGHT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMSZ_BOTTOMLEFT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMSZ_BOTTOM">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMSZ_TOPRIGHT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMSZ_TOPLEFT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMSZ_TOP">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMSZ_RIGHT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMSZ_LEFT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.USER">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.APP">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PENWINLAST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PENWINFIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.AFXLAST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.AFXFIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.HANDHELDLAST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.HANDHELDFIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.THEMECHANGED">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.APPCOMMAND">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PRINT">
            <summary>
            应用程序发送此消息仅当WINDOWS或其它应用程序发出一个请求要求绘制一个应用程序的一部分
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.HOTKEY">
            <summary>
            当用户按下由REGISTERHOTKEY函数注册的热键时提交此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PALETTECHANGED">
            <summary>
            此消息在一个拥有焦点的窗口实现它的逻辑调色板后发送此消息给所有顶级并重叠的窗口，以此来改变系统调色板
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PALETTEISCHANGING">
            <summary>
            当一个应用程序正要实现它的逻辑调色板时发此消息通知所有的应用程序
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.QUERYNEWPALETTE">
            <summary>
            此消息发送给将要收到焦点的窗口，此消息能使窗口在收到焦点时同时有机会实现他的逻辑调色板
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.HSCROLLCLIPBOARD">
            <summary>
            此消息通过一个剪贴板观察窗口发送给剪贴板的所有者, //public const int它发生在当剪贴板包含CFOWNERDISPALY格式的数据并且有个事件在剪贴板观察窗的水平滚动条上, //public const int所有者应滚动剪贴板图象并更新滚动条的值
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CHANGECBCHAIN">
            <summary>
            当一个窗口从剪贴板观察链中移去时发送此消息给剪贴板观察链的第一个窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ASKCBFORMATNAME">
            <summary>
            通过剪贴板观察窗口发送此消息给剪贴板的所有者来请求一个CF_OWNERDISPLAY格式的剪贴板的名字
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SIZECLIPBOARD">
            <summary>
            当剪贴板包含CF_OWNERDIPLAY格式的数据并且剪贴板观察窗口的客户区域的大小已经改变是此消息通过剪贴板观察窗口发送给剪贴板的所有者
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.VSCROLLCLIPBOARD">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PAINTCLIPBOARD">
            <summary>
            当剪贴板包含CF_OWNERDIPLAY格式的数据并且剪贴板观察窗口的客户区需要重画
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DRAWCLIPBOARD">
            <summary>
            当剪贴板的内容变化时发送此消息给剪贴板观察链的第一个窗口, //public const int它允许用剪贴板观察窗口来显示剪贴板的新内容
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DESTROYCLIPBOARD">
            <summary>
            当调用ENPTYCLIPBOARD函数时
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.RENDERALLFORMATS">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.RENDERFORMAT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.UNDO">
            <summary>
            程序发送此消息给editcontrol或combobox撤消最后一次操作
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CLEAR">
            <summary>
            程序发送此消息给editcontrol或combobox清除当前选择的内容
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PASTE">
            <summary>
            程序发送此消息给editcontrol或combobox从剪贴板中得到数据
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.COPY">
            <summary>
            程序发送此消息给一个编辑框或combobox来复制当前选择的文本到剪贴板
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CUT">
            <summary>
            程序发送此消息给一个编辑框或combobox来删除当前选择的文本
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.TABLET_LAST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.TABLET_FIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WTSSESSION_CHANGE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCMOUSELEAVE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCMOUSEHOVER">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.IME_KEYUP">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.IME_KEYDOWN">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.IME_REQUEST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.IME_CHAR">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.IME_SELECT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.IME_COMPOSITIONFULL">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.IME_CONTROL">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.IME_NOTIFY">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.IME_SETCONTEXT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MDIREFRESHMENU">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DROPFILES">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.EXITSIZEMOVE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ENTERSIZEMOVE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MDISETMENU">
            <summary>
            程序发送此消息给MDI客户窗口用MDI菜单代替子窗口的菜单
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MDIGETACTIVE">
            <summary>
            程序发送此消息给MDI客户窗口来找到激活的子窗口的句柄
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MDIICONARRANGE">
            <summary>
            程序发送此消息给MDI客户窗口重新排列所有最小化的MDI子窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MDICASCADE">
            <summary>
            程序发送此消息给MDI客户窗口以层叠方式重新排列所有MDI子窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MDITILE">
            <summary>
            程序发送此消息给MDI客户窗口以平铺方式重新排列所有MDI子窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MDIMAXIMIZE">
            <summary>
            程序发送此消息给MDI客户窗口来最大化一个MDI子窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MDINEXT">
            <summary>
            程序发送此消息给MDI客户窗口激活下一个或前一个窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MDIRESTORE">
            <summary>
            程序发送此消息给MDI客户窗口让子窗口从最大最小化恢复到原来大小
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MDIACTIVATE">
            <summary>
            应用程序发送此消息给多文档的客户窗口通知客户窗口激活另一个MDI子窗口，当客户窗口收到此消息后，它发出MDIACTIVE消息给MDI子窗口（未激活）激活它
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MDIDESTROY">
            <summary>
            应用程序发送此消息给多文档的客户窗口来关闭一个MDI
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MDICREATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MOVING">
            <summary>
            当用户在移动窗口时发送此消息，通过此消息应用程序可以监视窗口大小和位置也可以修改他们
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAPTURECHANGED">
            <summary>
            发送此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SIZING">
            <summary>
            当用户正在调整窗口大小时发送此消息给窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NEXTMENU">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.EXITMENULOOP">
            <summary>
            发送此消息通知应用程序的主窗口that已退出了菜单循环模式
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ENTERMENULOOP">
            <summary>
            发送此消息通知应用程序的主窗口that已经进入了菜单循环模式
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PARENTNOTIFY">
            <summary>
            当MDI子窗口被创建或被销毁，或用户按了一下鼠标键而光标在子窗口上时发送此消息给它的父窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MOUSELAST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.XBUTTONDBLCLK">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.XBUTTONUP">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.XBUTTONDOWN">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MBUTTONDBLCLK">
            <summary>
            双击鼠标中键
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MBUTTONUP">
            <summary>
            释放鼠标中键
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MBUTTONDOWN">
            <summary>
            按下鼠标中键
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.RBUTTONDBLCLK">
            <summary>
            双击鼠标右键
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.RBUTTONUP">
            <summary>
            释放鼠标右键
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.RBUTTONDOWN">
            <summary>
            按下鼠标右键
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.LBUTTONDBLCLK">
            <summary>
            双击鼠标左键
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.LBUTTONUP">
            <summary>
            释放鼠标左键
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.LBUTTONDOWN">
            <summary>
            按下鼠标左键
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MOUSEMOVE">
            <summary>
            移动鼠标
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MOUSEFIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CTLCOLORSTATIC">
            <summary>
            当一个静态控件将要被绘制时发送此消息给它的父窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CTLCOLORSCROLLBAR">
            <summary>
            当一个滚动条控件将要被绘制时发送此消息给它的父窗口, //public const int通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置滚动条的背景颜色
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CTLCOLORDLG">
            <summary>
            当一个对话框控件将要被绘制前发送此消息给它的父窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CTLCOLORBTN">
            <summary>
            当一个按钮控件将要被绘制时发送此消息给它的父窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CTLCOLORLISTBOX">
            <summary>
            当一个列表框控件将要被绘制前发送此消息给它的父窗口,通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置列表框的文本和背景颜色
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CTLCOLOREDIT">
            <summary>
            当一个编辑型控件将要被绘制时发送此消息给它的父窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CTLCOLORMSGBOX">
            <summary>
            在windows绘制消息框前发送此消息给消息框的所有者窗口，通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置消息框的文本和背景颜色
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.QUERYUISTATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.UPDATEUISTATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CHANGEUISTATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MENUCOMMAND">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.UNINITMENUPOPUP">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MENUGETOBJECT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MENUDRAG">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MENURBUTTONUP">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ENTERIDLE">
            <summary>
            当一个模态对话框或菜单进入空载状态时发送此消息给它的所有者，一个模态对话框或菜单进入空载状态就是在处理完一条或几条先前的消息后没有消息它的列队中等待
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MENUCHAR">
            <summary>
            当菜单已被激活用户按下了某个键（不同于加速键），发送此消息给菜单的所有者
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MENUSELECT">
            <summary>
            当用户选择一条菜单项时发送此消息给菜单的所有者（一般是窗口）
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.INITMENUPOPUP">
            <summary>
            当一个下拉菜单或子菜单将要被激活时发送此消息，它允许程序在它显示前更改菜单，而不要改变全部
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.INITMENU">
            <summary>
            当一个菜单将要被激活时发送此消息，它发生在用户菜单条中的某项或按下某个菜单键，它允许程序在显示前更改菜单
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.VSCROLL">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.HSCROLL">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.TIMER">
            <summary>
            发生了定时器事件
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SYSCOMMAND">
            <summary>
            当用户选择窗口菜单的一条命令或当用户选择最大化或最小化时那个窗口会收到此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.COMMAND">
            <summary>
            当用户选择一条菜单命令项或当某个控件发送一条消息给它的父窗口，一个快捷键被翻译
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.INITDIALOG">
            <summary>
            在一个对话框程序被显示前发送此消息给它，通常用此消息初始化控件和执行其它任务
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.IME_KEYLAST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.IME_COMPOSITION">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.IME_ENDCOMPOSITION">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.IME_STARTCOMPOSITION">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.KEYLAST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SYSDEADCHAR">
            <summary>
            当SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后发送此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SYSCHAR">
            <summary>
            当SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后提交此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SYSKEYUP">
            <summary>
            当用户释放一个键同时ALT
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SYSKEYDOWN">
            <summary>
            当用户按住ALT键同时按下其它键时提交此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DEADCHAR">
            <summary>
            当用translatemessage函数翻译KEYUP消息时发送此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CHAR">
            <summary>
            按下某键，并已发出KEYDOWN，
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.KEYUP">
            <summary>
            释放一个键
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.KEYDOWN">
            <summary>
            按下一个键
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.KEYFIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.INPUT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCXBUTTONDBLCLK">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCXBUTTONUP">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCXBUTTONDOWN">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCMBUTTONDBLCLK">
            <summary>
            当用户双击鼠标中键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCMBUTTONUP">
            <summary>
            当用户释放鼠标中键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCMBUTTONDOWN">
            <summary>
            当用户按下鼠标中键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCRBUTTONDBLCLK">
            <summary>
            当用户双击鼠标右键同时光标某个窗口在非客户区时发送此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCRBUTTONUP">
            <summary>
            当用户释放鼠标右键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCRBUTTONDOWN">
            <summary>
            当用户按下鼠标右键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCLBUTTONDBLCLK">
            <summary>
            当用户双击鼠标左键同时光标某个窗口在非客户区时发送此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCLBUTTONUP">
            <summary>
            当用户释放鼠标左键同时光标某个窗口在非客户区时发送此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCLBUTTONDOWN">
            <summary>
            当光标在一个窗口的非客户区同时按下鼠标左键时提交此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCMOUSEMOVE">
            <summary>
            当光标在一个窗口的非客户区内移动时发送此消息给这个窗口非客户区为:窗体的标题栏及窗的边框体
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SYNCPAINT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.GETDLGCODE">
            <summary>
            发送此消息给某个与对话框程序关联的控件，widdows控制方位键和TAB键使输入进入此控件通过应
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCACTIVATE">
            <summary>
            此消息发送给某个窗口仅当它的非客户区需要被改变来显示是激活还是非激活状态
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCPAINT">
            <summary>
            程序发送此消息给某个窗口当它（窗口）的框架必须被绘制时
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCHITTEST">
            <summary>
            移动鼠标，按住或释放鼠标时发生
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCCALCSIZE">
            <summary>
            当某个窗口的客户区域必须被核算时发送此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCDESTROY">
            <summary>
            此消息通知某个窗口，非客户区正在销毁
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NCCREATE">
            <summary>
            当某个窗口第一次被创建时，此消息在CREATE消息发送前发送
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SETICON">
            <summary>
            程序发送此消息让一个新的大图标或小图标与某个窗口关联
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.GETICON">
            <summary>
            此消息发送给某个窗口来返回与某个窗口有关连的大图标或小图标的句柄
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DISPLAYCHANGE">
            <summary>
            当显示器的分辨率改变后发送此消息给所有的窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.STYLECHANGED">
            <summary>
            当调用SETWINDOWLONG函数一个或多个
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.STYLECHANGING">
            <summary>
            当调用SETWINDOWLONG函数将要改变一个或多个
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NOTIFYFORMAT">
            <summary>
            公用控件，自定义控件和他们的父窗口通过此消息来判断控件是使用ANSI还是UNICODE结构
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.USERCHANGED">
            <summary>
            当用户已经登入或退出后发送此消息给所有的窗口，当用户登入或退出时系统更新用户的具体设置信息，在用户更新设置时系统马上发送此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.HELP">
            <summary>
            此消息显示用户按下了F1，如果某个菜单是激活的，就发送此消息个此窗口关联的菜单，否则就发送给有焦点的窗口，如果当前都没有焦点，就把此消息发送给当前激活的窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.TCARD">
            <summary>
            当程序已经初始化windows帮助例程时发送此消息给应用程序
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.INPUTLANGCHANGE">
            <summary>
            当平台现场已经被改变后发送此消息给受影响的最顶级窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.INPUTLANGCHANGEREQUEST">
            <summary>
            当用户选择某种输入语言，或输入语言的热键改变
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CANCELJOURNAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.COPYDATA">
            <summary>
            当一个应用程序传递数据给另一个应用程序时发送此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.POWER">
            <summary>
            当系统将要进入暂停状态时发送此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WINDOWPOSCHANGED">
            <summary>
            发送此消息给那个窗口的大小和位置已经被改变时，来调用setwindowpos函数或其它窗口管理函数
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WINDOWPOSCHANGING">
            <summary>
            发送此消息给那个窗口的大小和位置将要被改变时，来调用setwindowpos函数或其它窗口管理函数
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.COMMNOTIFY">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.COMPACTING">
            <summary>
            显示内存已经很少了
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.GETOBJECT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.COMPAREITEM">
            <summary>
            发送此消息来判定combobox或listbox新增加的项的相对位置
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.QUERYDRAGICON">
            <summary>
            此消息发送给最小化窗口，当此窗口将要被拖放而它的类中没有定义图标，应用程序能返回一个图标或光标的句柄，当用户拖放图标时系统显示这个图标或光标
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.GETHOTKEY">
            <summary>
            应用程序发送此消息来判断热键与某个窗口是否有关联
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SETHOTKEY">
            <summary>
            应用程序发送此消息让一个窗口与一个热键相关连
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.GETFONT">
            <summary>
            应用程序发送此消息得到当前控件绘制文本的字体
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SETFONT">
            <summary>
            当绘制文本时程序发送此消息得到控件要用的颜色
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CHARTOITEM">
            <summary>
            此消息由一个LBS_WANTKEYBOARDINPUT风格的列表框发送给他的所有者来响应CHAR消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.VKEYTOITEM">
            <summary>
            此消息有一个LBS_WANTKEYBOARDINPUT风格的发出给它的所有者来响应KEYDOWN消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DELETEITEM">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MEASUREITEM">
            <summary>
            当button, public const intcombobox, public const intlistbox, public const intlistview, public const intcontrol, public const intmenuitem被创建时
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DRAWITEM">
            <summary>
            当button，combobox，listbox，menu的可视外观改变时发送
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SPOOLERSTATUS">
            <summary>
            每当打印管理列队增加或减少一条作业时发出此消息
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NEXTDLGCTL">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ICONERASEBKGND">
            <summary>
            此消息发送给某个最小化窗口，仅当它在画图标前它的背景必须被重画
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PAINTICON">
            <summary>
            发送给最小化窗口当它图标将要被重画
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.GETMINMAXINFO">
            <summary>
            此消息发送给窗口当它将要改变大小或位置
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.QUEUESYNC">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CHILDACTIVATE">
            <summary>
            送此消息给MDI子窗口当用户点击此窗口的标题栏，或当窗口被激活，移动，改变大小
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MOUSEACTIVATE">
            <summary>
            当光标在某个非激活的窗口中而用户正按着鼠标的某个键发送此消息给当前窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SETCURSOR">
            <summary>
            如果鼠标引起光标在某个窗口中移动
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CANCELMODE">
            <summary>
            发送此消息来取消某种正在进行的摸态（操作）
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.TIMECHANGE">
            <summary>
            当系统的时间变化时发送此消息给所有顶级窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.FONTCHANGE">
            <summary>
            当系统的字体资源库变化时发送此消息给所有顶级窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ACTIVATEAPP">
            <summary>
            发此消息给应用程序哪个窗口是激活的，哪个是非激活的
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DEVMODECHANGE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SETTINGCHANGE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WININICHANGE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SHOWWINDOW">
            <summary>
            当隐藏或显示窗口是发送此消息给这个窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SYSCOLORCHANGE">
            <summary>
            当系统颜色改变时，发送此消息给所有顶级窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ERASEBKGND">
            <summary>
            当窗口背景必须被擦除时（例在窗口改变大小时）
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.QUIT">
            <summary>
            用来结束程序运行
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ENDSESSION">
            <summary>
            当系统进程发出且鼠标输入没有被捕获时，就发消息给某个窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.QUERYOPEN">
            <summary>
            用户窗口恢复以前的大小位置时，把此消息发送给某个图标
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.QUERYENDSESSION">
            <summary>
            消息后，此消息发送给应用程序，通知它对话是否结束
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CLOSE">
            <summary>
            当一个窗口或应用程序要关闭时发送一个信号
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PAINT">
            <summary>
            要求一个窗口重画自己
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.GETTEXTLENGTH">
            <summary>
            得到与一个窗口有关的文本的长度（不包含空字符）
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.GETTEXT">
            <summary>
            应用程序发送此消息来复制对应窗口的文本到缓冲区
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SETTEXT">
            <summary>
            应用程序发送此消息来设置一个窗口的文本
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SETREDRAW">
            <summary>
            设置窗口是否能重画
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ENABLE">
            <summary>
            一个窗口改变成Enable状态
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.KILLFOCUS">
            <summary>
            一个窗口失去焦点
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SETFOCUS">
            <summary>
            一个窗口获得焦点
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ACTIVATE">
            <summary>
            一个窗口被激活或失去激活状态
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.SIZE">
            <summary>
            改变一个窗口的大小
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MOVE">
            <summary>
            移动一个窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DESTROY">
            <summary>
            当一个窗口被破坏时发送
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CREATE">
            <summary>
            创建一个窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NULL">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CTLCOLOR">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_END">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_UNICODE_END">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_CALLBACK_CAPCONTROL">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_PAL_MANUALCREATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_PAL_AUTOCREATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_PAL_PASTE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_PAL_SAVE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_PAL_OPEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_PAL_SAVEW">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_PAL_OPENW">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_PAL_SAVEA">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_PAL_OPENA">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SINGLE_FRAME">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SINGLE_FRAME_CLOSE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SINGLE_FRAME_OPEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_ABORT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_STOP">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_GET_MCI_DEVICE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_MCI_DEVICE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_GET_MCI_DEVICEW">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_MCI_DEVICEW">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_GET_MCI_DEVICEA">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_MCI_DEVICEA">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_GET_SEQUENCE_SETUP">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_SEQUENCE_SETUP">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SEQUENCE_NOFILE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SEQUENCE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_GRAB_FRAME_NOSTOP">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_SCROLL">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_GET_STATUS">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_SCALE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_PREVIEWRATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_OVERLAY">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_PREVIEW">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_DLG_VIDEOCOMPRESSION">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_VIDEOFORMAT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_GET_VIDEOFORMAT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_DLG_VIDEODISPLAY">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_DLG_VIDEOSOURCE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_DLG_VIDEOFORMAT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_GET_AUDIOFORMAT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_AUDIOFORMAT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_EDIT_COPY">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_FILE_SET_INFOCHUNK">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_FILE_ALLOCATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_FILE_SAVEDIB">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_FILE_SAVEAS">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_FILE_GET_CAPTURE_FILE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_FILE_SET_CAPTURE_FILE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_FILE_SAVEDIBW">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_FILE_SAVEASW">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_FILE_GET_CAPTURE_FILEW">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_FILE_SET_CAPTURE_FILEW">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_FILE_SAVEDIBA">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_FILE_SAVEASA">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_FILE_GET_CAPTURE_FILEA">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_FILE_SET_CAPTURE_FILEA">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_DRIVER_GET_CAPS">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_DRIVER_GET_VERSION">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_DRIVER_GET_NAME">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_DRIVER_GET_VERSIONW">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_DRIVER_GET_NAMEW">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_DRIVER_GET_VERSIONA">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_DRIVER_GET_NAMEA">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_DRIVER_DISCONNECT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_DRIVER_CONNECT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_USER_DATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_GET_USER_DATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_CALLBACK_WAVESTREAM">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_CALLBACK_VIDEOSTREAM">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_CALLBACK_FRAME">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_CALLBACK_YIELD">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_CALLBACK_STATUS">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_CALLBACK_ERROR">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_CALLBACK_STATUSA">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_CALLBACK_ERRORA">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_CALLBACK_STATUSW">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_SET_CALLBACK_ERRORW">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_GET_CAPSTREAMPTR">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_UNICODE_START">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_START">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.NOTIFY">
            <summary>
            当某个控件的某个事件已经发生或这个控件需要得到一些信息时，发送此消息给它的父窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PRINTCLIENT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.UNICHAR">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CONTEXTMENU">
            <summary>
            当用户某个窗口中点击了一下右键就发送此消息给这个窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.POWERBROADCAST">
            <summary>
            此消息发送给应用程序来通知它有关电源管理事件
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.IMEKEYUP">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.IMEKEYDOWN">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.INTERIM">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CONVERTRESULT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CONVERTREQUEST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WNT_CONVERTREQUESTEX">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CONVERTREQUESTEX">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.IME_REPORT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DDE_LAST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DDE_EXECUTE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DDE_POKE">
            <summary>
            =DDE_FIRST+7 一个DDE客户程序提交此消息给一个DDE服务程序，客户使用此消息来请求服务器接收一个未经同意的数据项服务器通过答复DDE_ACK消息提示是否它接收这个数据项.
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DDE_REQUEST">
            <summary>
            =DDE_FIRST+6
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DDE_DATA">
            <summary>
            =DDE_FIRST+5 一个DDE服务程序提交此消息给DDE客户程序来传递个一数据项给客户或通知客户的一条可用数据项
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DDE_ACK">
            <summary>
            =DDE_FIRST+4 此消息通知一个DDE（动态数据交换）程序已收到并正处理DDE_POKE, public const intDDE_EXECUTE, public const intDDE_DATA, //public const int
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DDE_UNADVISE">
            <summary>
            =DDE_FIRST+3 一个DDE客户程序通过此消息通知一个DDE服务程序不更新指定的项或一个特殊的剪贴板格式的项
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DDE_ADVISE">
            <summary>
            =DDE_FIRST+2 一个DDE客户程序提交此消息给一个DDE服务程序来请求服务器每当数据项改变时更新它
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DDE_TERMINATE">
            <summary>
            =DDE_FIRST+1 一个DDE应用程序（无论是客户还是服务器）提交此消息来终止一个会话
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DDE_INITIATE">
            <summary>
            =DDE_FIRST+0 一个DDE客户程序提交此消息开始一个与服务器程序的会话来响应那个指定的程序和主题名
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DDE_FIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.DEVICECHANGE">
            <summary>
            当设备的硬件配置改变时发送此消息给应用程序或设备驱动程序
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CPL_LAUNCHED">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CPL_LAUNCH">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PSD_YAFULLPAGERECT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PSD_ENVSTAMPRECT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PSD_GREEKTEXTRECT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PSD_MARGINRECT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PSD_MINMARGINRECT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PSD_FULLPAGERECT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.PSD_PAGESETUPDLG">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CHOOSEFONT_SETFLAGS">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CHOOSEFONT_SETLOGFONT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CHOOSEFONT_GETLOGFONT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MOUSELEAVE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.MOUSEHOVER">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.WMB_FUNC">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ADSPROP_NOTIFY_ERROR">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ADSPROP_NOTIFY_EXIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ADSPROP_NOTIFY_FOREGROUND">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ADSPROP_NOTIFY_SETFOCUS">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ADSPROP_NOTIFY_APPLY">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ADSPROP_NOTIFY_CHANGE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ADSPROP_NOTIFY_PAGEHWND">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.ADSPROP_NOTIFY_PAGEINIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.RASDIALEVENT">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.Native.WinMsg.CAP_GRAB_FRAME">
            <summary>
            
            </summary>
        </member>
        <member name="M:NRails.Native.PlaySound(System.String,System.Int32,System.Int32)">
            <summary>
            播放声音
            </summary>
            <param name="fileName"></param>
            <param name="hmod"></param>
            <param name="fdwSound"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.PlaySound(System.String)">
            <summary>
            播放声音
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            读取ini配置
            </summary>
            <param name="section">ini配置节点</param>
            <param name="key">配置键</param>
            <param name="def">默认值</param>
            <param name="retVal">返回值</param>
            <param name="size">大小</param>
            <param name="filePath">配置文件</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.MouseEvent(NRails.MouseEvents,System.Int32,System.Int32)">
            <summary>
            模拟一次鼠标事件 dx和dy指定鼠标坐标系统中的一个绝对位置。在鼠标坐标系统中，屏幕在水平和垂直方向上均匀分割成65535×65535个单元
            </summary>
            <param name="dwEvent">鼠标事件类型</param>
            <param name="dx">当dwEvent为MouseEvents.MOVE时,设置鼠标移动的X偏移量</param>
            <param name="dy">当dwEvent为MouseEvents.MOVE时,设置鼠标移动的Y偏移量</param>
        </member>
        <member name="M:NRails.Native.MouseEvent(System.IntPtr,NRails.MouseEvents,System.Int32,System.Int32,System.Int32)">
            <summary>
            对指定窗口模拟一次鼠标事件
            </summary>
            <param name="wnd">窗体句柄</param>
            <param name="flag">模拟类型</param>
            <param name="x">模拟位置的X坐标</param>
            <param name="y">模拟位置的Y坐标</param>
            <param name="z">模拟滚轮的参数</param>
        </member>
        <member name="M:NRails.Native.keybd_event(System.Windows.Forms.Keys,System.Byte,NRails.KeyEvents,System.UInt32)">
            <summary>
            模拟一个键盘动作
            </summary>
            <param name="bVk">需要模拟的按键</param>
            <param name="bScan">模拟按键的扫描码</param>
            <param name="dwFlags">模拟按键的类型</param>
            <param name="dwExtraInfo">通常不用的一个值。api函数GetMessageExtraInfo可取得这个值。允许使用的值取决于特定的驱动程序</param>
        </member>
        <member name="M:NRails.Native.KeyEvent(System.Windows.Forms.Keys,NRails.KeyEvents)">
            <summary>
            模拟一个键盘动作
            </summary>
            <param name="key">需要模拟的按键</param>
            <param name="keyEvent">模拟按键的类型</param>
        </member>
        <member name="M:NRails.Native.KeyEvent(System.IntPtr,System.Windows.Forms.Keys,NRails.KeyEvents)">
            <summary>
            对指定窗口模拟按键消息
            </summary>
            <param name="wnd"></param>
            <param name="key"></param>
            <param name="flag"></param>
        </member>
        <member name="M:NRails.Native.MakeLParam(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="LoWord"></param>
            <param name="HiWord"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.GetClassName(System.IntPtr)">
            <summary>
            获取指定窗口的类名
            </summary>
            <param name="wnd"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            获取指定窗口的类名
            </summary>
            <param name="wnd">目标窗口</param>
            <param name="buf">用于存储类名的字符串</param>
            <param name="nMaxCount">最大字符数量</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.IsWindowExists(System.IntPtr)">
            <summary>
            判断指定句柄的窗口是否存在
            </summary>
            <param name="wnd"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NRails.Native.CreateFile(System.String,NRails.DesiredAccess,System.IO.FileShare,System.Int32,System.IO.FileMode,System.Int32,System.Int32)" -->
        <member name="M:NRails.Native.GetSystemInfo(System.IntPtr)">
            <summary>
            读取获取系统基本信息
            </summary>
            <param name="lpSystemInfo"></param>
        </member>
        <member name="M:NRails.Native.CancelIo(System.IntPtr)">
            <summary>
            取消所有在指定句柄上未决的IO操作
            </summary>
            <param name="hFile">句柄</param>
        </member>
        <member name="M:NRails.Native.SetCursorPos(System.Int32,System.Int32)">
            <summary>
            设置鼠标指针的位置
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.AllocConsole">
            <summary>
            为当前进程分配一个控制台窗口
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.FreeConsole">
            <summary>
            释放当前进程的控制台窗口
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.SetCursorPos(System.Drawing.Point)">
            <summary>
            设置鼠标指针的位置
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:NRails.Native.GetCursorPos(System.Drawing.Point@)">
            <summary>
            获取当前鼠标的位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.GetCursorPos">
            <summary>
            获取当前鼠标的位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            获取指定窗口的标题
            </summary>
            <param name="wnd"></param>
            <param name="buf"></param>
            <param name="nMaxCount"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.GetWindowText(System.IntPtr)">
            <summary>
            获取指定窗口的标题
            </summary>
            <param name="wnd"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.GetWindowRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
            获取指定窗体的矩阵大小
            由于System.Drawing.Rectangle中没有Right和Bottom的定义，API将其Width和Height作为对应的存储单元，
            如果需要使用该API请调用重载方法
            </summary>
            <param name="wnd"></param>
            <param name="rc"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.SetEnvironmentVariable(System.String,System.String)">
            <summary>
            设置系统变量
            </summary>
            <param name="lpName"></param>
            <param name="lpValue"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.SetForegroundWindow(System.IntPtr)">
            <summary>
            设置当前活动窗口为wnd
            </summary>
            <param name="wnd"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.GetForegroundWindow">
            <summary>
            返回当前系统活动窗口的句柄
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.DrawFocusRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
            在指定对象的设备场景上画出一个橡皮筋选择框，由于Window.Drawing.Rectangle中没有保存right和bottom，API将width视为right，将height视为bottom，因此该方法将隐藏，需要请调用重载方法
            </summary>
            <param name="hdc">指定的设备场景</param>
            <param name="lpRect">选择框的矩形</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.GetWindowAt(System.Drawing.Point)">
            <summary>
            返回包含了指定点的窗口的句柄
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.DrawFocusRect(System.IntPtr,System.Drawing.Rectangle)">
            <summary>
            在指定句柄的窗口场景上画出一个橡皮筋选择框
            </summary>
            <param name="wnd"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NRails.Native.DrawFocusRect(System.IntPtr,System.Drawing.RectangleF)">
            <summary>
            在指定句柄的窗口场景上画出一个橡皮筋选择框
            </summary>
            <param name="wnd"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NRails.Native.DrawFocusRect(System.IntPtr,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            在指定句柄的窗口场景上画出一个橡皮筋选择框
            </summary>
            <param name="wnd"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NRails.Native.DrawFocusRect(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            在指定句柄的窗口场景上画出一个橡皮筋选择框
            </summary>
            <param name="wnd"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NRails.Native.DrawFocusRect(System.IntPtr,System.Drawing.Rectangle,System.Int32)">
            <summary>
            绘制焦点矩形
            </summary>
            <param name="wnd"></param>
            <param name="rect"></param>
            <param name="borderWidth"></param>
        </member>
        <member name="M:NRails.Native.GetDC(System.IntPtr)">
            <summary>
            获取指定窗口的设备场景，使用完场景之后一定要用ReleaseDC函数释放，不能用DeleteDC
            </summary>
            <param name="wnd">将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            释放由调用GetDC或GetWindowDC函数获取的指定设备场景。它对类或私有设备场景无效（但这样的调用不会造成损害）
            </summary>
            <param name="wnd">要释放的设备场景相关的窗口句柄</param>
            <param name="hdc">要释放的设备场景句柄</param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.GetWindowDC(System.IntPtr)">
            <summary>
            获取整个窗口的设备场景，在.Net中，我们可以使用Graphics.FromHdc函数返回作图对象，在使用完之后请调用ReleaseDC释放场景
            </summary>
            <param name="wnd"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.ReviseCSRectangle(System.Drawing.Rectangle@)">
            <summary>
            将一个C#矩阵转换为API矩形
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:NRails.Native.ReviseAPIRectangle(System.Drawing.Rectangle@)">
            <summary>
            将一个API矩阵转换为C#矩形
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:NRails.Native.GetWindowRect(System.IntPtr)">
            <summary>
            获取指定窗体的矩阵大小
            </summary>
            <param name="wnd"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.GetCursorPos(System.IntPtr)">
            <summary>
            返回鼠标光标目前位于该窗体的位置
            </summary>
            <param name="wnd"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.Native.CreateIoCompletionPort(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            创建或者绑定完成端口句柄
            </summary>
            <param name="FileHandle">需要绑定的句柄，如果为INVALID_HANDLE_VALUE时，意为创建一个完成端口</param>
            <param name="ExistingCompletionPort">已存在的完成端口句柄，当hFile为INVALID_HANDLE_VALUE时必须为NULL</param>
            <param name="CompletionKey">完成键，用于在GetQueuedCompletionStatus的时候传递参数，当hFile为INVALID_HANDLE_VALUE时必须为NULL</param>
            <param name="NumberOfConcurrentThreads">最大可以允许运行的线程数,通常情况下，该值设置为CPU个数的2倍</param>
            <returns></returns>
        </member>
        <member name="T:NRails.Native.WinStates">
            <summary>
            表示窗口显示模式 省略了SW_
            </summary>
        </member>
        <member name="F:NRails.Native.WinStates.Hide">
            <summary>
            隐藏窗口，活动状态给另外一个窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinStates.NormalActived">
            <summary>
            用原来的大小和位置显示一个窗口，同时令其进入活动状态
            </summary>
        </member>
        <member name="F:NRails.Native.WinStates.MinActived">
            <summary>
            最小化窗口并设置为活动窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinStates.MaxActived">
            <summary>
            最大化窗口，并将其激活
            </summary>
        </member>
        <member name="F:NRails.Native.WinStates.Show">
            <summary>
            用当前的大小和位置显示一个窗口，同时令其进入活动状态
            </summary>
        </member>
        <member name="F:NRails.Native.WinStates.MinNoActived">
            <summary>
            最小化一个窗口，同时不改变活动窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinStates.NormalNoActived">
            <summary>
            用当前的大小和位置显示一个窗口，不改变活动窗口
            </summary>
        </member>
        <member name="F:NRails.Native.WinStates.Restore">
            <summary>
            用原来的大小和位置显示一个窗口，同时令其进入活动状态
            </summary>
        </member>
        <member name="T:NRails.Warp">
            <summary>
            表示路径的歪曲类型
            </summary>
        </member>
        <member name="F:NRails.Warp.Flat">
            <summary>
            平的
            </summary>
        </member>
        <member name="F:NRails.Warp.Concavo">
            <summary>
            凹进去的
            </summary>
        </member>
        <member name="F:NRails.Warp.Convex">
            <summary>
            凸出来的
            </summary>
        </member>
        <member name="T:NRails.PointPolygonRelation">
            <summary>
            表示点和面的关系
            </summary>
        </member>
        <member name="F:NRails.PointPolygonRelation.InPolygon">
            <summary>
            点在面内
            </summary>
        </member>
        <member name="F:NRails.PointPolygonRelation.OnPolygonBorder">
            <summary>
            点在边上
            </summary>
        </member>
        <member name="F:NRails.PointPolygonRelation.OutOfPolygon">
            <summary>
            点在面外
            </summary>
        </member>
        <member name="F:NRails.PointPolygonRelation.OnPolygonVertex">
            <summary>
            点在面的拐点上
            </summary>
        </member>
        <member name="F:NRails.LinePolygonRelation.None">
            <summary>
            互不干涉
            </summary>
        </member>
        <member name="F:NRails.LinePolygonRelation.Tangential">
            <summary>
            相切
            </summary>
        </member>
        <member name="F:NRails.LinePolygonRelation.Intersect">
            <summary>
            相交
            </summary>
        </member>
        <member name="F:NRails.LinePolygonRelation.InPolygon">
            <summary>
            在面内(假如线段时)
            </summary>
        </member>
        <member name="T:NRails.KeyEvents">
            <summary>
            表示键盘事件类型
            </summary>
        </member>
        <member name="F:NRails.KeyEvents.KeyUp">
            <summary>
            模拟键盘建抬起
            </summary>
        </member>
        <member name="F:NRails.KeyEvents.KeyDown">
            <summary>
            模拟键盘健按下
            </summary>
        </member>
        <member name="T:NRails.MouseEvents">
            <summary>
            表示鼠标事件类型
            </summary>
        </member>
        <member name="F:NRails.MouseEvents.LeftDown">
            <summary>
            模拟鼠标左键按下
            </summary>
        </member>
        <member name="F:NRails.MouseEvents.LeftUp">
            <summary>
            模拟鼠标左键抬起
            </summary>
        </member>
        <member name="F:NRails.MouseEvents.MidDown">
            <summary>
            模拟鼠标中键按下
            </summary>
        </member>
        <member name="F:NRails.MouseEvents.MidUp">
            <summary>
            模拟鼠标中键抬起
            </summary>
        </member>
        <member name="F:NRails.MouseEvents.RightDown">
            <summary>
            模拟鼠标右键按下
            </summary>
        </member>
        <member name="F:NRails.MouseEvents.RightUp">
            <summary>
            模拟鼠标右键抬起
            </summary>
        </member>
        <member name="F:NRails.MouseEvents.Move">
            <summary>
            移动鼠标
            </summary>
        </member>
        <member name="F:NRails.MouseEvents.ABSOLUTE">
            <summary>
            dx和dy指定鼠标坐标系统中的一个绝对位置。在鼠标坐标系统中，屏幕在水平和垂直方向上均匀分割成65535×65535个单元
            </summary>
        </member>
        <member name="T:NRails.SYSTEM_INFO">
            <summary>
            系统信息结构
            </summary>
        </member>
        <member name="F:NRails.SYSTEM_INFO.dwOemId">
            <summary>
            保留
            </summary>
        </member>
        <member name="F:NRails.SYSTEM_INFO.dwPageSize">
            <summary>
            The page size and the granularity of page protection and commitment. This is the page size used by the VirtualAlloc function
            </summary>
        </member>
        <member name="F:NRails.SYSTEM_INFO.dwNumberOfProcessors">
            <summary>
            处理器个数
            </summary>
        </member>
        <member name="F:NRails.SYSTEM_INFO.dwProcessorType">
            <summary>
            处理器类型
            </summary>
        </member>
        <member name="T:NRails.DesiredAccess">
            <summary>
            读写方式
            </summary>
        </member>
        <member name="F:NRails.DesiredAccess.GENERIC_ALL">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.DesiredAccess.GENERIC_EXECUTE">
            <summary>
            
            </summary>
        </member>
        <member name="F:NRails.DesiredAccess.GENERIC_READ">
             <summary>
             写标志 
            </summary> 
        </member>
        <member name="F:NRails.DesiredAccess.GENERIC_WRITE">
             <summary>
             读标志 
            </summary> 
        </member>
        <member name="F:NRails.DesiredAccess.GENERIC_READ_WRITE">
            <summary>
            读写方式
            </summary>
        </member>
        <member name="T:NRails.WinMessage">
            <summary>
            表示一个应用程序消息
            </summary>
        </member>
        <member name="P:NRails.IProxyObject.ProxiedObject">
            <summary>
            获取被代理的对象
            </summary>
        </member>
        <member name="M:NRails.SystemTypes.GetSize(System.Type,System.Boolean)">
            <summary>
            返回指定类型的数据长度，如果返回-1 则表示该数据类型没有一个固定长度
            </summary>
            <param name="type"></param>
            <param name="errorThrow">true=无法测算大小时抛出异常</param>
            <returns></returns>
        </member>
        <member name="M:NRails.SystemTypes.GetSize(NRails.SystemTypesEnum)">
            <summary>
            返回指定类型的数据长度，如果返回-1 则表示该数据类型没有一个固定长度
            </summary>
            <param name="typeEnum"></param>
            <returns></returns>
        </member>
        <member name="T:NRails.ST">
            <summary>
            SystemTypes的缩写
            </summary>
        </member>
        <member name="T:NRails.Date.DateTimeHelper">
            <summary>
            时间扩展类
            </summary>
        </member>
        <member name="M:NRails.Date.DateTimeHelper.GetThisDay(System.DateTime)">
            <summary>
            获取指定时间所在的天
            </summary>
        </member>
        <member name="M:NRails.Date.DateTimeHelper.GetTodayNow(System.DateTime)">
            <summary>
            获取从今天开始到现在的时间段
            </summary>
        </member>
        <member name="M:NRails.Date.DateTimeHelper.GetThisWeek(System.DateTime)">
            <summary>
            获取指定时间所在的周
            </summary>
        </member>
        <member name="M:NRails.Date.DateTimeHelper.GetThisMonth(System.DateTime)">
            <summary>
            获取指定时间所在的月
            </summary>
        </member>
        <member name="M:NRails.Date.DateTimeHelper.GetThisYear(System.DateTime)">
            <summary>
            获取指定时间所在的年
            </summary>
        </member>
        <member name="M:NRails.Date.DateTimeHelper.RemoveTime(System.DateTime)">
            <summary>
            获取一个移除了时间部分的日期, 只保留年,月,日
            </summary>
        </member>
        <member name="M:NRails.Date.DateTimeHelper.ToFormatString(System.DateTime)">
            <summary>
            格式化日期, 输出"yyyy年MM月dd日HH时mm分ss秒"格式
            </summary>
        </member>
        <member name="M:NRails.Date.DateTimeHelper.WeekOfYear(System.DateTime)">
            <summary>
            获取指定日期在一年中的第几周
            </summary>
        </member>
        <member name="M:NRails.Date.DateTimeHelper.Round(System.DateTime)">
            <summary>
            获取离指定时间最近的一天的开始
            </summary>
        </member>
        <member name="T:NRails.Date.TimeSlice">
            <summary>
            时间段类
            </summary>
        </member>
        <member name="P:NRails.Date.TimeSlice.Start">
            <summary>
            获取或设置开始时间
            </summary>
        </member>
        <member name="P:NRails.Date.TimeSlice.End">
            <summary>
            获取或设置结束时间
            </summary>
        </member>
        <member name="M:NRails.Date.TimeSlice.#ctor(System.DateTime,System.DateTime)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:NRails.Date.TimeSlice.In(System.DateTime)">
            <summary>
            判断时间是否在该时间段内
            </summary>
        </member>
        <member name="M:NRails.Date.TimeSlice.MonthBetween">
            <summary>
            取得两个时间段之间的月数
            </summary>
            <returns></returns>
        </member>
        <member name="P:NRails.Date.TimeSlice.Days">
            <summary>
            总天数
            </summary>
        </member>
        <member name="M:NRails.Date.TimeSlice.GetDaysBetween">
            <summary>
            获取时间段内的天, 包含起始天和结束天
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.Date.TimeSlice.SpiltByDay">
            <summary>
            从一个指定的时间段中拆分出以开始时间为头, 结束时间为尾, 中间以天为间隔的日期数组
            </summary>
        </member>
        <member name="M:NRails.Date.TimeSlice.GetDays">
            <summary>
            获取时间段的所有天
            </summary>
        </member>
        <member name="M:NRails.Date.TimeSlice.GetMinutes">
            <summary>
            获取时间段的所有分钟
            </summary>
            <returns></returns>
        </member>
        <member name="T:NRails.Date.Day">
            <summary>
            天
            </summary>
        </member>
        <member name="M:NRails.Date.Day.#ctor(System.DateTime,System.DateTime)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:NRails.Date.Minute">
            <summary>
            分钟
            </summary>
        </member>
        <member name="M:NRails.Date.Minute.#ctor(System.DateTime,System.DateTime)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:NRails.Date.Week">
            <summary>
            周
            </summary>
        </member>
        <member name="M:NRails.Date.Week.#ctor(System.DateTime,System.DateTime)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:NRails.Date.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="M:NRails.Date.Month.#ctor(System.DateTime,System.DateTime)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:NRails.Date.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="M:NRails.Date.Year.#ctor(System.DateTime,System.DateTime)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:NRails.LanguageManager.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:NRails.LogHelper.ResetLogger">
            <summary>
            重新从配置文件读取日志记录器
            </summary>
        </member>
        <member name="M:NRails.LogHelper.Debug(System.String,System.Object[])">
            <summary>
            调试日志, 开发时使用, 发布后无效
            </summary>
        </member>
        <member name="M:NRails.LogHelper.System(System.String,System.Object[])">
            <summary>
            系统日志
            </summary>
        </member>
        <member name="M:NRails.LogHelper.Log(NRails.LogType,System.String,System.Object[])">
            <summary>
            可配置写到指定文件中
            </summary>
        </member>
        <member name="M:NRails.LogHelper.Error(System.Exception,System.String,System.Object[])">
            <summary>
            异常日志
            </summary>
        </member>
        <member name="M:NRails.LogHelper.Error(System.Exception)">
            <summary>
            异常日志
            </summary>
        </member>
        <member name="M:NRails.LogHelper.Trace(System.String,System.Object[])">
            <summary>
            跟踪日志, 用于监控程序性能等指标
            </summary>
        </member>
        <member name="M:NRails.LogHelper.Info(System.String,System.Object[])">
            <summary>
            普通的操作日志
            </summary>
        </member>
        <member name="M:NRails.LogHelper.RegistExceptionHandler">
            <summary>
            注册错误日志输出，当应用程序发生未处理的异常时，将会被捕获
            </summary>
        </member>
        <member name="T:NRails.LogType">
            <summary>
            日子类型
            </summary>
        </member>
        <member name="M:NRails.NRailsContext.#ctor(System.Web.HttpContext)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:NRails.EnumHelper">
            <summary>
            枚举操作辅助类
            </summary>
        </member>
        <member name="M:NRails.EnumHelper.GetEnumNameDic``1">
            <summary>
            返回枚举对象的名称列表
            </summary>
            <typeparam name="T">枚举类型</typeparam>
        </member>
        <member name="M:NRails.EnumHelper.GetEnumNameList(System.Type)">
            <summary>
            返回枚举对象的名称列表
            </summary>
            <typeparam name="T">枚举类型</typeparam>
        </member>
        <member name="M:NRails.EnumHelper.GetEnumNameList``1">
            <summary>
            返回枚举对象的名称列表
            </summary>
            <typeparam name="T">枚举类型</typeparam>
        </member>
        <member name="M:NRails.EnumHelper.GetEnumNameList(System.Type,System.String,System.String)">
            <summary>
            删除名称为deleteItem的项
            </summary>
            <param name="type"></param>
            <param name="deleteItem"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.EnumHelper.GetEnumNameDic(System.Type)">
            <summary>
            返回枚举对象的名称列表
            </summary>
            <typeparam name="T">枚举类型</typeparam>
        </member>
        <member name="M:NRails.EnumHelper.TryParse(System.String,System.Type,System.Object@,System.Boolean)">
            <summary>
            尝试将一个字符串转换为枚举类型
            </summary>
            <param name="name">枚举名称</param>
            <param name="enumType">枚举类型</param>
            <param name="res">结果输出</param>
            <param name="ignoreCase">true=忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:NRails.EnumHelper.GetLastEnum``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NRails.EnumHelper.GetByName``1(System.String)">
            <summary>
            根据枚举名称来获取枚举
            </summary>
        </member>
        <member name="M:NRails.EnumHelper.TryParse``1(System.String,``0@,System.Boolean)">
            <summary>
            将一个字符串转换为枚举类型
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="name">枚举名称</param>
            <param name="ignoreCase">true=忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:NRails.EnumHelper.Parse``1(System.String,System.Boolean)">
            <summary>
            将一个字符串转换为枚举类型
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="name">枚举名称</param>
            <param name="ignoreCase">true=忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:NRails.EnvironmentHelper.CreateRootDirectory">
            <summary>
            返回程序运行目录, 最后不包括"\"
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.EnvironmentHelper.GetSpace(NRails.DiskSymbol)">
             <summary> 
            获取指定驱动器的空间总大小(单位为B) 
             </summary> 
             <param name="diskSymbol">只需输入代表驱动器的字母即可 </param> 
             <returns> </returns> 
        </member>
        <member name="M:NRails.EnvironmentHelper.GetFreeSpace(NRails.DiskSymbol)">
             <summary> 
            获取指定驱动器的剩余空间总大小(单位为B) 
             </summary> 
             <param name="str_HardDiskName">只需输入代表驱动器的字母即可 </param> 
             <returns> </returns> 
        </member>
        <member name="M:NRails.EnvironmentHelper.GetFreeSpace(System.String)">
             <summary> 
            获取指定驱动器的剩余空间总大小(单位为B) 
             </summary> 
             <param name="str_HardDiskName">只需输入代表驱动器的字母即可 </param> 
             <returns> </returns> 
        </member>
        <member name="P:NRails.EnvironmentHelper.OSVersion">
            <summary>
            返回当前操作系统版本
            </summary>
        </member>
        <member name="P:NRails.EnvironmentHelper.IsCurrentAppRunning">
            <summary>
            true=当前应用程序已经在运行
            </summary>
        </member>
        <member name="M:NRails.EnvironmentHelper.KillCurrentAppProcess">
            <summary>
            杀死当前应用程序的其他进程实例
            </summary>
        </member>
        <member name="M:NRails.EnvironmentHelper.GetCpuID">
            <summary>
            获取CpuId
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.EnvironmentHelper.GetIPAddress">
            <summary>
            获取所有IP地址列表
            </summary>
            <returns></returns>
        </member>
        <member name="P:NRails.EnvironmentHelper.IsConsoleApplication">
            <summary>
            获取当前正在运行的程序是否为控制台程序
            </summary>
        </member>
        <member name="M:NRails.EnvironmentHelper.SetCookiePath(System.String)">
            <summary>
            设置系统Cookie路径
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NRails.EnvironmentHelper.RestoreCookiePath">
            <summary>
            重置系统Cookie路径为默认值
            </summary>
        </member>
        <member name="M:NRails.EnvironmentHelper.RestartWindows(System.Int32)">
            <summary>
            尝试在N秒后重启Windows
            </summary>
            <param name="delaySecs">延迟时间，单位：秒</param>
        </member>
        <member name="M:NRails.EnvironmentHelper.CancelRestartWindows">
            <summary>
            取消重启系统的任务
            </summary>
        </member>
        <member name="M:NRails.EnvironmentHelper.Is32BitProcess">
            <summary>
            判定当前进程是否为32位进程
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.EnvironmentHelper.Is64BitProcess">
            <summary>
            判定当前进程是否为64位进程
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRails.EnvironmentHelper.KillCurrentProcess(System.Boolean)">
            <summary>
            杀死当前进程
            </summary>
        </member>
        <member name="M:NRails.EnvironmentHelper.KillProcess(System.String)">
            <summary>
            杀死当前进程
            </summary>
        </member>
        <member name="M:NRails.EnvironmentHelper.GetVolumeId(NRails.DiskSymbol)">
            <summary>
            获取硬盘Id
            </summary>
            <param name="disk"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.EnvironmentHelper.GetVolumeId(System.String)">
            <summary>
            获取硬盘Id
            </summary>
            <param name="disk"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.NRailsException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:NRails.NRailsException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:NRails.NRailsException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:NRails.SimplePinyin.GetPYWord(System.String)">
            <summary>
            汉字拼音(全小写)
            </summary>
        </member>
        <member name="M:NRails.FullPinyin.GetFirstPYLetter(System.String)">
            <summary>
            从字符串中获取汉字拼音首字母，不是汉字则原样输出
            </summary>
            <param name="hz"></param>
            <returns></returns>
        </member>
        <member name="M:NRails.FullPinyin.GetAllPYLetters(System.String)">
            <summary>
            把汉字转换成拼音(全拼)
            </summary>
            <param name="hzString">汉字字符串</param>
            <returns>转换后的拼音(全拼)字符串</returns>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             internal class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            internal class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            internal class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            internal class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:NLog.Common.AsyncContinuation">
            <summary>
            Asynchronous continuation delegate - function invoked at the end of asynchronous
            processing.
            </summary>
            <param name="exception">Exception during asynchronous processing or null if no exception
            was thrown.</param>
        </member>
        <member name="T:NLog.Common.AsyncHelpers">
            <summary>
            Helpers for asynchronous operations.
            </summary>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.ForEachItemSequentially``1(System.Collections.Generic.IEnumerable{``0},NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction{``0})">
            <summary>
            Iterates over all items in the given collection and runs the specified action
            in sequence (each action executes only after the preceding one has completed without an error).
            </summary>
            <typeparam name="T">Type of each item.</typeparam>
            <param name="items">The items to iterate.</param>
            <param name="asyncContinuation">The asynchronous continuation to invoke once all items
            have been iterated.</param>
            <param name="action">The action to invoke for each item.</param>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.Repeat(System.Int32,NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction)">
            <summary>
            Repeats the specified asynchronous action multiple times and invokes asynchronous continuation at the end.
            </summary>
            <param name="repeatCount">The repeat count.</param>
            <param name="asyncContinuation">The asynchronous continuation to invoke at the end.</param>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.PrecededBy(NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction)">
            <summary>
            Modifies the continuation by pre-pending given action to execute just before it.
            </summary>
            <param name="asyncContinuation">The async continuation.</param>
            <param name="action">The action to pre-pend.</param>
            <returns>Continuation which will execute the given action before forwarding to the actual continuation.</returns>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.WithTimeout(NLog.Common.AsyncContinuation,System.TimeSpan)">
            <summary>
            Attaches a timeout to a continuation which will invoke the continuation when the specified
            timeout has elapsed.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeout">The timeout.</param>
            <returns>Wrapped continuation.</returns>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.ForEachItemInParallel``1(System.Collections.Generic.IEnumerable{``0},NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction{``0})">
            <summary>
            Iterates over all items in the given collection and runs the specified action
            in parallel (each action executes on a thread from thread pool).
            </summary>
            <typeparam name="T">Type of each item.</typeparam>
            <param name="values">The items to iterate.</param>
            <param name="asyncContinuation">The asynchronous continuation to invoke once all items
            have been iterated.</param>
            <param name="action">The action to invoke for each item.</param>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.RunSynchronously(NLog.Common.AsynchronousAction)">
            <summary>
            Runs the specified asynchronous action synchronously (blocks until the continuation has
            been invoked).
            </summary>
            <param name="action">The action.</param>
            <remarks>
            Using this method is not recommended because it will block the calling thread.
            </remarks>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.PreventMultipleCalls(NLog.Common.AsyncContinuation)">
            <summary>
            Wraps the continuation with a guard which will only make sure that the continuation function
            is invoked only once.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <returns>Wrapped asynchronous continuation.</returns>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.GetCombinedException(System.Collections.Generic.IList{System.Exception})">
            <summary>
            Gets the combined exception from all exceptions in the list.
            </summary>
            <param name="exceptions">The exceptions.</param>
            <returns>Combined exception or null if no exception was thrown.</returns>
        </member>
        <member name="T:NLog.Common.AsynchronousAction">
            <summary>
            Asynchronous action.
            </summary>
            <param name="asyncContinuation">Continuation to be invoked at the end of action.</param>
        </member>
        <member name="T:NLog.Common.AsynchronousAction`1">
            <summary>
            Asynchronous action with one argument.
            </summary>
            <typeparam name="T">Type of the argument.</typeparam>
            <param name="argument">Argument to the action.</param>
            <param name="asyncContinuation">Continuation to be invoked at the end of action.</param>
        </member>
        <member name="T:NLog.Common.AsyncLogEventInfo">
            <summary>
            Represents the logging event with asynchronous continuation.
            </summary>
        </member>
        <member name="M:NLog.Common.AsyncLogEventInfo.#ctor(NLog.LogEventInfo,NLog.Common.AsyncContinuation)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Common.AsyncLogEventInfo"/> struct.
            </summary>
            <param name="logEvent">The log event.</param>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="P:NLog.Common.AsyncLogEventInfo.LogEvent">
            <summary>
            Gets the log event.
            </summary>
        </member>
        <member name="P:NLog.Common.AsyncLogEventInfo.Continuation">
            <summary>
            Gets the continuation.
            </summary>
        </member>
        <member name="M:NLog.Common.AsyncLogEventInfo.op_Equality(NLog.Common.AsyncLogEventInfo,NLog.Common.AsyncLogEventInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="eventInfo1">The event info1.</param>
            <param name="eventInfo2">The event info2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NLog.Common.AsyncLogEventInfo.op_Inequality(NLog.Common.AsyncLogEventInfo,NLog.Common.AsyncLogEventInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="eventInfo1">The event info1.</param>
            <param name="eventInfo2">The event info2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NLog.Common.AsyncLogEventInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            A value of <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Common.AsyncLogEventInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:NLog.Common.InternalLogger">
            <summary>
            NLog internal logger.
            
            Writes to file, console or custom textwriter (see <see cref="P:NLog.Common.InternalLogger.LogWriter"/>)
            </summary>
            <remarks>
            Don't use <see cref="M:NLog.Internal.ExceptionHelper.MustBeRethrown(System.Exception)"/> as that can lead to recursive calls - stackoverflows
            </remarks>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether internal log includes Trace messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether internal log includes Debug messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether internal log includes Info messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether internal log includes Warn messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether internal log includes Error messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether internal log includes Fatal messages.
            </summary>
        </member>
        <member name="M:NLog.Common.InternalLogger.Trace(System.String,System.Object[])">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Trace level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Trace(System.String)">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Trace level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Trace level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Trace(System.Exception,System.String)">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Trace level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Debug level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Debug(System.String)">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Debug level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Debug level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Debug(System.Exception,System.String)">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Debug level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Info(System.String,System.Object[])">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Info level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Info(System.String)">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Info level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Info level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Info(System.Exception,System.String)">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Info level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Warn(System.String,System.Object[])">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Warn level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Warn(System.String)">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Warn level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Warn level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Warn(System.Exception,System.String)">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Warn level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Error(System.String,System.Object[])">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Error level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Error(System.String)">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Error level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Error level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Error(System.Exception,System.String)">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Error level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Fatal(System.String,System.Object[])">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Fatal level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Fatal(System.String)">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Fatal level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Fatal level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Fatal(System.Exception,System.String)">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Fatal level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.#cctor">
            <summary>
            Initializes static members of the InternalLogger class.
            </summary>
        </member>
        <member name="M:NLog.Common.InternalLogger.Reset">
            <summary>
            Set the config of the InternalLogger with defaults and config.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogLevel">
            <summary>
            Gets or sets the minimal internal log level. 
            </summary>
            <example>If set to <see cref="F:NLog.LogLevel.Info"/>, then messages of the levels <see cref="F:NLog.LogLevel.Info"/>, <see cref="F:NLog.LogLevel.Error"/> and <see cref="F:NLog.LogLevel.Fatal"/> will be written.</example>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogToConsole">
            <summary>
            Gets or sets a value indicating whether internal messages should be written to the console output stream.
            </summary>
            <remarks>Your application must be a console application.</remarks>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogToConsoleError">
            <summary>
            Gets or sets a value indicating whether internal messages should be written to the console error stream.
            </summary>
            <remarks>Your application must be a console application.</remarks>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogToTrace">
            <summary>
            Gets or sets a value indicating whether internal messages should be written to the <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogFile">
            <summary>
            Gets or sets the file path of the internal log file.
            </summary>
            <remarks>A value of <see langword="null" /> value disables internal logging to a file.</remarks>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogWriter">
            <summary>
            Gets or sets the text writer that will receive internal logs.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IncludeTimestamp">
            <summary>
            Gets or sets a value indicating whether timestamp should be included in internal log output.
            </summary>
        </member>
        <member name="M:NLog.Common.InternalLogger.Log(NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the specified level.
            </summary>
            <param name="level">Log level.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Log(NLog.LogLevel,System.String)">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the specified level.
            </summary>
            <param name="level">Log level.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Log(System.Exception,NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the specified level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="level">Log level.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Log(System.Exception,NLog.LogLevel,System.String)">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the specified level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="level">Log level.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Write(System.Exception,NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Write to internallogger.
            </summary>
            <param name="ex">optional exception to be logged.</param>
            <param name="level">level</param>
            <param name="message">message</param>
            <param name="args">optional args for <paramref name="message"/></param>
        </member>
        <member name="M:NLog.Common.InternalLogger.IsSeriousException(System.Exception)">
            <summary>
            Determine if logging should be avoided because of exception type. 
            </summary>
            <param name="exception">The exception to check.</param>
            <returns><c>true</c> if logging should be avoided; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NLog.Common.InternalLogger.LoggingEnabled(NLog.LogLevel)">
            <summary>
            Determine if logging is enabled.
            </summary>
            <param name="logLevel">The <see cref="P:NLog.Common.InternalLogger.LogLevel"/> for the log event.</param>
            <returns><c>true</c> if logging is enabled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NLog.Common.InternalLogger.WriteToTrace(System.String)">
            <summary>
            Write internal messages to the <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
            <param name="message">A message to write.</param>
            <remarks>
            Works when property <see cref="P:NLog.Common.InternalLogger.LogToTrace"/> set to true.
            The <see cref="T:System.Diagnostics.Trace"/> is used in Debug and Relese configuration. 
            The <see cref="T:System.Diagnostics.Debug"/> works only in Debug configuration and this is reason why is replaced by <see cref="T:System.Diagnostics.Trace"/>.
            in DEBUG 
            </remarks>
        </member>
        <member name="M:NLog.Common.InternalLogger.LogAssemblyVersion(System.Reflection.Assembly)">
            <summary>
            Logs the assembly version and file version of the given Assembly.
            </summary>
            <param name="assembly">The assembly to log.</param>
        </member>
        <member name="T:NLog.Common.LogEventInfoBuffer">
            <summary>
            A cyclic buffer of <see cref="T:NLog.LogEventInfo"/> object.
            </summary>
        </member>
        <member name="M:NLog.Common.LogEventInfoBuffer.#ctor(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Common.LogEventInfoBuffer" /> class.
            </summary>
            <param name="size">Buffer size.</param>
            <param name="growAsNeeded">Whether buffer should grow as it becomes full.</param>
            <param name="growLimit">The maximum number of items that the buffer can grow to.</param>
        </member>
        <member name="P:NLog.Common.LogEventInfoBuffer.Size">
            <summary>
            Gets the number of items in the array.
            </summary>
        </member>
        <member name="M:NLog.Common.LogEventInfoBuffer.Append(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Adds the specified log event to the buffer.
            </summary>
            <param name="eventInfo">Log event.</param>
            <returns>The number of items in the buffer.</returns>
        </member>
        <member name="M:NLog.Common.LogEventInfoBuffer.GetEventsAndClear">
            <summary>
            Gets the array of events accumulated in the buffer and clears the buffer as one atomic operation.
            </summary>
            <returns>Events in the buffer.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionEvaluationException">
            <summary>
            Exception during evaluation of condition expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:NLog.Conditions.ConditionMethodAttribute">
            <summary>
            Marks class as a log event Condition and assigns a name to it.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionMethodAttribute" /> class.
            </summary>
            <param name="name">Condition method name.</param>
        </member>
        <member name="T:NLog.Conditions.ConditionMethodsAttribute">
            <summary>
            Marks the class as containing condition methods.
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionAndExpression">
            <summary>
            Condition <b>and</b> expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionAndExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionAndExpression" /> class.
            </summary>
            <param name="left">Left hand side of the AND expression.</param>
            <param name="right">Right hand side of the AND expression.</param>
        </member>
        <member name="P:NLog.Conditions.ConditionAndExpression.Left">
            <summary>
            Gets the left hand side of the AND expression.
            </summary>
        </member>
        <member name="P:NLog.Conditions.ConditionAndExpression.Right">
            <summary>
            Gets the right hand side of the AND expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionAndExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>A concatenated '(Left) and (Right)' string.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionAndExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression by evaluating <see cref="P:NLog.Conditions.ConditionAndExpression.Left"/> and <see cref="P:NLog.Conditions.ConditionAndExpression.Right"/> recursively.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The value of the conjunction operator.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionExpression">
            <summary>
            Base class for representing nodes in condition expression trees.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.op_Implicit(System.String)~NLog.Conditions.ConditionExpression">
            <summary>
            Converts condition text to a condition expression tree.
            </summary>
            <param name="conditionExpressionText">Condition text to be converted.</param>
            <returns>Condition expression tree.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.Evaluate(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionLayoutExpression">
            <summary>
            Condition layout expression (represented by a string literal
            with embedded ${}).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLayoutExpression.#ctor(NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionLayoutExpression" /> class.
            </summary>
            <param name="layout">The layout.</param>
        </member>
        <member name="P:NLog.Conditions.ConditionLayoutExpression.Layout">
            <summary>
            Gets the layout.
            </summary>
            <value>The layout.</value>
        </member>
        <member name="M:NLog.Conditions.ConditionLayoutExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>String literal in single quotes.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLayoutExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression by calculating the value
            of the layout in the specified evaluation context.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The value of the layout.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionLevelExpression">
            <summary>
            Condition level expression (represented by the <b>level</b> keyword).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLevelExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>The '<b>level</b>' string.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLevelExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates to the current log level.
            </summary>
            <param name="context">Evaluation context. Ignored.</param>
            <returns>The <see cref="T:NLog.LogLevel"/> object representing current log level.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionLiteralExpression">
            <summary>
            Condition literal expression (numeric, <b>LogLevel.XXX</b>, <b>true</b> or <b>false</b>).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLiteralExpression.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionLiteralExpression" /> class.
            </summary>
            <param name="literalValue">Literal value.</param>
        </member>
        <member name="P:NLog.Conditions.ConditionLiteralExpression.LiteralValue">
            <summary>
            Gets the literal value.
            </summary>
            <value>The literal value.</value>
        </member>
        <member name="M:NLog.Conditions.ConditionLiteralExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>The literal value.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLiteralExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The literal value as passed in the constructor.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionLoggerNameExpression">
            <summary>
            Condition logger name expression (represented by the <b>logger</b> keyword).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLoggerNameExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>A <b>logger</b> string.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLoggerNameExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates to the logger name.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The logger name.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionMessageExpression">
            <summary>
            Condition message expression (represented by the <b>message</b> keyword).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMessageExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>The '<b>message</b>' string.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMessageExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates to the logger message.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The logger message.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionMethodExpression">
            <summary>
            Condition method invocation expression (represented by <b>method(p1,p2,p3)</b> syntax).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodExpression.#ctor(System.String,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{NLog.Conditions.ConditionExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionMethodExpression" /> class.
            </summary>
            <param name="conditionMethodName">Name of the condition method.</param>
            <param name="methodInfo"><see cref="P:NLog.Conditions.ConditionMethodExpression.MethodInfo"/> of the condition method.</param>
            <param name="methodParameters">The method parameters.</param>
        </member>
        <member name="P:NLog.Conditions.ConditionMethodExpression.MethodInfo">
            <summary>
            Gets the method info.
            </summary>
        </member>
        <member name="P:NLog.Conditions.ConditionMethodExpression.MethodParameters">
            <summary>
            Gets the method parameters.
            </summary>
            <value>The method parameters.</value>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionMethods">
            <summary>
            A bunch of utility methods (mostly predicates) which can be used in
            condition expressions. Partially inspired by XPath 1.0.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Equals2(System.Object,System.Object)">
            <summary>
            Compares two values for equality.
            </summary>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns><b>true</b> when two objects are equal, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Equals2(System.String,System.String,System.Boolean)">
            <summary>
            Compares two strings for equality.
            </summary>
            <param name="firstValue">The first string.</param>
            <param name="secondValue">The second string.</param>
            <param name="ignoreCase">Optional. If <c>true</c>, case is ignored; if <c>false</c> (default), case is significant.</param>
            <returns><b>true</b> when two strings are equal, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Gets or sets a value indicating whether the second string is a substring of the first one.
            </summary>
            <param name="haystack">The first string.</param>
            <param name="needle">The second string.</param>
            <param name="ignoreCase">Optional. If <c>true</c> (default), case is ignored; if <c>false</c>, case is significant.</param>
            <returns><b>true</b> when the second string is a substring of the first string, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Gets or sets a value indicating whether the second string is a prefix of the first one.
            </summary>
            <param name="haystack">The first string.</param>
            <param name="needle">The second string.</param>
            <param name="ignoreCase">Optional. If <c>true</c> (default), case is ignored; if <c>false</c>, case is significant.</param>
            <returns><b>true</b> when the second string is a prefix of the first string, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Gets or sets a value indicating whether the second string is a suffix of the first one.
            </summary>
            <param name="haystack">The first string.</param>
            <param name="needle">The second string.</param>
            <param name="ignoreCase">Optional. If <c>true</c> (default), case is ignored; if <c>false</c>, case is significant.</param>
            <returns><b>true</b> when the second string is a prefix of the first string, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Length(System.String)">
            <summary>
            Returns the length of a string.
            </summary>
            <param name="text">A string whose lengths is to be evaluated.</param>
            <returns>The length of the string.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionNotExpression">
            <summary>
            Condition <b>not</b> expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionNotExpression.#ctor(NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionNotExpression" /> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:NLog.Conditions.ConditionNotExpression.Expression">
            <summary>
            Gets the expression to be negated.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="M:NLog.Conditions.ConditionNotExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionNotExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionOrExpression">
            <summary>
            Condition <b>or</b> expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionOrExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionOrExpression" /> class.
            </summary>
            <param name="left">Left hand side of the OR expression.</param>
            <param name="right">Right hand side of the OR expression.</param>
        </member>
        <member name="P:NLog.Conditions.ConditionOrExpression.LeftExpression">
            <summary>
            Gets the left expression.
            </summary>
            <value>The left expression.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionOrExpression.RightExpression">
            <summary>
            Gets the right expression.
            </summary>
            <value>The right expression.</value>
        </member>
        <member name="M:NLog.Conditions.ConditionOrExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionOrExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression by evaluating <see cref="P:NLog.Conditions.ConditionOrExpression.LeftExpression"/> and <see cref="P:NLog.Conditions.ConditionOrExpression.RightExpression"/> recursively.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The value of the alternative operator.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionParseException">
            <summary>
            Exception during parsing of condition expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:NLog.Conditions.ConditionParser">
            <summary>
            Condition parser. Turns a string representation of condition expression
            into an expression tree.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionParser.#ctor(NLog.Internal.SimpleStringReader,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParser"/> class.
            </summary>
            <param name="stringReader">The string reader.</param>
            <param name="configurationItemFactory">Instance of <see cref="T:NLog.Config.ConfigurationItemFactory"/> used to resolve references to condition methods and layout renderers.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionParser.ParseExpression(System.String)">
            <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression"/> tree.
            </summary>
            <param name="expressionText">The expression to be parsed.</param>
            <returns>The root of the expression syntax tree which can be used to get the value of the condition in a specified context.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionParser.ParseExpression(System.String,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression"/> tree.
            </summary>
            <param name="expressionText">The expression to be parsed.</param>
            <param name="configurationItemFactories">Instance of <see cref="T:NLog.Config.ConfigurationItemFactory"/> used to resolve references to condition methods and layout renderers.</param>
            <returns>The root of the expression syntax tree which can be used to get the value of the condition in a specified context.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionParser.ParseExpression(NLog.Internal.SimpleStringReader,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression"/> tree.
            </summary>
            <param name="stringReader">The string reader.</param>
            <param name="configurationItemFactories">Instance of <see cref="T:NLog.Config.ConfigurationItemFactory"/> used to resolve references to condition methods and layout renderers.</param>
            <returns>
            The root of the expression syntax tree which can be used to get the value of the condition in a specified context.
            </returns>
        </member>
        <member name="T:NLog.Conditions.ConditionRelationalExpression">
            <summary>
            Condition relational (<b>==</b>, <b>!=</b>, <b>&lt;</b>, <b>&lt;=</b>,
            <b>&gt;</b> or <b>&gt;=</b>) expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionRelationalOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionRelationalExpression" /> class.
            </summary>
            <param name="leftExpression">The left expression.</param>
            <param name="rightExpression">The right expression.</param>
            <param name="relationalOperator">The relational operator.</param>
        </member>
        <member name="P:NLog.Conditions.ConditionRelationalExpression.LeftExpression">
            <summary>
            Gets the left expression.
            </summary>
            <value>The left expression.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionRelationalExpression.RightExpression">
            <summary>
            Gets the right expression.
            </summary>
            <value>The right expression.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionRelationalExpression.RelationalOperator">
            <summary>
            Gets the relational operator.
            </summary>
            <value>The operator.</value>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.Compare(System.Object,System.Object,NLog.Conditions.ConditionRelationalOperator)">
            <summary>
            Compares the specified values using specified relational operator.
            </summary>
            <param name="leftValue">The first value.</param>
            <param name="rightValue">The second value.</param>
            <param name="relationalOperator">The relational operator.</param>
            <returns>Result of the given relational operator.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionRelationalOperator">
            <summary>
            Relational operators used in conditions.
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.Equal">
            <summary>
            Equality (==).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.NotEqual">
            <summary>
            Inequality (!=).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.Less">
            <summary>
            Less than (&lt;).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.Greater">
            <summary>
            Greater than (&gt;).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.LessOrEqual">
            <summary>
            Less than or equal (&lt;=).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.GreaterOrEqual">
            <summary>
            Greater than or equal (&gt;=).
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionTokenizer">
            <summary>
            Hand-written tokenizer for conditions.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.#ctor(NLog.Internal.SimpleStringReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionTokenizer"/> class.
            </summary>
            <param name="stringReader">The string reader.</param>
        </member>
        <member name="P:NLog.Conditions.ConditionTokenizer.TokenPosition">
            <summary>
            Gets the token position.
            </summary>
            <value>The token position.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionTokenizer.TokenType">
            <summary>
            Gets the type of the token.
            </summary>
            <value>The type of the token.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionTokenizer.TokenValue">
            <summary>
            Gets the token value.
            </summary>
            <value>The token value.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionTokenizer.StringTokenValue">
            <summary>
            Gets the value of a string token.
            </summary>
            <value>The string token value.</value>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.Expect(NLog.Conditions.ConditionTokenType)">
            <summary>
            Asserts current token type and advances to the next token.
            </summary>
            <param name="tokenType">Expected token type.</param>
            <remarks>If token type doesn't match, an exception is thrown.</remarks>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.EatKeyword">
            <summary>
            Asserts that current token is a keyword and returns its value and advances to the next token.
            </summary>
            <returns>Keyword value.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.IsKeyword(System.String)">
            <summary>
            Gets or sets a value indicating whether current keyword is equal to the specified value.
            </summary>
            <param name="keyword">The keyword.</param>
            <returns>
            A value of <c>true</c> if current keyword is equal to the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.IsEOF">
            <summary>
            Gets or sets a value indicating whether the tokenizer has reached the end of the token stream.
            </summary>
            <returns>
            A value of <c>true</c> if the tokenizer has reached the end of the token stream; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.IsNumber">
            <summary>
            Gets or sets a value indicating whether current token is a number.
            </summary>
            <returns>
            A value of <c>true</c> if current token is a number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.IsToken(NLog.Conditions.ConditionTokenType)">
            <summary>
            Gets or sets a value indicating whether the specified token is of specified type.
            </summary>
            <param name="tokenType">The token type.</param>
            <returns>
            A value of <c>true</c> if current token is of specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.GetNextToken">
            <summary>
            Gets the next token and sets <see cref="P:NLog.Conditions.ConditionTokenizer.TokenType"/> and <see cref="P:NLog.Conditions.ConditionTokenizer.TokenValue"/> properties.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.TryGetComparisonToken(System.Char)">
            <summary>
            Try the comparison tokens (greater, smaller, greater-equals, smaller-equals)
            </summary>
            <param name="ch">current char</param>
            <returns>is match</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.TryGetLogicalToken(System.Char)">
            <summary>
            Try the logical tokens (and, or, not, equals)
            </summary>
            <param name="ch">current char</param>
            <returns>is match</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionTokenizer.CharToTokenType">
            <summary>
            Mapping between characters and token types for punctuations.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.CharToTokenType.#ctor(System.Char,NLog.Conditions.ConditionTokenType)">
            <summary>
            Initializes a new instance of the CharToTokenType struct.
            </summary>
            <param name="character">The character.</param>
            <param name="tokenType">Type of the token.</param>
        </member>
        <member name="T:NLog.Conditions.ConditionTokenType">
            <summary>
            Token types for condition expressions.
            </summary>
        </member>
        <member name="T:NLog.Config.AdvancedAttribute">
            <summary>
            Marks the class or a member as advanced. Advanced classes and members are hidden by 
            default in generated documentation.
            </summary>
        </member>
        <member name="M:NLog.Config.AdvancedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.AdvancedAttribute" /> class.
            </summary>
        </member>
        <member name="T:NLog.Config.AppDomainFixedOutputAttribute">
            <summary>
            Identifies that the output of layout or layout render does not change for the lifetime of the current appdomain.
            </summary>
        </member>
        <member name="T:NLog.Config.ConfigurationItemCreator">
            <summary>
            Constructs a new instance the configuration item (target, layout, layout renderer, etc.) given its type.
            </summary>
            <param name="itemType">Type of the item.</param>
            <returns>Created object of the specified type.</returns>
        </member>
        <member name="T:NLog.Config.ConfigurationItemFactory">
            <summary>
            Provides registration information for named items (targets, layouts, layout renderers, etc.) managed by NLog.
            </summary>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.#ctor(System.Reflection.Assembly[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.ConfigurationItemFactory"/> class.
            </summary>
            <param name="assemblies">The assemblies to scan for named items.</param>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.Default">
            <summary>
            Gets or sets default singleton instance of <see cref="T:NLog.Config.ConfigurationItemFactory"/>.
            </summary>
            <remarks>
            This property implements lazy instantiation so that the <see cref="T:NLog.Config.ConfigurationItemFactory"/> is not built before 
            the internal logger is configured.
            </remarks>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.CreateInstance">
            <summary>
            Gets or sets the creator delegate used to instantiate configuration objects.
            </summary>
            <remarks>
            By overriding this property, one can enable dependency injection or interception for created objects.
            </remarks>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.Targets">
            <summary>
            Gets the <see cref="T:NLog.Targets.Target"/> factory.
            </summary>
            <value>The target factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.Filters">
            <summary>
            Gets the <see cref="T:NLog.Filters.Filter"/> factory.
            </summary>
            <value>The filter factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.LayoutRenderers">
            <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.LayoutRenderer"/> factory.
            </summary>
            <value>The layout renderer factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.Layouts">
            <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.LayoutRenderer"/> factory.
            </summary>
            <value>The layout factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.AmbientProperties">
            <summary>
            Gets the ambient property factory.
            </summary>
            <value>The ambient property factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.TimeSources">
            <summary>
            Gets the time source factory.
            </summary>
            <value>The time source factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.ConditionMethods">
            <summary>
            Gets the condition method factory.
            </summary>
            <value>The condition method factory.</value>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.RegisterItemsFromAssembly(System.Reflection.Assembly)">
            <summary>
            Registers named items from the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.RegisterItemsFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Registers named items from the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="itemNamePrefix">Item name prefix.</param>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.Clear">
            <summary>
            Clears the contents of all factories.
            </summary>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.RegisterType(System.Type,System.String)">
            <summary>
            Registers the type.
            </summary>
            <param name="type">The type to register.</param>
            <param name="itemNamePrefix">The item name prefix.</param>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.BuildDefaultFactory">
            <summary>
            Builds the default configuration item factory.
            </summary>
            <returns>Default factory.</returns>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.RegisterExtendedItems">
            <summary>
            Registers items in NLog.Extended.dll using late-bound types, so that we don't need a reference to NLog.Extended.dll.
            </summary>
        </member>
        <member name="T:NLog.Config.ExceptionRenderingFormat">
            <summary>
            Format of the excpetion output to the specific target.
            </summary>
        </member>
        <member name="F:NLog.Config.ExceptionRenderingFormat.Message">
            <summary>
            Appends the Message of an Exception to the specified target.
            </summary>
        </member>
        <member name="F:NLog.Config.ExceptionRenderingFormat.Type">
            <summary>
            Appends the type of an Exception to the specified target.
            </summary>
        </member>
        <member name="F:NLog.Config.ExceptionRenderingFormat.ShortType">
            <summary>
            Appends the short type of an Exception to the specified target.
            </summary>
        </member>
        <member name="F:NLog.Config.ExceptionRenderingFormat.ToString">
            <summary>
            Appends the result of calling ToString() on an Exception to the specified target.
            </summary>
        </member>
        <member name="F:NLog.Config.ExceptionRenderingFormat.Method">
            <summary>
            Appends the method name from Exception's stack trace to the specified target.
            </summary>
        </member>
        <member name="F:NLog.Config.ExceptionRenderingFormat.StackTrace">
            <summary>
            Appends the stack trace from an Exception to the specified target.
            </summary>
        </member>
        <member name="F:NLog.Config.ExceptionRenderingFormat.Data">
            <summary>
            Appends the contents of an Exception's Data property to the specified target.
            </summary>
        </member>
        <member name="T:NLog.Config.Factory`2">
            <summary>
            Factory for class-based items.
            </summary>
            <typeparam name="TBaseType">The base type of each item.</typeparam>
            <typeparam name="TAttributeType">The type of the attribute used to annotate items.</typeparam>
        </member>
        <member name="M:NLog.Config.Factory`2.ScanTypes(System.Type[],System.String)">
            <summary>
            Scans the assembly.
            </summary>
            <param name="types">The types to scan.</param>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="M:NLog.Config.Factory`2.RegisterType(System.Type,System.String)">
            <summary>
            Registers the type.
            </summary>
            <param name="type">The type to register.</param>
            <param name="itemNamePrefix">The item name prefix.</param>
        </member>
        <member name="M:NLog.Config.Factory`2.RegisterNamedType(System.String,System.String)">
            <summary>
            Registers the item based on a type name.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:NLog.Config.Factory`2.Clear">
            <summary>
            Clears the contents of the factory.
            </summary>
        </member>
        <member name="M:NLog.Config.Factory`2.RegisterDefinition(System.String,System.Type)">
            <summary>
            Registers a single type definition.
            </summary>
            <param name="name">The item name.</param>
            <param name="type">The type of the item.</param>
        </member>
        <member name="M:NLog.Config.Factory`2.TryGetDefinition(System.String,System.Type@)">
            <summary>
            Tries to get registered item definition.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="result">Reference to a variable which will store the item definition.</param>
            <returns>Item definition.</returns>
        </member>
        <member name="M:NLog.Config.Factory`2.TryCreateInstance(System.String,`0@)">
            <summary>
            Tries to create an item instance.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="result">The result.</param>
            <returns>True if instance was created successfully, false otherwise.</returns>
        </member>
        <member name="M:NLog.Config.Factory`2.CreateInstance(System.String)">
            <summary>
            Creates an item instance.
            </summary>
            <param name="name">The name of the item.</param>
            <returns>Created item.</returns>
        </member>
        <member name="T:NLog.Config.IFactory">
            <summary>
            Provides means to populate factories of named items (such as targets, layouts, layout renderers, etc.).
            </summary>
        </member>
        <member name="T:NLog.Config.IInstallable">
            <summary>
            Implemented by objects which support installation and uninstallation.
            </summary>
        </member>
        <member name="M:NLog.Config.IInstallable.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Config.IInstallable.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Config.IInstallable.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="T:NLog.Config.INamedItemFactory`2">
            <summary>
            Represents a factory of named items (such as targets, layouts, layout renderers, etc.).
            </summary>
            <typeparam name="TInstanceType">Base type for each item instance.</typeparam>
            <typeparam name="TDefinitionType">Item definition type (typically <see cref="T:System.Type"/> or <see cref="T:System.Reflection.MethodInfo"/>).</typeparam>
        </member>
        <member name="M:NLog.Config.INamedItemFactory`2.RegisterDefinition(System.String,`1)">
            <summary>
            Registers new item definition.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="itemDefinition">Item definition.</param>
        </member>
        <member name="M:NLog.Config.INamedItemFactory`2.TryGetDefinition(System.String,`1@)">
            <summary>
            Tries to get registered item definition.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="result">Reference to a variable which will store the item definition.</param>
            <returns>Item definition.</returns>
        </member>
        <member name="M:NLog.Config.INamedItemFactory`2.CreateInstance(System.String)">
            <summary>
            Creates item instance.
            </summary>
            <param name="itemName">Name of the item.</param>
            <returns>Newly created item instance.</returns>
        </member>
        <member name="M:NLog.Config.INamedItemFactory`2.TryCreateInstance(System.String,`0@)">
            <summary>
            Tries to create an item instance.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="result">The result.</param>
            <returns>True if instance was created successfully, false otherwise.</returns>
        </member>
        <member name="T:NLog.Config.InstallationContext">
            <summary>
            Provides context for install/uninstall operations.
            </summary>
        </member>
        <member name="F:NLog.Config.InstallationContext.logLevel2ConsoleColor">
            <summary>
            Mapping between log levels and console output colors.
            </summary>
        </member>
        <member name="M:NLog.Config.InstallationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.InstallationContext"/> class.
            </summary>
        </member>
        <member name="M:NLog.Config.InstallationContext.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.InstallationContext"/> class.
            </summary>
            <param name="logOutput">The log output.</param>
        </member>
        <member name="P:NLog.Config.InstallationContext.LogLevel">
            <summary>
            Gets or sets the installation log level.
            </summary>
        </member>
        <member name="P:NLog.Config.InstallationContext.IgnoreFailures">
            <summary>
            Gets or sets a value indicating whether to ignore failures during installation.
            </summary>
        </member>
        <member name="P:NLog.Config.InstallationContext.Parameters">
            <summary>
            Gets the installation parameters.
            </summary>
        </member>
        <member name="P:NLog.Config.InstallationContext.LogOutput">
            <summary>
            Gets or sets the log output.
            </summary>
        </member>
        <member name="M:NLog.Config.InstallationContext.Trace(System.String,System.Object[])">
            <summary>
            Logs the specified trace message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified debug message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Info(System.String,System.Object[])">
            <summary>
            Logs the specified informational message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Warning(System.String,System.Object[])">
            <summary>
            Logs the specified warning message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Error(System.String,System.Object[])">
            <summary>
            Logs the specified error message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Config.InstallationContext.CreateLogEvent">
            <summary>
            Creates the log event which can be used to render layouts during installation/uninstallations.
            </summary>
            <returns>Log event info object.</returns>
        </member>
        <member name="T:NLog.Config.LoggingConfigurationChangedEventArgs">
            <summary>
            Arguments for <see cref="E:NLog.LogFactory.ConfigurationChanged"/> events.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfigurationChangedEventArgs.#ctor(NLog.Config.LoggingConfiguration,NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfigurationChangedEventArgs" /> class.
            </summary>
            <param name="oldConfiguration">The old configuration.</param>
            <param name="newConfiguration">The new configuration.</param>
        </member>
        <member name="P:NLog.Config.LoggingConfigurationChangedEventArgs.OldConfiguration">
            <summary>
            Gets the old configuration.
            </summary>
            <value>The old configuration.</value>
        </member>
        <member name="P:NLog.Config.LoggingConfigurationChangedEventArgs.NewConfiguration">
            <summary>
            Gets the new configuration.
            </summary>
            <value>The new configuration.</value>
        </member>
        <member name="T:NLog.Config.LoggingConfigurationReloadedEventArgs">
            <summary>
            Arguments for <see cref="E:NLog.LogFactory.ConfigurationReloaded"/>.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfigurationReloadedEventArgs.#ctor(System.Boolean,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfigurationReloadedEventArgs" /> class.
            </summary>
            <param name="succeeded">Whether configuration reload has succeeded.</param>
            <param name="exception">The exception during configuration reload.</param>
        </member>
        <member name="P:NLog.Config.LoggingConfigurationReloadedEventArgs.Succeeded">
            <summary>
            Gets a value indicating whether configuration reload has succeeded.
            </summary>
            <value>A value of <c>true</c> if succeeded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NLog.Config.LoggingConfigurationReloadedEventArgs.Exception">
            <summary>
            Gets the exception which occurred during configuration reload.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:NLog.Config.MethodFactory`2">
            <summary>
            Factory for locating methods.
            </summary>
            <typeparam name="TClassAttributeType">The type of the class marker attribute.</typeparam>
            <typeparam name="TMethodAttributeType">The type of the method marker attribute.</typeparam>
        </member>
        <member name="P:NLog.Config.MethodFactory`2.AllRegisteredItems">
            <summary>
            Gets a collection of all registered items in the factory.
            </summary>
            <returns>
            Sequence of key/value pairs where each key represents the name
            of the item and value is the <see cref="T:System.Reflection.MethodInfo"/> of
            the item.
            </returns>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.ScanTypes(System.Type[],System.String)">
            <summary>
            Scans the assembly for classes marked with <typeparamref name="TClassAttributeType"/>
            and methods marked with <typeparamref name="TMethodAttributeType"/> and adds them 
            to the factory.
            </summary>
            <param name="types">The types to scan.</param>
            <param name="prefix">The prefix to use for names.</param>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.RegisterType(System.Type,System.String)">
            <summary>
            Registers the type.
            </summary>
            <param name="type">The type to register.</param>
            <param name="itemNamePrefix">The item name prefix.</param>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.Clear">
            <summary>
            Clears contents of the factory.
            </summary>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.RegisterDefinition(System.String,System.Reflection.MethodInfo)">
            <summary>
            Registers the definition of a single method.
            </summary>
            <param name="name">The method name.</param>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.TryCreateInstance(System.String,System.Reflection.MethodInfo@)">
            <summary>
            Tries to retrieve method by name.
            </summary>
            <param name="name">The method name.</param>
            <param name="result">The result.</param>
            <returns>A value of <c>true</c> if the method was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.CreateInstance(System.String)">
            <summary>
            Retrieves method by name.
            </summary>
            <param name="name">Method name.</param>
            <returns>MethodInfo object.</returns>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.TryGetDefinition(System.String,System.Reflection.MethodInfo@)">
            <summary>
            Tries to get method definition.
            </summary>
            <param name="name">The method .</param>
            <param name="result">The result.</param>
            <returns>A value of <c>true</c> if the method was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:NLog.Config.NameBaseAttribute">
            <summary>
            Attaches a simple name to an item (such as <see cref="T:NLog.Targets.Target"/>, 
            <see cref="T:NLog.LayoutRenderers.LayoutRenderer"/>, <see cref="T:NLog.Layouts.Layout"/>, etc.).
            </summary>
        </member>
        <member name="M:NLog.Config.NameBaseAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NameBaseAttribute" /> class.
            </summary>
            <param name="name">The name of the item.</param>
        </member>
        <member name="P:NLog.Config.NameBaseAttribute.Name">
            <summary>
            Gets the name of the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="T:NLog.Config.NLogConfigurationIgnorePropertyAttribute">
            <summary>
            Indicates NLog should not scan this property during configuration.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogConfigurationIgnorePropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogConfigurationIgnorePropertyAttribute"/> class.
            </summary>
        </member>
        <member name="T:NLog.Config.NLogConfigurationItemAttribute">
            <summary>
            Marks the object as configuration item for NLog.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogConfigurationItemAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogConfigurationItemAttribute"/> class.
            </summary>
        </member>
        <member name="T:NLog.Config.NLogXmlElement">
            <summary>
            Represents simple XML element with case-insensitive attribute semantics.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogXmlElement"/> class.
            </summary>
            <param name="inputUri">The input URI.</param>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogXmlElement"/> class.
            </summary>
            <param name="reader">The reader to initialize element from.</param>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NLog.Config.NLogXmlElement"/> class from being created.
            </summary>
        </member>
        <member name="P:NLog.Config.NLogXmlElement.LocalName">
            <summary>
            Gets the element name.
            </summary>
        </member>
        <member name="P:NLog.Config.NLogXmlElement.AttributeValues">
            <summary>
            Gets the dictionary of attribute values.
            </summary>
        </member>
        <member name="P:NLog.Config.NLogXmlElement.Children">
            <summary>
            Gets the collection of child elements.
            </summary>
        </member>
        <member name="P:NLog.Config.NLogXmlElement.Value">
            <summary>
            Gets the value of the element.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.Elements(System.String)">
            <summary>
            Returns children elements with the specified element name.
            </summary>
            <param name="elementName">Name of the element.</param>
            <returns>Children elements with the specified element name.</returns>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.GetRequiredAttribute(System.String)">
            <summary>
            Gets the required attribute.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>Attribute value.</returns>
            <remarks>Throws if the attribute is not specified.</remarks>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.GetOptionalBooleanAttribute(System.String,System.Boolean)">
            <summary>
            Gets the optional boolean attribute value.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">Default value to return if the attribute is not found.</param>
            <returns>Boolean attribute value or default.</returns>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.GetOptionalBooleanAttribute(System.String,System.Nullable{System.Boolean})">
            <summary>
            Gets the optional boolean attribute value. If whitespace, then returning <c>null</c>.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">Default value to return if the attribute is not found.</param>
            <returns>Boolean attribute value or default.</returns>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.GetOptionalAttribute(System.String,System.String)">
            <summary>
            Gets the optional attribute value.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Value of the attribute or default value.</returns>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.AssertName(System.String[])">
            <summary>
            Asserts that the name of the element is among specified element names.
            </summary>
            <param name="allowedNames">The allowed names.</param>
        </member>
        <member name="T:NLog.Config.StackTraceUsage">
            <summary>
            Value indicating how stack trace should be captured when processing the log event.
            </summary>
        </member>
        <member name="F:NLog.Config.StackTraceUsage.None">
            <summary>
            Stack trace should not be captured.
            </summary>
        </member>
        <member name="F:NLog.Config.StackTraceUsage.WithoutSource">
            <summary>
            Stack trace should be captured without source-level information.
            </summary>
        </member>
        <member name="F:NLog.Config.StackTraceUsage.WithSource">
            <summary>
            Stack trace should be captured including source-level information such as line numbers.
            </summary>
        </member>
        <member name="F:NLog.Config.StackTraceUsage.Max">
            <summary>
            Capture maximum amount of the stack trace information supported on the platform.
            </summary>
        </member>
        <member name="T:NLog.Config.ThreadAgnosticAttribute">
            <summary>
            Marks the layout or layout renderer as producing correct results regardless of the thread
            it's running on.
            </summary>
            <remarks>
            This is important because some layout renders should use the main thread. E.g. for using <c>HttpContext.Current</c> etc.
            
            If set to <c>true</c> then a layout will be render in the main thread, so for example in the AsyncTargetWrapper and BufferTargetWrapper with the <see cref="M:NLog.Targets.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)"/> , using <see cref="M:NLog.Layouts.Layout.Precalculate(NLog.LogEventInfo)"/>
            
            Apply this attribute when:
            - The result can we rendered in another thread. Delaying this could be more efficient. And/Or,
            - The result should not be precalculated, for example the target sends some extra context information. 
            </remarks>
        </member>
        <member name="T:NLog.Config.ArrayParameterAttribute">
            <summary>
            Used to mark configurable parameters which are arrays. 
            Specifies the mapping between XML elements and .NET types.
            </summary>
        </member>
        <member name="M:NLog.Config.ArrayParameterAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.ArrayParameterAttribute" /> class.
            </summary>
            <param name="itemType">The type of the array item.</param>
            <param name="elementName">The XML element name that represents the item.</param>
        </member>
        <member name="P:NLog.Config.ArrayParameterAttribute.ItemType">
            <summary>
            Gets the .NET type of the array item.
            </summary>
        </member>
        <member name="P:NLog.Config.ArrayParameterAttribute.ElementName">
            <summary>
            Gets the XML element name.
            </summary>
        </member>
        <member name="T:NLog.Config.ConfigSectionHandler">
            <summary>
            NLog configuration section handler class for configuring NLog from App.config.
            </summary>
        </member>
        <member name="M:NLog.Config.ConfigSectionHandler.System#Configuration#IConfigurationSectionHandler#Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:NLog.Config.DefaultParameterAttribute">
            <summary>
            Attribute used to mark the default parameters for layout renderers.
            </summary>
        </member>
        <member name="M:NLog.Config.DefaultParameterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.DefaultParameterAttribute" /> class.
            </summary>
        </member>
        <member name="T:NLog.Config.LoggingConfiguration">
             <summary>
             Keeps logging configuration and provides simple API
             to modify it.
             </summary>
            <remarks>This class is thread-safe.<c>.ToList()</c> is used for that purpose.</remarks>
        </member>
        <member name="F:NLog.Config.LoggingConfiguration.variables">
            <summary>
            Variables defined in xml or in API. name is case case insensitive. 
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfiguration" /> class.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.ExceptionLoggingOldStyle">
            <summary>
            Use the old exception log handling of NLog 3.0? 
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.Variables">
            <summary>
            Gets the variables defined in the configuration.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.ConfiguredNamedTargets">
            <summary>
            Gets a collection of named targets specified in the configuration.
            </summary>
            <returns>
            A list of named targets.
            </returns>
            <remarks>
            Unnamed targets (such as those wrapped by other targets) are not returned.
            </remarks>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.FileNamesToWatch">
            <summary>
            Gets the collection of file names which should be watched for changes by NLog.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.LoggingRules">
            <summary>
            Gets the collection of logging rules.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo">
            <summary>
            Gets or sets the default culture info to use as <see cref="P:NLog.LogEventInfo.FormatProvider"/>.
            </summary>
            <value>
            Specific culture info or null to use <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>
            </value>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.AllTargets">
            <summary>
            Gets all targets.
            </summary>
        </member>
        <member name="F:NLog.Config.LoggingConfiguration.TargetNameComparer">
            <summary>
            Compare on name
            </summary>
        </member>
        <member name="T:NLog.Config.LoggingConfiguration.TargetNameEq">
            <summary>
            Compare on name
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddTarget(NLog.Targets.Target)">
            <summary>
            Registers the specified target object. The name of the target is read from <see cref="P:NLog.Targets.Target.Name"/>.
            </summary>
            <param name="target">
            The target object with a non <see langword="null"/> <see cref="P:NLog.Targets.Target.Name"/>
            </param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="target"/> is <see langword="null"/></exception>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddTarget(System.String,NLog.Targets.Target)">
            <summary>
            Registers the specified target object under a given name.
            </summary>
            <param name="name">
            Name of the target.
            </param>
            <param name="target">
            The target object.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.FindTargetByName(System.String)">
            <summary>
            Finds the target with the specified name.
            </summary>
            <param name="name">
            The name of the target to be found.
            </param>
            <returns>
            Found target or <see langword="null"/> when the target is not found.
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.FindTargetByName``1(System.String)">
            <summary>
            Finds the target with the specified name and specified type.
            </summary>
            <param name="name">
            The name of the target to be found.
            </param>
            <typeparam name="TTarget">Type of the target</typeparam>
            <returns>
            Found target or <see langword="null"/> when the target is not found of not of type <typeparamref name="TTarget"/>
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddRule(NLog.LogLevel,NLog.LogLevel,System.String,System.String)">
            <summary>
            Add a rule with min- and maxLevel.
            </summary>
            <param name="minLevel">Minimum log level needed to trigger this rule.</param>
            <param name="maxLevel">Maximum log level needed to trigger this rule.</param>
            <param name="targetName">Name of the target to be written when the rule matches.</param>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddRule(NLog.LogLevel,NLog.LogLevel,NLog.Targets.Target,System.String)">
            <summary>
            Add a rule with min- and maxLevel.
            </summary>
            <param name="minLevel">Minimum log level needed to trigger this rule.</param>
            <param name="maxLevel">Maximum log level needed to trigger this rule.</param>
            <param name="target">Target to be written to when the rule matches.</param>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddRuleForOneLevel(NLog.LogLevel,System.String,System.String)">
            <summary>
            Add a rule for one loglevel.
            </summary>
            <param name="level">log level needed to trigger this rule. </param>
            <param name="targetName">Name of the target to be written when the rule matches.</param>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddRuleForOneLevel(NLog.LogLevel,NLog.Targets.Target,System.String)">
            <summary>
            Add a rule for one loglevel.
            </summary>
            <param name="level">log level needed to trigger this rule. </param>
            <param name="target">Target to be written to when the rule matches.</param>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddRuleForAllLevels(System.String,System.String)">
            <summary>
            Add a rule for alle loglevels.
            </summary>
            <param name="targetName">Name of the target to be written when the rule matches.</param>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddRuleForAllLevels(NLog.Targets.Target,System.String)">
            <summary>
            Add a rule for alle loglevels.
            </summary>
            <param name="target">Target to be written to when the rule matches.</param>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Reload">
            <summary>
            Called by LogManager when one of the log configuration files changes.
            </summary>
            <returns>
            A new instance of <see cref="T:NLog.Config.LoggingConfiguration"/> that represents the updated configuration.
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.RemoveTarget(System.String)">
            <summary>
            Removes the specified named target.
            </summary>
            <param name="name">
            Name of the target.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Install(NLog.Config.InstallationContext)">
            <summary>
            Installs target-specific objects on current system.
            </summary>
            <param name="installationContext">The installation context.</param>
            <remarks>
            Installation typically runs with administrative permissions.
            </remarks>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Uninstalls target-specific objects from current system.
            </summary>
            <param name="installationContext">The installation context.</param>
            <remarks>
            Uninstallation typically runs with administrative permissions.
            </remarks>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Close">
            <summary>
            Closes all targets and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Dump">
            <summary>
            Log to the internal (NLog) logger the information about the <see cref="T:NLog.Targets.Target"/> and <see
            cref="T:NLog.Config.LoggingRule"/> associated with this <see cref="T:NLog.Config.LoggingConfiguration"/> instance.
            </summary>
            <remarks>
            The information are only recorded in the internal logger if Debug level is enabled, otherwise nothing is 
            recorded.
            </remarks>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.FlushAllTargets(NLog.Common.AsyncContinuation)">
            <summary>
            Flushes any pending log messages on all appenders.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.ValidateConfig">
            <summary>
            Validates the configuration.
            </summary>
        </member>
        <member name="T:NLog.Config.LoggingRule">
            <summary>
            Represents a logging rule. An equivalent of &lt;logger /&gt; configuration element.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor">
            <summary>
            Create an empty <see cref="T:NLog.Config.LoggingRule" />.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.LogLevel,NLog.LogLevel,NLog.Targets.Target)">
            <summary>
            Create a new <see cref="T:NLog.Config.LoggingRule" /> with a <paramref name="minLevel"/> and  <paramref name="maxLevel"/> which writes to <paramref name="target"/>.
            </summary>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
            <param name="minLevel">Minimum log level needed to trigger this rule.</param>
            <param name="maxLevel">Maximum log level needed to trigger this rule.</param>
            <param name="target">Target to be written to when the rule matches.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.LogLevel,NLog.Targets.Target)">
            <summary>
            Create a new <see cref="T:NLog.Config.LoggingRule" /> with a <paramref name="minLevel"/> which writes to <paramref name="target"/>.
            </summary>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
            <param name="minLevel">Minimum log level needed to trigger this rule.</param>
            <param name="target">Target to be written to when the rule matches.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.Targets.Target)">
            <summary>
            Create a (disabled) <see cref="T:NLog.Config.LoggingRule" />. You should call <see cref="M:NLog.Config.LoggingRule.EnableLoggingForLevel(NLog.LogLevel)"/> or see cref="EnableLoggingForLevels"/> to enable logging.
            </summary>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
            <param name="target">Target to be written to when the rule matches.</param>
        </member>
        <member name="P:NLog.Config.LoggingRule.Targets">
            <summary>
            Gets a collection of targets that should be written to when this rule matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.ChildRules">
            <summary>
            Gets a collection of child rules to be evaluated when this rule matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.Filters">
            <summary>
            Gets a collection of filters to be checked before writing to targets.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.Final">
            <summary>
            Gets or sets a value indicating whether to quit processing any further rule when this one matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.LoggerNamePattern">
            <summary>
            Gets or sets logger name pattern.
            </summary>
            <remarks>
            Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends but not anywhere else.
            </remarks>
        </member>
        <member name="P:NLog.Config.LoggingRule.Levels">
            <summary>
            Gets the collection of log levels enabled by this rule.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRule.EnableLoggingForLevel(NLog.LogLevel)">
            <summary>
            Enables logging for a particular level.
            </summary>
            <param name="level">Level to be enabled.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.EnableLoggingForLevels(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Enables logging for a particular levels between (included) <paramref name="minLevel"/> and <paramref name="maxLevel"/>.
            </summary>
            <param name="minLevel">Minimum log level needed to trigger this rule.</param>
            <param name="maxLevel">Maximum log level needed to trigger this rule.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.DisableLoggingForLevel(NLog.LogLevel)">
            <summary>
            Disables logging for a particular level.
            </summary>
            <param name="level">Level to be disabled.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.ToString">
            <summary>
            Returns a string representation of <see cref="T:NLog.Config.LoggingRule"/>. Used for debugging.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingRule.IsLoggingEnabledForLevel(NLog.LogLevel)">
            <summary>
            Checks whether te particular log level is enabled for this rule.
            </summary>
            <param name="level">Level to be checked.</param>
            <returns>A value of <see langword="true"/> when the log level is enabled, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:NLog.Config.LoggingRule.NameMatches(System.String)">
            <summary>
            Checks whether given name matches the logger name pattern.
            </summary>
            <param name="loggerName">String to be matched.</param>
            <returns>A value of <see langword="true"/> when the name matches, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:NLog.Config.RequiredParameterAttribute">
            <summary>
            Attribute used to mark the required parameters for targets,
            layout targets and filters.
            </summary>
        </member>
        <member name="T:NLog.Config.SimpleConfigurator">
            <summary>
            Provides simple programmatic configuration API used for trivial logging cases.
            
            Warning, these methods will overwrite the current config.
            </summary>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForConsoleLogging">
            <summary>
            Configures NLog for console logging so that all messages above and including
            the <see cref="F:NLog.LogLevel.Info"/> level are output to the console.
            </summary>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForConsoleLogging(NLog.LogLevel)">
            <summary>
            Configures NLog for console logging so that all messages above and including
            the specified level are output to the console.
            </summary>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(NLog.Targets.Target)">
            <summary>
            Configures NLog for to log to the specified target so that all messages 
            above and including the <see cref="F:NLog.LogLevel.Info"/> level are output.
            </summary>
            <param name="target">The target to log all messages to.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(NLog.Targets.Target,NLog.LogLevel)">
            <summary>
            Configures NLog for to log to the specified target so that all messages 
            above and including the specified level are output.
            </summary>
            <param name="target">The target to log all messages to.</param>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForFileLogging(System.String)">
            <summary>
            Configures NLog for file logging so that all messages above and including
            the <see cref="F:NLog.LogLevel.Info"/> level are written to the specified file.
            </summary>
            <param name="fileName">Log file name.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForFileLogging(System.String,NLog.LogLevel)">
            <summary>
            Configures NLog for file logging so that all messages above and including
            the specified level are written to the specified file.
            </summary>
            <param name="fileName">Log file name.</param>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="T:NLog.Config.XmlLoggingConfiguration">
             <summary>
             A class for configuring NLog through an XML configuration file 
             (App.config style or App.nlog style).
             </summary>
            <remarks>This class is thread-safe.<c>.ToList()</c> is used for that purpose.</remarks>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="fileName">Configuration file to be read.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String,NLog.LogFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="fileName">Configuration file to be read.</param>
            <param name="logFactory">The <see cref="T:NLog.LogFactory" /> to which to apply any applicable configuration values.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="fileName">Configuration file to be read.</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String,System.Boolean,NLog.LogFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="fileName">Configuration file to be read.</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
            <param name="logFactory">The <see cref="T:NLog.LogFactory" /> to which to apply any applicable configuration values.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.CreateFileReader(System.String)">
            <summary>
            Create XML reader for (xml config) file.
            </summary>
            <param name="fileName">filepath</param>
            <returns>reader or <c>null</c> if filename is empty.</returns>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String,NLog.LogFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
            <param name="logFactory">The <see cref="T:NLog.LogFactory" /> to which to apply any applicable configuration values.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String,System.Boolean,NLog.LogFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
            <param name="logFactory">The <see cref="T:NLog.LogFactory" /> to which to apply any applicable configuration values.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="element">The XML element.</param>
            <param name="fileName">Name of the XML file.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="element">The XML element.</param>
            <param name="fileName">Name of the XML file.</param>
            <param name="ignoreErrors">If set to <c>true</c> errors will be ignored during file processing.</param>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.AppConfig">
            <summary>
            Gets the default <see cref="T:NLog.Config.LoggingConfiguration" /> object by parsing 
            the application configuration file (<c>app.exe.config</c>).
            </summary>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.InitializeSucceeded">
            <summary>
            Did the <see cref="M:NLog.Config.XmlLoggingConfiguration.Initialize(System.Xml.XmlReader,System.String,System.Boolean)"/> Succeeded? <c>true</c>= success, <c>false</c>= error, <c>null</c> = initialize not started yet.
            </summary>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.AutoReload">
            <summary>
            Gets or sets a value indicating whether all of the configuration files
            should be watched for changes and reloaded automatically when changed.
            </summary>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.FileNamesToWatch">
            <summary>
            Gets the collection of file names which should be watched for changes by NLog.
            This is the list of configuration files processed.
            If the <c>autoReload</c> attribute is not set it returns empty collection.
            </summary>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.Reload">
            <summary>
            Re-reads the original configuration file and returns the new <see cref="T:NLog.Config.LoggingConfiguration" /> object.
            </summary>
            <returns>The new <see cref="T:NLog.Config.XmlLoggingConfiguration" /> object.</returns>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.CleanSpaces(System.String)">
            <summary>
            Remove all spaces, also in between text. 
            </summary>
            <param name="s">text</param>
            <returns>text without spaces</returns>
            <remarks>Tabs and other whitespace is not removed!</remarks>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.StripOptionalNamespacePrefix(System.String)">
            <summary>
            Remove the namespace (before :)
            </summary>
            <example>
            x:a, will be a
            </example>
            <param name="attributeValue"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.Initialize(System.Xml.XmlReader,System.String,System.Boolean)">
            <summary>
            Initializes the configuration.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.CheckUnusedTargets">
            <summary>
            Checks whether unused targets exist. If found any, just write an internal log at Warn level.
            <remarks>If initializing not started or failed, then checking process will be canceled</remarks>
            </summary>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.ParseTopLevel(NLog.Config.NLogXmlElement,System.String,System.Boolean)">
            <summary>
            Parse the root
            </summary>
            <param name="content"></param>
            <param name="filePath">path to config file.</param>
            <param name="autoReloadDefault">The default value for the autoReload option.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.ParseConfigurationElement(NLog.Config.NLogXmlElement,System.String,System.Boolean)">
            <summary>
            Parse {configuration} xml element.
            </summary>
            <param name="configurationElement"></param>
            <param name="filePath">path to config file.</param>
            <param name="autoReloadDefault">The default value for the autoReload option.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.ParseNLogElement(NLog.Config.NLogXmlElement,System.String,System.Boolean)">
            <summary>
            Parse {NLog} xml element.
            </summary>
            <param name="nlogElement"></param>
            <param name="filePath">path to config file.</param>
            <param name="autoReloadDefault">The default value for the autoReload option.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.ParseRulesElement(NLog.Config.NLogXmlElement,System.Collections.Generic.IList{NLog.Config.LoggingRule})">
            <summary>
            Parse {Rules} xml element
            </summary>
            <param name="rulesElement"></param>
            <param name="rulesCollection">Rules are added to this parameter.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.ParseLoggerElement(NLog.Config.NLogXmlElement,System.Collections.Generic.IList{NLog.Config.LoggingRule})">
            <summary>
            Parse {Logger} xml element
            </summary>
            <param name="loggerElement"></param>
            <param name="rulesCollection">Rules are added to this parameter.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.ExpandSimpleVariables(System.String)">
            <summary>
            Replace a simple variable with a value. The orginal value is removed and thus we cannot redo this in a later stage.
            
            Use for that: <see cref="T:NLog.LayoutRenderers.VariableLayoutRenderer"/>
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.Filters.Filter">
            <summary>
            An abstract filter class. Provides a way to eliminate log messages
            based on properties other than logger name and log level.
            </summary>
        </member>
        <member name="M:NLog.Filters.Filter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.Filter" /> class.
            </summary>
        </member>
        <member name="P:NLog.Filters.Filter.Action">
            <summary>
            Gets or sets the action to be taken when filter matches.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="M:NLog.Filters.Filter.GetFilterResult(NLog.LogEventInfo)">
            <summary>
            Gets the result of evaluating filter against given log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>Filter result.</returns>
        </member>
        <member name="M:NLog.Filters.Filter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="T:NLog.Filters.FilterAttribute">
            <summary>
            Marks class as a layout renderer and assigns a name to it.
            </summary>
        </member>
        <member name="M:NLog.Filters.FilterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.FilterAttribute" /> class.
            </summary>
            <param name="name">Name of the filter.</param>
        </member>
        <member name="T:NLog.Filters.FilterResult">
            <summary>
            Filter result.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.Neutral">
            <summary>
            The filter doesn't want to decide whether to log or discard the message.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.Log">
            <summary>
            The message should be logged.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.Ignore">
            <summary>
            The message should not be logged.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.LogFinal">
            <summary>
            The message should be logged and processing should be finished.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.IgnoreFinal">
            <summary>
            The message should not be logged and processing should be finished.
            </summary>
        </member>
        <member name="T:NLog.Filters.WhenContainsFilter">
            <summary>
            Matches when the calculated layout contains the specified substring. 
            This filter is deprecated in favor of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">conditions</a>.
            </summary>
        </member>
        <member name="P:NLog.Filters.WhenContainsFilter.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Filters.WhenContainsFilter.Substring">
            <summary>
            Gets or sets the substring to be matched.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="M:NLog.Filters.WhenContainsFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="T:NLog.Filters.WhenEqualFilter">
            <summary>
            Matches when the calculated layout is equal to the specified substring.
            This filter is deprecated in favor of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">conditions</a>.
            </summary>
        </member>
        <member name="P:NLog.Filters.WhenEqualFilter.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Filters.WhenEqualFilter.CompareTo">
            <summary>
            Gets or sets a string to compare the layout to.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="M:NLog.Filters.WhenEqualFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="T:NLog.Filters.WhenNotContainsFilter">
            <summary>
            Matches when the calculated layout does NOT contain the specified substring.
            This filter is deprecated in favor of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">conditions</a>.
            </summary>
        </member>
        <member name="P:NLog.Filters.WhenNotContainsFilter.Substring">
            <summary>
            Gets or sets the substring to be matched.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Filters.WhenNotContainsFilter.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="M:NLog.Filters.WhenNotContainsFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="T:NLog.Filters.WhenNotEqualFilter">
            <summary>
            Matches when the calculated layout is NOT equal to the specified substring.
            This filter is deprecated in favor of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">conditions</a>.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenNotEqualFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.WhenNotEqualFilter" /> class.
            </summary>
        </member>
        <member name="P:NLog.Filters.WhenNotEqualFilter.CompareTo">
            <summary>
            Gets or sets a string to compare the layout to.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Filters.WhenNotEqualFilter.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="M:NLog.Filters.WhenNotEqualFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="T:NLog.Filters.ConditionBasedFilter">
            <summary>
            Matches when the specified condition is met.
            </summary>
            <remarks>
            Conditions are expressed using a simple language 
            described <a href="conditions.html">here</a>.
            </remarks>
        </member>
        <member name="P:NLog.Filters.ConditionBasedFilter.Condition">
            <summary>
            Gets or sets the condition expression.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="M:NLog.Filters.ConditionBasedFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="T:NLog.Filters.LayoutBasedFilter">
            <summary>
            A base class for filters that are based on comparing a value to a layout.
            </summary>
        </member>
        <member name="M:NLog.Filters.LayoutBasedFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.LayoutBasedFilter" /> class.
            </summary>
        </member>
        <member name="P:NLog.Filters.LayoutBasedFilter.Layout">
            <summary>
            Gets or sets the layout to be used to filter log messages.
            </summary>
            <value>The layout.</value>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="T:NLog.Fluent.LogBuilder">
            <summary>
            A fluent class to build log events for NLog.
            </summary>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.#ctor(NLog.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Fluent.LogBuilder"/> class.
            </summary>
            <param name="logger">The <see cref="T:NLog.Logger"/> to send the log event.</param>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.#ctor(NLog.ILogger,NLog.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Fluent.LogBuilder"/> class.
            </summary>
            <param name="logger">The <see cref="T:NLog.Logger"/> to send the log event.</param>
            <param name="logLevel">The <see cref="T:NLog.LogLevel"/> for the log event.</param>
        </member>
        <member name="P:NLog.Fluent.LogBuilder.LogEventInfo">
            <summary>
            Gets the <see cref="P:NLog.Fluent.LogBuilder.LogEventInfo"/> created by the builder.
            </summary>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Exception(System.Exception)">
            <summary>
            Sets the <paramref name="exception"/> information of the logging event.
            </summary>
            <param name="exception">The exception information of the logging event.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Level(NLog.LogLevel)">
            <summary>
            Sets the level of the logging event.
            </summary>
            <param name="logLevel">The level of the logging event.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.LoggerName(System.String)">
            <summary>
            Sets the logger name of the logging event.
            </summary>
            <param name="loggerName">The logger name of the logging event.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String)">
            <summary>
            Sets the log message on the logging event.
            </summary>
            <param name="message">The log message for the logging event.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object)">
            <summary>
            Sets the log message and parameters for formatting on the logging event.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The object to format.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object,System.Object)">
            <summary>
            Sets the log message and parameters for formatting on the logging event.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Sets the log message and parameters for formatting on the logging event.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Sets the log message and parameters for formatting on the logging event.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
            <param name="arg3">The fourth object to format.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object[])">
            <summary>
            Sets the log message and parameters for formatting on the logging event.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Sets the log message and parameters for formatting on the logging event.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Property(System.Object,System.Object)">
            <summary>
            Sets a per-event context property on the logging event.
            </summary>
            <param name="name">The name of the context property.</param>
            <param name="value">The value of the context property.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Properties(System.Collections.IDictionary)">
            <summary>
            Sets multiple per-event context properties on the logging event.
            </summary>
            <param name="properties">The properties to set.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.TimeStamp(System.DateTime)">
            <summary>
            Sets the timestamp of the logging event.
            </summary>
            <param name="timeStamp">The timestamp of the logging event.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.StackTrace(System.Diagnostics.StackTrace,System.Int32)">
            <summary>
            Sets the stack trace for the event info.
            </summary>
            <param name="stackTrace">The stack trace.</param>
            <param name="userStackFrame">Index of the first user stack frame within the stack trace.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Write">
            <summary>
            Writes the log event to the underlying logger.
            </summary>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.WriteIf(System.Func{System.Boolean})">
            <summary>
            Writes the log event to the underlying logger.
            </summary>
            <param name="condition">If condition is true, write log event; otherwise ignore event.</param>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.WriteIf(System.Boolean)">
            <summary>
            Writes the log event to the underlying logger.
            </summary>
            <param name="condition">If condition is true, write log event; otherwise ignore event.</param>
        </member>
        <member name="T:NLog.Fluent.LoggerExtensions">
            <summary>
            Extension methods for NLog <see cref="T:NLog.Logger"/>.
            </summary>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Log(NLog.ILogger,NLog.LogLevel)">
            <summary>
            Starts building a log event with the specified <see cref="T:NLog.LogLevel"/>.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <param name="logLevel">The log level.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Trace(NLog.ILogger)">
            <summary>
            Starts building a log event at the <c>Trace</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Debug(NLog.ILogger)">
            <summary>
            Starts building a log event at the <c>Debug</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Info(NLog.ILogger)">
            <summary>
            Starts building a log event at the <c>Info</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Warn(NLog.ILogger)">
            <summary>
            Starts building a log event at the <c>Warn</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Error(NLog.ILogger)">
            <summary>
            Starts building a log event at the <c>Error</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Fatal(NLog.ILogger)">
            <summary>
            Starts building a log event at the <c>Fatal</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="T:NLog.GlobalDiagnosticsContext">
            <summary>
            Global Diagnostics Context - a dictionary structure to hold per-application-instance values.
            </summary>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Set(System.String,System.String)">
            <summary>
            Sets the Global Diagnostics Context item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Set(System.String,System.Object)">
            <summary>
            Sets the Global Diagnostics Context item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Get(System.String)">
            <summary>
            Gets the Global Diagnostics Context named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <see cref="F:System.String.Empty"/>.</returns>
            <remarks>If the value isn't a <see cref="T:System.String"/> already, this call locks the <see cref="T:NLog.LogFactory"/> for reading the <see cref="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo"/> needed for converting to <see cref="T:System.String"/>. </remarks>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Get(System.String,System.IFormatProvider)">
            <summary>
            Gets the Global Diagnostics Context item.
            </summary>
            <param name="item">Item name.</param>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> to use when converting the item's value to a string.</param>
            <returns>The value of <paramref name="item"/> as a string, if defined; otherwise <see cref="F:System.String.Empty"/>.</returns>
            <remarks>If <paramref name="formatProvider"/> is <c>null</c> and the value isn't a <see cref="T:System.String"/> already, this call locks the <see cref="T:NLog.LogFactory"/> for reading the <see cref="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo"/> needed for converting to <see cref="T:System.String"/>. </remarks>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.GetObject(System.String)">
            <summary>
            Gets the Global Diagnostics Context named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The item value, if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.GetNames">
            <summary>
            Returns all item names
            </summary>
            <returns>A collection of the names of all items in the Global Diagnostics Context.</returns>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in the Global Diagnostics Context.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread GDC.</returns>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Remove(System.String)">
            <summary>
            Removes the specified item from the Global Diagnostics Context.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Clear">
            <summary>
            Clears the content of the GDC.
            </summary>
        </member>
        <member name="T:NLog.ILogger">
            <content>
            Auto-generated Logger members for binary compatibility with NLog 1.0.
            </content>
            <summary>
            Provides logging interface and utility functions.
            </summary>
        </member>
        <member name="M:NLog.ILogger.Trace(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>s
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="P:NLog.ILogger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Trace</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Trace</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.ILogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Debug</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Debug</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.ILogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Info</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Info</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.ILogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Warn</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Warn</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.ILogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Error</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Error</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.ILogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Fatal</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Fatal</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="M:NLog.ILogger.Trace``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Trace</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Trace``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.ILogger.TraceException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Trace``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Debug</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Debug``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.ILogger.DebugException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Debug``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Info</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Info``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Info(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.ILogger.InfoException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Info``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Warn</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Warn``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.ILogger.WarnException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Warn``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Error</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Error``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Error(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.ILogger.ErrorException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Error``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.ILogger.FatalException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="T:NLog.ILoggerBase">
            <content>
            Auto-generated Logger members for binary compatibility with NLog 1.0.
            </content>
            <summary>
            Logger with only generic methods (passing 'LogLevel' to methods) and core properties.
            </summary>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>    
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>        
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="E:NLog.ILoggerBase.LoggerReconfigured">
            <summary>
            Occurs when logger configuration changes.
            </summary>
        </member>
        <member name="P:NLog.ILoggerBase.Name">
            <summary>
            Gets the name of the logger.
            </summary>
        </member>
        <member name="P:NLog.ILoggerBase.Factory">
            <summary>
            Gets the factory that created this logger.
            </summary>
        </member>
        <member name="M:NLog.ILoggerBase.IsEnabled(NLog.LogLevel)">
            <summary>
            Gets a value indicating whether logging is enabled for the specified level.
            </summary>
            <param name="level">Log level to be checked.</param>
            <returns>A value of <see langword="true" /> if logging is enabled for the specified level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogEventInfo)">
            <summary>
            Writes the specified diagnostic message.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(System.Type,NLog.LogEventInfo)">
            <summary>
            Writes the specified diagnostic message.
            </summary>
            <param name="wrapperType">The name of the type that wraps Logger.</param>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log``1(NLog.LogLevel,``0)">
            <overloads>
            Writes the diagnostic message at the specified level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="level">The log level.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log``1(NLog.LogLevel,System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.ILoggerBase.LogException(NLog.LogLevel,System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="args">Arguments to format.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="args">Arguments to format.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log``1(NLog.LogLevel,System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log``1(NLog.LogLevel,System.String,``0)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the specified level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log``2(NLog.LogLevel,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the specified level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log``3(NLog.LogLevel,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="T:NLog.Internal.AspHelper">
            <summary>
            Various helper methods for accessing state of ASP application.
            </summary>
        </member>
        <member name="T:NLog.Internal.ConfigurationManager">
            <summary>
            Internal configuration manager used to read .NET configuration files.
            Just a wrapper around the BCL ConfigurationManager, but used to enable
            unit testing.
            </summary>
        </member>
        <member name="P:NLog.Internal.ConfigurationManager.AppSettings">
            <summary>
            Gets the wrapper around ConfigurationManager.AppSettings.
            </summary>
        </member>
        <member name="T:NLog.Internal.DictionaryAdapter`2">
            <summary>
            Provides untyped IDictionary interface on top of generic IDictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the DictionaryAdapter class.
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"/> object has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"/> object is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the keys of the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.ICollection"/> object containing the keys of the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <param name="key">Dictionary key.</param>
            <returns>Value corresponding to key or null if not found</returns>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"/> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"/> to use as the value of the element to add.</param>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"/> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"/> object.</param>
            <returns>
            True if the <see cref="T:System.Collections.IDictionary"/> contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:NLog.Internal.DictionaryAdapter`2.MyEnumerator">
            <summary>
            Wrapper IDictionaryEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.MyEnumerator.#ctor(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.DictionaryAdapter`2.MyEnumerator" /> class.
            </summary>
            <param name="wrapped">The wrapped.</param>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current dictionary entry.
            </summary>
            <value></value>
            <returns>
            A <see cref="T:System.Collections.DictionaryEntry"/> containing both the key and the value of the current dictionary entry.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Key">
            <summary>
            Gets the key of the current dictionary entry.
            </summary>
            <value></value>
            <returns>
            The key of the current element of the enumeration.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Value">
            <summary>
            Gets the value of the current dictionary entry.
            </summary>
            <value></value>
            <returns>
            The value of the current element of the enumeration.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.MyEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="F:NLog.Internal.EncodingHelpers.Utf8BOM">
            <summary>
            UTF-8 BOM 239, 187, 191
            </summary>
        </member>
        <member name="M:NLog.Internal.EnumHelpers.TryParse``1(System.String,``0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TEnum">The enumeration type to which to convert value.</typeparam>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="result">When this method returns, result contains an object of type TEnum whose value is represented by value if the parse operation succeeds. If the parse operation fails, result contains the default value of the underlying type of TEnum. Note that this value need not be a member of the TEnum enumeration. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
            <remarks>Wrapper because Enum.TryParse is not present in .net 3.5</remarks>
        </member>
        <member name="M:NLog.Internal.EnumHelpers.TryParse``1(System.String,System.Boolean,``0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TEnum">The enumeration type to which to convert value.</typeparam>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="ignoreCase"><c>true</c> to ignore case; <c>false</c> to consider case.</param>
            <param name="result">When this method returns, result contains an object of type TEnum whose value is represented by value if the parse operation succeeds. If the parse operation fails, result contains the default value of the underlying type of TEnum. Note that this value need not be a member of the TEnum enumeration. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
            <remarks>Wrapper because Enum.TryParse is not present in .net 3.5</remarks>
        </member>
        <member name="M:NLog.Internal.EnumHelpers.TryParseEnum_net3``1(System.String,System.Boolean,``0@)">
            <summary>
            Enum.TryParse implementation for .net 3.5 
            
            </summary>
            <returns></returns>
            <remarks>Don't uses reflection</remarks>
        </member>
        <member name="T:NLog.Internal.ExceptionHelper">
            <summary>
            Helper class for dealing with exceptions.
            </summary>
        </member>
        <member name="M:NLog.Internal.ExceptionHelper.MarkAsLoggedToInternalLogger(System.Exception)">
            <summary>
            Mark this exception as logged to the <see cref="T:NLog.Common.InternalLogger"/>.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Internal.ExceptionHelper.IsLoggedToInternalLogger(System.Exception)">
            <summary>
            Is this exception logged to the <see cref="T:NLog.Common.InternalLogger"/>? 
            </summary>
            <param name="exception"></param>
            <returns><c>true</c>if the <paramref name="exception"/> has been logged to the <see cref="T:NLog.Common.InternalLogger"/>.</returns>
        </member>
        <member name="M:NLog.Internal.ExceptionHelper.MustBeRethrown(System.Exception)">
            <summary>
            Determines whether the exception must be rethrown and logs the error to the <see cref="T:NLog.Common.InternalLogger"/> if <see cref="M:NLog.Internal.ExceptionHelper.IsLoggedToInternalLogger(System.Exception)"/> is <c>false</c>.
            
            Advised to log first the error to the <see cref="T:NLog.Common.InternalLogger"/> before calling this method.
            </summary>
            <param name="exception">The exception to check.</param>
            <returns><c>true</c>if the <paramref name="exception"/> must be rethrown, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NLog.Internal.ExceptionHelper.MustBeRethrownImmediately(System.Exception)">
            <summary>
            Determines whether the exception must be rethrown immediately, without logging the error to the <see cref="T:NLog.Common.InternalLogger"/>.
            
            Only used this method in special cases.
            </summary>
            <param name="exception">The exception to check.</param>
            <returns><c>true</c>if the <paramref name="exception"/> must be rethrown, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:NLog.Internal.Fakeables.AppDomainWrapper">
            <summary>
            Adapter for <see cref="T:System.AppDomain"/> to <see cref="T:NLog.Internal.Fakeables.IAppDomain"/>
            </summary>
        </member>
        <member name="M:NLog.Internal.Fakeables.AppDomainWrapper.#ctor(System.AppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.Fakeables.AppDomainWrapper"/> class.
            </summary>
            <param name="appDomain">The <see cref="T:System.AppDomain"/> to wrap.</param>
        </member>
        <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.CurrentDomain">
            <summary>
            Gets a the current <see cref="T:System.AppDomain"/> wrappered in a <see cref="T:NLog.Internal.Fakeables.AppDomainWrapper"/>.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.BaseDirectory">
            <summary>
            Gets or sets the base directory that the assembly resolver uses to probe for assemblies.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.ConfigurationFile">
            <summary>
            Gets or sets the name of the configuration file for an application domain.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.PrivateBinPath">
            <summary>
            Gets or sets the list of directories under the application base directory that are probed for private assemblies.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.FriendlyName">
            <summary>
            Gets or set the friendly name.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.Id">
            <summary>
            Gets an integer that uniquely identifies the application domain within the process. 
            </summary>
        </member>
        <member name="E:NLog.Internal.Fakeables.AppDomainWrapper.ProcessExit">
            <summary>
            Process exit event.
            </summary>
        </member>
        <member name="E:NLog.Internal.Fakeables.AppDomainWrapper.DomainUnload">
            <summary>
            Domain unloaded event.
            </summary>
        </member>
        <member name="T:NLog.Internal.Fakeables.IAppDomain">
            <summary>
            Interface for fakeable the current <see cref="T:System.AppDomain"/>. Not fully implemented, please methods/properties as necessary.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.IAppDomain.BaseDirectory">
            <summary>
            Gets or sets the base directory that the assembly resolver uses to probe for assemblies.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.IAppDomain.ConfigurationFile">
            <summary>
            Gets or sets the name of the configuration file for an application domain.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.IAppDomain.PrivateBinPath">
            <summary>
            Gets or sets the list of directories under the application base directory that are probed for private assemblies.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.IAppDomain.FriendlyName">
            <summary>
            Gets or set the friendly name.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.IAppDomain.Id">
            <summary>
            Gets an integer that uniquely identifies the application domain within the process. 
            </summary>
        </member>
        <member name="E:NLog.Internal.Fakeables.IAppDomain.ProcessExit">
            <summary>
            Process exit event.
            </summary>
        </member>
        <member name="E:NLog.Internal.Fakeables.IAppDomain.DomainUnload">
            <summary>
            Domain unloaded event.
            </summary>
        </member>
        <member name="T:NLog.Internal.FileAppenders.FileAppenderCache">
            <summary>
            Maintains a collection of file appenders usually associated with file targets.
            </summary>
        </member>
        <member name="F:NLog.Internal.FileAppenders.FileAppenderCache.Empty">
            <summary>
            An "empty" instance of the <see cref="T:NLog.Internal.FileAppenders.FileAppenderCache"/> class with zero size and empty list of appenders.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.#ctor">
            <summary>
            Initializes a new "empty" instance of the <see cref="T:NLog.Internal.FileAppenders.FileAppenderCache"/> class with zero size and empty
            list of appenders.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.#ctor(System.Int32,NLog.Internal.FileAppenders.IFileAppenderFactory,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.FileAppenderCache"/> class.
            </summary>
            <remarks>
            The size of the list should be positive. No validations are performed during initialisation as it is an
            intenal class.
            </remarks>
            <param name="size">Total number of appenders allowed in list.</param>
            <param name="appenderFactory">Factory used to create each appender.</param>
            <param name="createFileParams">Parameters used for creating a file.</param>
        </member>
        <member name="P:NLog.Internal.FileAppenders.FileAppenderCache.ArchiveFilePatternToWatch">
            <summary>
            The archive file path pattern that is used to detect when archiving occurs.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.InvalidateAppendersForInvalidFiles">
            <summary>
            Invalidates appenders for all files that were archived.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.FileAppenderCache.CreateFileParameters">
            <summary>
            Gets the parameters which will be used for creating a file.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.FileAppenderCache.Factory">
            <summary>
            Gets the file appender factory used by all the appenders in this list.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.FileAppenderCache.Size">
            <summary>
            Gets the number of appenders which the list can hold.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.AllocateAppender(System.String)">
            <summary>
            It allocates the first slot in the list when the file name does not already in the list and clean up any
            unused slots.
            </summary>
            <param name="fileName">File name associated with a single appender.</param>
            <returns>The allocated appender.</returns>
            <exception cref="T:System.NullReferenceException">
            Thrown when <see cref="M:AllocateAppender"/> is called on an <c>Empty</c><see cref="T:NLog.Internal.FileAppenders.FileAppenderCache"/> instance.
            </exception>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.GetFullPathForPattern(System.String)">
            <summary>
            Get fullpath for a relative file pattern,  e.g *.log 
            <see cref="M:System.IO.Path.GetFullPath(System.String)"/> crashes on patterns: ArgumentException: Illegal characters in path.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.CloseAppenders">
            <summary>
            Close all the allocated appenders. 
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.CloseAppenders(System.DateTime)">
            <summary>
            Close the allocated appenders initialised before the supplied time.
            </summary>
            <param name="expireTime">The time which prior the appenders considered expired</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.FlushAppenders">
            <summary>
            Fluch all the allocated appenders. 
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.GetFileCharacteristics(System.String)">
            <summary>
            Gets the file info for a particular appender.
            </summary>
            <param name="fileName">The file name associated with a particular appender.</param>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.InvalidateAppender(System.String)">
            <summary>
            Closes the specified appender and removes it from the list. 
            </summary>
            <param name="fileName">File name of the appender to be closed.</param>
        </member>
        <member name="T:NLog.Internal.FileAppenders.ICreateFileParameters">
            <summary>
            Interface that provides parameters for create file function.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.ICreateFileParameters.ConcurrentWriteAttemptDelay">
            <summary>
            Gets or sets the delay in milliseconds to wait before attempting to write to the file again.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.ICreateFileParameters.ConcurrentWriteAttempts">
            <summary>
            Gets or sets the number of times the write is appended on the file before NLog
            discards the log message.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.ICreateFileParameters.ConcurrentWrites">
            <summary>
            Gets or sets a value indicating whether concurrent writes to the log file by multiple processes on the same host.
            </summary>
            <remarks>
            This makes multi-process logging possible. NLog uses a special technique
            that lets it keep the files open for writing.
            </remarks>
        </member>
        <member name="P:NLog.Internal.FileAppenders.ICreateFileParameters.CreateDirs">
            <summary>
            Gets or sets a value indicating whether to create directories if they do not exist.
            </summary>
            <remarks>
            Setting this to false may improve performance a bit, but you'll receive an error
            when attempting to write to a directory that's not present.
            </remarks>
        </member>
        <member name="P:NLog.Internal.FileAppenders.ICreateFileParameters.EnableFileDelete">
            <summary>
            Gets or sets a value indicating whether to enable log file(s) to be deleted.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.ICreateFileParameters.BufferSize">
            <summary>
            Gets or sets the log file buffer size in bytes.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.ICreateFileParameters.ForceManaged">
            <summary>
            Gets or set a value indicating whether a managed file stream is forced, instead of used the native implementation.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.ICreateFileParameters.FileAttributes">
            <summary>
            Gets or sets the file attributes (Windows only).
            </summary>
        </member>
        <member name="T:NLog.Internal.FileAppenders.BaseFileAppender">
            <summary>
            Base class for optimized file appenders.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="createParameters">The create parameters.</param>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.FileName">
            <summary>
            Gets the path of the file, including file extension.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.CreationTime">
            <summary>
            Gets the file creation time.
            </summary>
            <value>The file creation time. DateTime value must be of UTC kind.</value>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.OpenTime">
            <summary>
            Gets the open time of the file.
            </summary>
            <value>The open time. DateTime value must be of UTC kind.</value>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.LastWriteTime">
            <summary>
            Gets the last write time.
            </summary>
            <value>The time the file was last written to. DateTime value must be of UTC kind.</value>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.CreateFileParameters">
            <summary>
            Gets the file creation parameters.
            </summary>
            <value>The file creation parameters.</value>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.GetFileCharacteristics">
            <summary>
            Gets the file info.
            </summary>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.FileTouched">
            <summary>
            Updates the last write time of the file.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.FileTouched(System.DateTime)">
            <summary>
            Updates the last write time of the file to the specified date.
            </summary>
            <param name="dateTime">Date and time when the last write occurred in UTC.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.CreateFileStream(System.Boolean)">
            <summary>
            Creates the file stream.
            </summary>
            <param name="allowFileSharedWriting">If set to <c>true</c> sets the file stream to allow shared writing.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> object which can be used to write to the file.</returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender">
            <summary>
            Implementation of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which caches 
            file information.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Close">
            <summary>
            Closes this instance of the appender.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Flush">
            <summary>
            Flushes this current appender.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.GetFileCharacteristics">
            <summary>
            Gets the file info.
            </summary>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes to a file.
            </summary>
            <param name="bytes">The bytes to be written.</param>
        </member>
        <member name="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Factory">
            <summary>
            Factory class which creates <see cref="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender"/> objects.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Factory.NLog#Internal#FileAppenders#IFileAppenderFactory#Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>
            Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which can be used to write to the file.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.IFileAppenderFactory">
            <summary>
            Interface implemented by all factories capable of creating file appenders.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.IFileAppenderFactory.Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which can be used to write to the file.</returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender">
            <summary>
            Provides a multiprocess-safe atomic file appends while
            keeping the files open.
            </summary>
            <remarks>
            On Unix you can get all the appends to be atomic, even when multiple 
            processes are trying to write to the same file, because setting the file
            pointer to the end of the file and appending can be made one operation.
            On Win32 we need to maintain some synchronization between processes
            (global named mutex is used for this)
            </remarks>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes to be written.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.GetFileCharacteristics">
            <summary>
            Gets the file info.
            </summary>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Factory">
            <summary>
            Factory class.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Factory.NLog#Internal#FileAppenders#IFileAppenderFactory#Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>
            Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which can be used to write to the file.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender">
            <summary>
            Multi-process and multi-host file appender which attempts
            to get exclusive write access and retries if it's not available.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.GetFileCharacteristics">
            <summary>
            Gets the file info.
            </summary>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Factory">
            <summary>
            Factory class.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Factory.NLog#Internal#FileAppenders#IFileAppenderFactory#Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>
            Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which can be used to write to the file.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.SingleProcessFileAppender">
            <summary>
            Optimized single-process file appender which keeps the file open for exclusive write.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.SingleProcessFileAppender" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.GetFileCharacteristics">
            <summary>
            Gets the file info.
            </summary>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.SingleProcessFileAppender.Factory">
            <summary>
            Factory class.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Factory.NLog#Internal#FileAppenders#IFileAppenderFactory#Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>
            Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which can be used to write to the file.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileCharacteristics">
            <summary>
            An immutable object that stores basic file info.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileCharacteristics.#ctor(System.DateTime,System.DateTime,System.Int64)">
            <summary>
            Constructs a FileCharacteristics object.
            </summary>
            <param name="creationTimeUtc">The time the file was created in UTC.</param>
            <param name="lastWriteTimeUtc">The time the file was last written to in UTC.</param>
            <param name="fileLength">The size of the file in bytes.</param>
        </member>
        <member name="P:NLog.Internal.FileCharacteristics.CreationTimeUtc">
            <summary>
            The time the file was created in UTC.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileCharacteristics.LastWriteTimeUtc">
            <summary>
            The time the file was last written to in UTC.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileCharacteristics.FileLength">
            <summary>
            The size of the file in bytes.
            </summary>
        </member>
        <member name="T:NLog.Internal.FileCharacteristicsHelper">
            <summary>
            Optimized routines to get the basic file characteristics of the specified file.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileCharacteristicsHelper.#cctor">
            <summary>
            Initializes static members of the FileCharacteristicsHelper class.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileCharacteristicsHelper.GetFileCharacteristics(System.String,System.IntPtr)">
            <summary>
            Gets the information about a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileHandle">The file handle.</param>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="M:NLog.Internal.FormatHelper.ToStringWithOptionalFormat(System.Object,System.String,System.IFormatProvider)">
            <summary>
            toString(format) if the object is a <see cref="T:System.IFormattable"/>
            </summary>
            <param name="value">value to be converted</param>
            <param name="format">format value</param>
            <param name="formatProvider">provider, for example culture</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Internal.FormatHelper.ConvertToString(System.Object,System.IFormatProvider)">
            <summary>
            Convert object to string
            </summary>
            <param name="o">value</param>
            <param name="formatProvider">format for conversion.</param>
            <returns></returns>
            <remarks>
            If <paramref name="formatProvider"/> is <c>null</c> and <paramref name="o"/> isn't a <see cref="T:System.String"/> already, then the <see cref="T:NLog.LogFactory"/> will get a locked by <see cref="P:NLog.LogManager.Configuration"/>
            </remarks>
        </member>
        <member name="T:NLog.Internal.IConfigurationManager">
            <summary>
            Interface for the wrapper around System.Configuration.ConfigurationManager.
            </summary>
        </member>
        <member name="P:NLog.Internal.IConfigurationManager.AppSettings">
            <summary>
            Gets the wrapper around ConfigurationManager.AppSettings.
            </summary>
        </member>
        <member name="T:NLog.Internal.IRenderable">
            <summary>
            Interface implemented by layouts and layout renderers.
            </summary>
        </member>
        <member name="M:NLog.Internal.IRenderable.Render(NLog.LogEventInfo)">
            <summary>
            Renders the the value of layout or layout renderer in the context of the specified log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>String representation of a layout.</returns>
        </member>
        <member name="T:NLog.Internal.ISmtpClient">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="P:NLog.Internal.ISmtpClient.DeliveryMethod">
            <summary>
            Specifies how outgoing email messages will be handled.
            </summary>
        </member>
        <member name="P:NLog.Internal.ISmtpClient.Host">
            <summary>
            Gets or sets the name or IP address of the host used for SMTP transactions.
            </summary>
        </member>
        <member name="P:NLog.Internal.ISmtpClient.Port">
            <summary>
            Gets or sets the port used for SMTP transactions.
            </summary>
        </member>
        <member name="P:NLog.Internal.ISmtpClient.Timeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which a synchronous <see cref="M:NLog.Internal.ISmtpClient.Send(System.Net.Mail.MailMessage)">Send</see> call times out.
            </summary>
        </member>
        <member name="P:NLog.Internal.ISmtpClient.Credentials">
            <summary>
            Gets or sets the credentials used to authenticate the sender.
            </summary>
        </member>
        <member name="M:NLog.Internal.ISmtpClient.Send(System.Net.Mail.MailMessage)">
            <summary>
            Sends an e-mail message to an SMTP server for delivery. These methods block while the message is being transmitted.
            </summary>
            <param name="msg">
              <typeparam>System.Net.Mail.MailMessage
                <name>MailMessage</name>
            </typeparam> A <see cref="T:System.Net.Mail.MailMessage">MailMessage</see> that contains the message to send.</param>
        </member>
        <member name="P:NLog.Internal.ISmtpClient.PickupDirectoryLocation">
            <summary>
            Gets or sets the folder where applications save mail messages to be processed by the local SMTP server.
            </summary>
        </member>
        <member name="T:NLog.Internal.ISupportsInitialize">
            <summary>
            Supports object initialization and termination.
            </summary>
        </member>
        <member name="M:NLog.Internal.ISupportsInitialize.Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.Internal.ISupportsInitialize.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="T:NLog.Internal.IUsesStackTrace">
            <summary>
            Allows components to request stack trace information to be provided in the <see cref="T:NLog.LogEventInfo"/>.
            </summary>
        </member>
        <member name="P:NLog.Internal.IUsesStackTrace.StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
        </member>
        <member name="T:NLog.Internal.MySmtpClient">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.HttpNetworkSender">
            <summary>
            Network sender which uses HTTP or HTTPS POST.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.HttpNetworkSender.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.HttpNetworkSender"/> class.
            </summary>
            <param name="url">The network URL.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.HttpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Actually sends the given text over the specified protocol.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.INetworkSenderFactory">
            <summary>
            Creates instances of <see cref="T:NLog.Internal.NetworkSenders.NetworkSender"/> objects for given URLs.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.INetworkSenderFactory.Create(System.String,System.Int32)">
            <summary>
            Creates a new instance of the network sender based on a network URL.
            </summary>
            <param name="url">
            URL that determines the network sender to be created.
            </param>
            <param name="maxQueueSize">
            The maximum queue size.
            </param>
            <returns>
            A newly created network sender.
            </returns>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.ISocket">
            <summary>
            Interface for mocking socket calls.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.NetworkSenderFactory">
            <summary>
            Default implementation of <see cref="T:NLog.Internal.NetworkSenders.INetworkSenderFactory"/>.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSenderFactory.Create(System.String,System.Int32)">
            <summary>
            Creates a new instance of the network sender based on a network URL:.
            </summary>
            <param name="url">
            URL that determines the network sender to be created.
            </param>
            <param name="maxQueueSize">
            The maximum queue size.
            </param>
            /// <returns>
            A newly created network sender.
            </returns>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.SocketProxy">
            <summary>
            Socket proxy for mocking Socket code.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.SocketProxy"/> class.
            </summary>
            <param name="addressFamily">The address family.</param>
            <param name="socketType">Type of the socket.</param>
            <param name="protocolType">Type of the protocol.</param>
        </member>
        <member name="P:NLog.Internal.NetworkSenders.SocketProxy.UnderlyingSocket">
            <summary>
            Gets underlying socket instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.Close">
            <summary>
            Closes the wrapped socket.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Invokes ConnectAsync method on the wrapped socket.
            </summary>
            <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instance containing the event data.</param>
            <returns>Result of original method.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Invokes SendAsync method on the wrapped socket.
            </summary>
            <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instance containing the event data.</param>
            <returns>Result of original method.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Invokes SendToAsync method on the wrapped socket.
            </summary>
            <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instance containing the event data.</param>
            <returns>Result of original method.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.NetworkSender">
            <summary>
            A base class for all network senders. Supports one-way sending of messages
            over various protocols.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.NetworkSender" /> class.
            </summary>
            <param name="url">The network URL.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Finalize">
            <summary>
            Finalizes an instance of the NetworkSender class.
            </summary>
        </member>
        <member name="P:NLog.Internal.NetworkSenders.NetworkSender.Address">
            <summary>
            Gets the address of the network endpoint.
            </summary>
        </member>
        <member name="P:NLog.Internal.NetworkSenders.NetworkSender.LastSendTime">
            <summary>
            Gets the last send time.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Initialize">
            <summary>
            Initializes this network sender.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Close(NLog.Common.AsyncContinuation)">
            <summary>
            Closes the sender and releases any unmanaged resources.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flushes any pending messages and invokes a continuation.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Send(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Send the given text over the specified protocol.
            </summary>
            <param name="bytes">Bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Dispose">
            <summary>
            Closes the sender and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoInitialize">
            <summary>
            Performs sender-specific initialization.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoClose(NLog.Common.AsyncContinuation)">
            <summary>
            Performs sender-specific close operation.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoFlush(NLog.Common.AsyncContinuation)">
            <summary>
            Performs sender-specific flush.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Actually sends the given text over the specified protocol.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.ParseEndpointAddress(System.Uri,System.Net.Sockets.AddressFamily)">
            <summary>
            Parses the URI into an endpoint address.
            </summary>
            <param name="uri">The URI to parse.</param>
            <param name="addressFamily">The address family.</param>
            <returns>Parsed endpoint.</returns>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.TcpNetworkSender">
            <summary>
            Sends messages over a TCP network connection.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.#ctor(System.String,System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.TcpNetworkSender"/> class.
            </summary>
            <param name="url">URL. Must start with tcp://.</param>
            <param name="addressFamily">The address family.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.CreateSocket(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates the socket with given parameters. 
            </summary>
            <param name="addressFamily">The address family.</param>
            <param name="socketType">Type of the socket.</param>
            <param name="protocolType">Type of the protocol.</param>
            <returns>Instance of <see cref="T:NLog.Internal.NetworkSenders.ISocket" /> which represents the socket.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoInitialize">
            <summary>
            Performs sender-specific initialization.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoClose(NLog.Common.AsyncContinuation)">
            <summary>
            Closes the socket.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoFlush(NLog.Common.AsyncContinuation)">
            <summary>
            Performs sender-specific flush.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Sends the specified text over the connected socket.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.TcpNetworkSender.MySocketAsyncEventArgs">
            <summary>
            Facilitates mocking of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> class.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.MySocketAsyncEventArgs.RaiseCompleted">
            <summary>
            Raises the Completed event.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.UdpNetworkSender">
            <summary>
            Sends messages over the network as UDP datagrams.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.#ctor(System.String,System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.UdpNetworkSender"/> class.
            </summary>
            <param name="url">URL. Must start with udp://.</param>
            <param name="addressFamily">The address family.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.CreateSocket(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates the socket.
            </summary>
            <param name="addressFamily">The address family.</param>
            <param name="socketType">Type of the socket.</param>
            <param name="protocolType">Type of the protocol.</param>
            <returns>Implementation of <see cref="T:NLog.Internal.NetworkSenders.ISocket"/> to use.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoInitialize">
            <summary>
            Performs sender-specific initialization.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoClose(NLog.Common.AsyncContinuation)">
            <summary>
            Closes the socket.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Sends the specified text as a UDP datagram.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="T:NLog.Internal.ObjectGraphScanner">
            <summary>
            Scans (breadth-first) the object graph following all the edges whose are 
            instances have <see cref="T:NLog.Config.NLogConfigurationItemAttribute"/> attached and returns 
            all objects implementing a specified interfaces.
            </summary>
        </member>
        <member name="M:NLog.Internal.ObjectGraphScanner.FindReachableObjects``1(System.Object[])">
            <summary>
            Finds the objects which have attached <see cref="T:NLog.Config.NLogConfigurationItemAttribute"/> which are reachable
            from any of the given root objects when traversing the object graph over public properties.
            </summary>
            <typeparam name="T">Type of the objects to return.</typeparam>
            <param name="rootObjects">The root objects.</param>
            <returns>Ordered list of objects implementing T.</returns>
        </member>
        <member name="M:NLog.Internal.ObjectGraphScanner.ScanProperties``1(System.Collections.Generic.List{``0},System.Object,System.Int32,System.Collections.Generic.HashSet{System.Object})">
            <remarks>ISet is not there in .net35, so using HashSet</remarks>
        </member>
        <member name="T:NLog.Internal.ParameterUtils">
            <summary>
            Parameter validation utilities.
            </summary>
        </member>
        <member name="M:NLog.Internal.ParameterUtils.AssertNotNull(System.Object,System.String)">
            <summary>
            Asserts that the value is not null and throws <see cref="T:System.ArgumentNullException"/> otherwise.
            </summary>
            <param name="value">The value to check.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="T:NLog.Internal.PortableFileCharacteristicsHelper">
            <summary>
            Portable implementation of <see cref="T:NLog.Internal.FileCharacteristicsHelper"/>.
            </summary>
        </member>
        <member name="M:NLog.Internal.PortableFileCharacteristicsHelper.GetFileCharacteristics(System.String,System.IntPtr)">
            <summary>
            Gets the information about a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileHandle">The file handle.</param>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="T:NLog.Internal.PortableThreadIDHelper">
            <summary>
            Portable implementation of <see cref="T:NLog.Internal.ThreadIDHelper"/>.
            </summary>
        </member>
        <member name="M:NLog.Internal.PortableThreadIDHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.PortableThreadIDHelper" /> class.
            </summary>
        </member>
        <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessID">
            <summary>
            Gets current process ID.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessName">
            <summary>
            Gets current process name.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessBaseName">
            <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
            <value></value>
        </member>
        <member name="M:NLog.Internal.PortableThreadIDHelper.GetProcessName">
            <summary>
            Gets the name of the process.
            </summary>
        </member>
        <member name="T:NLog.Internal.ReflectionHelpers">
            <summary>
            Reflection helpers.
            </summary>
        </member>
        <member name="M:NLog.Internal.ReflectionHelpers.SafeGetTypes(System.Reflection.Assembly)">
            <summary>
            Gets all usable exported types from the given assembly.
            </summary>
            <param name="assembly">Assembly to scan.</param>
            <returns>Usable types from the given assembly.</returns>
            <remarks>Types which cannot be loaded are skipped.</remarks>
        </member>
        <member name="M:NLog.Internal.ReflectionHelpers.IsStaticClass(System.Type)">
            <summary>
            Is this a static class?
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>This is a work around, as Type doesn't have this property. 
            From: http://stackoverflow.com/questions/1175888/determine-if-a-type-is-static
            </remarks>
        </member>
        <member name="T:NLog.Internal.RuntimeOS">
            <summary>
            Supported operating systems.
            </summary>
            <remarks>
            If you add anything here, make sure to add the appropriate detection
            code to <see cref="T:NLog.Internal.PlatformDetector"/>
            </remarks>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.Any">
            <summary>
            Any operating system.
            </summary>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.Unix">
            <summary>
            Unix/Linux operating systems.
            </summary>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.WindowsCE">
            <summary>
            Windows CE.
            </summary>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.Windows">
            <summary>
            Desktop versions of Windows (95,98,ME).
            </summary>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.WindowsNT">
            <summary>
            Windows NT, 2000, 2003 and future versions based on NT technology.
            </summary>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.Unknown">
            <summary>
            Unknown operating system.
            </summary>
        </member>
        <member name="T:NLog.Internal.SimpleStringReader">
            <summary>
            Simple character tokenizer.
            </summary>
        </member>
        <member name="M:NLog.Internal.SimpleStringReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.SimpleStringReader" /> class.
            </summary>
            <param name="text">The text to be tokenized.</param>
        </member>
        <member name="P:NLog.Internal.SimpleStringReader.Position">
            <summary>
            Current position in <see cref="P:NLog.Internal.SimpleStringReader.Text"/>
            </summary>
        </member>
        <member name="P:NLog.Internal.SimpleStringReader.Text">
            <summary>
            Full text to be parsed
            </summary>
        </member>
        <member name="M:NLog.Internal.SimpleStringReader.Peek">
            <summary>
            Check current char while not changing the position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Internal.SimpleStringReader.Read">
            <summary>
            Read the current char and change position
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Internal.SimpleStringReader.Substring(System.Int32,System.Int32)">
            <summary>
            Get the substring of the <see cref="P:NLog.Internal.SimpleStringReader.Text"/>
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.Internal.SingleCallContinuation">
            <summary>
            Implements a single-call guard around given continuation function.
            </summary>
        </member>
        <member name="M:NLog.Internal.SingleCallContinuation.#ctor(NLog.Common.AsyncContinuation)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.SingleCallContinuation"/> class.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Internal.SingleCallContinuation.Function(System.Exception)">
            <summary>
            Continuation function which implements the single-call guard.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:NLog.Internal.SortHelpers">
            <summary>
            Provides helpers to sort log events and associated continuations.
            </summary>
        </member>
        <member name="T:NLog.Internal.SortHelpers.KeySelector`2">
            <summary>
            Key selector delegate.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="value">Value to extract key information from.</param>
            <returns>Key selected from log event.</returns>
        </member>
        <member name="M:NLog.Internal.SortHelpers.BucketSort``2(System.Collections.Generic.IEnumerable{``0},NLog.Internal.SortHelpers.KeySelector{``0,``1})">
            <summary>
            Performs bucket sort (group by) on an array of items and returns a dictionary for easy traversal of the result set.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="inputs">The inputs.</param>
            <param name="keySelector">The key selector function.</param>
            <returns>
            Dictionary where keys are unique input keys, and values are lists of <see cref="T:NLog.Common.AsyncLogEventInfo"/>.
            </returns>
        </member>
        <member name="T:NLog.Internal.StackTraceUsageUtils">
            <summary>
            Utilities for dealing with <see cref="T:NLog.Config.StackTraceUsage"/> values.
            </summary>
        </member>
        <member name="M:NLog.Internal.StackTraceUsageUtils.GetWriteStackTrace(System.Type)">
            <summary>
            Get this stacktrace for inline unit test
            </summary>
            <param name="loggerType"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.Internal.StreamHelpers">
            <summary>
            Stream helpers
            </summary>
        </member>
        <member name="M:NLog.Internal.StreamHelpers.CopyWithOffset(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copy stream input to output. Skip the first bytes
            </summary>
            <param name="input">stream to read from</param>
            <param name="output">stream to write to</param>
            <param name="offset">first bytes to skip (optional)</param>
        </member>
        <member name="T:NLog.Internal.StringBuilderExt">
            <summary>
            Helpers for <see cref="T:System.Text.StringBuilder"/>, which is used in e.g. layout renderers.
            </summary>
        </member>
        <member name="M:NLog.Internal.StringBuilderExt.Append(System.Text.StringBuilder,System.Object,NLog.LogEventInfo,NLog.Config.LoggingConfiguration)">
            <summary>
            Append a value and use formatProvider of <paramref name="logEvent"/> or <paramref name="configuration"/> to convert to string.
            </summary>
            <param name="builder"></param>
            <param name="o">value to append.</param>
            <param name="logEvent">current logEvent for FormatProvider.</param>
            <param name="configuration">Configuration for DefaultCultureInfo</param>
        </member>
        <member name="T:NLog.Internal.StringHelpers">
            <summary>
            Helpers for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:NLog.Internal.StringHelpers.IsNullOrWhiteSpace(System.String)">
            <summary>
            IsNullOrWhiteSpace, including for .NET 3.5
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.Internal.ThreadLocalStorageHelper">
            <summary>
            Helper for dealing with thread-local storage.
            </summary>
        </member>
        <member name="M:NLog.Internal.ThreadLocalStorageHelper.AllocateDataSlot">
            <summary>
            Allocates the data slot for storing thread-local information.
            </summary>
            <returns>Allocated slot key.</returns>
        </member>
        <member name="M:NLog.Internal.ThreadLocalStorageHelper.GetDataForSlot``1(System.Object)">
            <summary>
            Gets the data for a slot in thread-local storage.
            </summary>
            <typeparam name="T">Type of the data.</typeparam>
            <param name="slot">The slot to get data for.</param>
            <returns>
            Slot data (will create T if null).
            </returns>
        </member>
        <member name="T:NLog.Internal.TimeoutContinuation">
            <summary>
            Wraps <see cref="T:NLog.Common.AsyncContinuation"/> with a timeout.
            </summary>
        </member>
        <member name="M:NLog.Internal.TimeoutContinuation.#ctor(NLog.Common.AsyncContinuation,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.TimeoutContinuation"/> class.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:NLog.Internal.TimeoutContinuation.Function(System.Exception)">
            <summary>
            Continuation function which implements the timeout logic.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:NLog.Internal.TimeoutContinuation.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:NLog.Internal.UrlHelper">
            <summary>
            URL Encoding helper.
            </summary>
        </member>
        <member name="M:NLog.Internal.UrlHelper.UrlEncode(System.String,System.Boolean)">
            <summary>
            Url encode and URL
            </summary>
            <param name="str">URL to be encoded</param>
            <param name="spaceAsPlus">space as + or %20? <c>false</c> (%20) is the safe option.</param>
            <returns>Encoded url.</returns>
        </member>
        <member name="M:NLog.Internal.UrlHelper.IsSafeUrlCharacter(System.Char)">
            <summary>
            Is this character safe in the URL?
            </summary>
            <param name="ch">char to test.</param>
            <returns><c>true</c> is safe.</returns>
        </member>
        <member name="T:NLog.Internal.Win32FileCharacteristicsHelper">
            <summary>
            Win32-optimized implementation of <see cref="T:NLog.Internal.FileCharacteristicsHelper"/>.
            </summary>
        </member>
        <member name="M:NLog.Internal.Win32FileCharacteristicsHelper.GetFileCharacteristics(System.String,System.IntPtr)">
            <summary>
            Gets the information about a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileHandle">The file handle.</param>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="T:NLog.Internal.Win32ThreadIDHelper">
            <summary>
            Win32-optimized implementation of <see cref="T:NLog.Internal.ThreadIDHelper"/>.
            </summary>
        </member>
        <member name="M:NLog.Internal.Win32ThreadIDHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.Win32ThreadIDHelper" /> class.
            </summary>
        </member>
        <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessID">
            <summary>
            Gets current process ID.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessName">
            <summary>
            Gets current process name.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessBaseName">
            <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
            <value></value>
        </member>
        <member name="T:NLog.Internal.XmlHelper">
            <summary>
             Helper class for XML
            </summary>
        </member>
        <member name="M:NLog.Internal.XmlHelper.RemoveInvalidXmlChars(System.String)">
            <summary>
            removes any unusual unicode characters that can't be encoded into XML
            </summary>
        </member>
        <member name="M:NLog.Internal.XmlHelper.WriteAttributeSafeString(System.Xml.XmlWriter,System.String,System.String,System.String,System.String)">
            <summary>
            Safe version of WriteAttributeString
            </summary>
            <param name="writer"></param>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="ns"></param>
            <param name="value"></param>
        </member>
        <member name="M:NLog.Internal.XmlHelper.WriteAttributeSafeString(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Safe version of WriteAttributeString
            </summary>
            <param name="writer"></param>
            <param name="thread"></param>
            <param name="localName"></param>
        </member>
        <member name="M:NLog.Internal.XmlHelper.WriteElementSafeString(System.Xml.XmlWriter,System.String,System.String,System.String,System.String)">
            <summary>
            Safe version of WriteElementSafeString
            </summary>
            <param name="writer"></param>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="ns"></param>
            <param name="value"></param>
        </member>
        <member name="M:NLog.Internal.XmlHelper.WriteSafeCData(System.Xml.XmlWriter,System.String)">
            <summary>
            Safe version of WriteCData
            </summary>
            <param name="writer"></param>
            <param name="text"></param>
        </member>
        <member name="T:NLog.Internal.EnvironmentHelper">
            <summary>
            Safe way to get environment variables.
            </summary>
        </member>
        <member name="T:NLog.Internal.FactoryHelper">
            <summary>
            Object construction helper.
            </summary>
        </member>
        <member name="T:NLog.Internal.LoggerConfiguration">
            <summary>
            Logger configuration.
            </summary>
        </member>
        <member name="M:NLog.Internal.LoggerConfiguration.#ctor(NLog.Internal.TargetWithFilterChain[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.LoggerConfiguration" /> class.
            </summary>
            <param name="targetsByLevel">The targets by level.</param>
            <param name="exceptionLoggingOldStyle">  Use the old exception log handling of NLog 3.0? 
            </param>
        </member>
        <member name="P:NLog.Internal.LoggerConfiguration.ExceptionLoggingOldStyle">
            <summary>
            Use the old exception log handling of NLog 3.0? 
            </summary>
        </member>
        <member name="M:NLog.Internal.LoggerConfiguration.GetTargetsForLevel(NLog.LogLevel)">
            <summary>
            Gets targets for the specified level.
            </summary>
            <param name="level">The level.</param>
            <returns>Chain of targets with attached filters.</returns>
        </member>
        <member name="M:NLog.Internal.LoggerConfiguration.IsEnabled(NLog.LogLevel)">
            <summary>
            Determines whether the specified level is enabled.
            </summary>
            <param name="level">The level.</param>
            <returns>
            A value of <c>true</c> if the specified level is enabled; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NLog.Internal.MultiFileWatcher">
            <summary>
            Watches multiple files at the same time and raises an event whenever 
            a single change is detected in any of those files.
            </summary>
        </member>
        <member name="P:NLog.Internal.MultiFileWatcher.NotifyFilters">
            <summary>
            The types of changes to watch for.
            </summary>
        </member>
        <member name="E:NLog.Internal.MultiFileWatcher.OnChange">
            <summary>
            Occurs when a change is detected in one of the monitored files.
            </summary>
        </member>
        <member name="M:NLog.Internal.MultiFileWatcher.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Internal.MultiFileWatcher.StopWatching">
            <summary>
            Stops watching all files.
            </summary>
        </member>
        <member name="M:NLog.Internal.MultiFileWatcher.StopWatching(System.String)">
            <summary>
            Stops watching the specified file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:NLog.Internal.MultiFileWatcher.Watch(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Watches the specified files for changes.
            </summary>
            <param name="fileNames">The file names.</param>
        </member>
        <member name="T:NLog.Internal.PlatformDetector">
            <summary>
            Detects the platform the NLog is running on.
            </summary>
        </member>
        <member name="P:NLog.Internal.PlatformDetector.CurrentOS">
            <summary>
            Gets the current runtime OS.
            </summary>
        </member>
        <member name="P:NLog.Internal.PlatformDetector.IsDesktopWin32">
            <summary>
            Gets a value indicating whether current OS is a desktop version of Windows.
            </summary>
        </member>
        <member name="P:NLog.Internal.PlatformDetector.IsWin32">
            <summary>
            Gets a value indicating whether current OS is Win32-based (desktop or mobile).
            </summary>
        </member>
        <member name="P:NLog.Internal.PlatformDetector.IsUnix">
            <summary>
            Gets a value indicating whether current OS is Unix-based.
            </summary>
        </member>
        <member name="T:NLog.Internal.PropertyHelper">
            <summary>
            Reflection helpers for accessing properties.
            </summary>
        </member>
        <member name="M:NLog.Internal.PropertyHelper.SetPropertyFromString(System.Object,System.String,System.String,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Set value parsed from string.
            </summary>
            <param name="obj">object instance to set with property <paramref name="propertyName"/></param>
            <param name="propertyName">name of the property on <paramref name="obj"/></param>
            <param name="value">The value to be parsed.</param>
            <param name="configurationItemFactory"></param>
        </member>
        <member name="M:NLog.Internal.PropertyHelper.IsArrayProperty(System.Type,System.String)">
            <summary>
            Is the property of array-type?
            </summary>
            <param name="t">Type which has the property <paramref name="propertyName"/></param>
            <param name="propertyName">name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Internal.PropertyHelper.TryGetPropertyInfo(System.Object,System.String,System.Reflection.PropertyInfo@)">
            <summary>
            Get propertyinfo
            </summary>
            <param name="obj">object which could have property <paramref name="propertyName"/></param>
            <param name="propertyName">propertyname on <paramref name="obj"/></param>
            <param name="result">result when success.</param>
            <returns>success.</returns>
        </member>
        <member name="T:NLog.Internal.TargetWithFilterChain">
            <summary>
            Represents target with a chain of filters which determine
            whether logging should happen.
            </summary>
        </member>
        <member name="F:NLog.Internal.TargetWithFilterChain._stackTraceUsage">
            <summary>
            cached result as calculating is expensive.
            </summary>
        </member>
        <member name="M:NLog.Internal.TargetWithFilterChain.#ctor(NLog.Targets.Target,System.Collections.Generic.IList{NLog.Filters.Filter})">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.TargetWithFilterChain" /> class.
            </summary>
            <param name="target">The target.</param>
            <param name="filterChain">The filter chain.</param>
        </member>
        <member name="P:NLog.Internal.TargetWithFilterChain.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:NLog.Internal.TargetWithFilterChain.FilterChain">
            <summary>
            Gets the filter chain.
            </summary>
            <value>The filter chain.</value>
        </member>
        <member name="P:NLog.Internal.TargetWithFilterChain.NextInChain">
            <summary>
            Gets or sets the next <see cref="T:NLog.Internal.TargetWithFilterChain"/> item in the chain.
            </summary>
            <value>The next item in the chain.</value>
            <example>This is for example the 'target2' logger in writeTo='target1,target2'  </example>
        </member>
        <member name="M:NLog.Internal.TargetWithFilterChain.GetStackTraceUsage">
            <summary>
            Gets the stack trace usage.
            </summary>
            <returns>A <see cref="T:NLog.Config.StackTraceUsage" /> value that determines stack trace handling.</returns>
        </member>
        <member name="T:NLog.Internal.ThreadIDHelper">
            <summary>
            Returns details about current process and thread in a portable manner.
            </summary>
        </member>
        <member name="M:NLog.Internal.ThreadIDHelper.#cctor">
            <summary>
            Initializes static members of the ThreadIDHelper class.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.Instance">
            <summary>
            Gets the singleton instance of PortableThreadIDHelper or
            Win32ThreadIDHelper depending on runtime environment.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessID">
            <summary>
            Gets current process ID.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessName">
            <summary>
            Gets current process name.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessBaseName">
            <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
        </member>
        <member name="T:NLog.ISuppress">
            <summary>
            Provides an interface to execute System.Actions without surfacing any exceptions raised for that action.
            </summary>
        </member>
        <member name="M:NLog.ISuppress.Swallow(System.Action)">
            <summary>
            Runs the provided action. If the action throws, the exception is logged at <c>Error</c> level. The exception is not propagated outside of this method.
            </summary>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:NLog.ISuppress.Swallow``1(System.Func{``0})">
            <summary>
            Runs the provided function and returns its result. If an exception is thrown, it is logged at <c>Error</c> level.
            The exception is not propagated outside of this method; a default value is returned instead.
            </summary>
            <typeparam name="T">Return type of the provided function.</typeparam>
            <param name="func">Function to run.</param>
            <returns>Result returned by the provided function or the default value of type <typeparamref name="T"/> in case of exception.</returns>
        </member>
        <member name="M:NLog.ISuppress.Swallow``1(System.Func{``0},``0)">
            <summary>
            Runs the provided function and returns its result. If an exception is thrown, it is logged at <c>Error</c> level.
            The exception is not propagated outside of this method; a fallback value is returned instead.
            </summary>
            <typeparam name="T">Return type of the provided function.</typeparam>
            <param name="func">Function to run.</param>
            <param name="fallback">Fallback value to return in case of exception.</param>
            <returns>Result returned by the provided function or fallback value in case of exception.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer">
            <summary>
            Log event context data.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer.Separator">
            <summary>
            Gets or sets string that will be used to separate key/value pairs.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer.Format">
            <summary>
            Gets or sets how key/value pairs will be formatted.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders all log event's properties and appends them to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.AmbientPropertyAttribute">
            <summary>
            Designates a property of the class as an ambient property.
            </summary>
            <example>
            non-ambient:  ${uppercase:${level}} 
            ambient    :  ${level:uppercase} 
            </example>
        </member>
        <member name="M:NLog.LayoutRenderers.AmbientPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.AmbientPropertyAttribute" /> class.
            </summary>
            <param name="name">Ambient property name.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.AppDomainLayoutRenderer">
            <summary>
             Used to render the application domain name.
             </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AppDomainLayoutRenderer.#ctor">
            <summary>
            Create a new renderer
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AppDomainLayoutRenderer.#ctor(NLog.Internal.Fakeables.IAppDomain)">
            <summary>
            Create a new renderer
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.AppDomainLayoutRenderer.Format">
            <summary>
            Format string. Possible values: "Short", "Long" or custom like {0} {1}. Default "Long"
            The first parameter is the  <see cref="P:System.AppDomain.Id"/>, the second the second the  <see cref="P:System.AppDomain.FriendlyName"/>
            This string is used in <see cref="M:System.String.Format(System.String,System.Object[])"/>
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AppDomainLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Render the layout
            </summary>
            <param name="builder"></param>
            <param name="logEvent"></param>
        </member>
        <member name="M:NLog.LayoutRenderers.AppDomainLayoutRenderer.GetFormattingString(System.String)">
            <summary>
            Convert the formatting string
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer">
            <summary>
            ASP Application variable.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer.Variable">
            <summary>
            Gets or sets the ASP Application variable name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.AspRequestValueLayoutRenderer">
            <summary>
            ASP Request variable.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Item">
            <summary>
            Gets or sets the item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.QueryString">
            <summary>
            Gets or sets the QueryString variable to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Form">
            <summary>
            Gets or sets the form variable to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Cookie">
            <summary>
            Gets or sets the cookie to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.ServerVariable">
            <summary>
            Gets or sets the ServerVariables item to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP Request variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.AspSessionValueLayoutRenderer">
            <summary>
            ASP Session variable.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.AspSessionValueLayoutRenderer.Variable">
            <summary>
            Gets or sets the session variable name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.AspSessionValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP Session variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.AssemblyVersionLayoutRenderer">
            <summary>
            Assembly version.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AssemblyVersionLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders assembly version and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.BaseDirLayoutRenderer">
            <summary>
            The current application domain's base directory.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.BaseDirLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.#ctor(NLog.Internal.Fakeables.IAppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.BaseDirLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.BaseDirLayoutRenderer.File">
            <summary>
            Gets or sets the name of the file to be Path.Combine()'d with with the base directory.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.BaseDirLayoutRenderer.Dir">
            <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with with the base directory.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the application base directory and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.CallSiteLayoutRenderer">
            <summary>
            The call site (class name, method name and source information).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.CallSiteLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.ClassName">
            <summary>
            Gets or sets a value indicating whether to render the class name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.MethodName">
            <summary>
            Gets or sets a value indicating whether to render the method name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.CleanNamesOfAnonymousDelegates">
            <summary>
            Gets or sets a value indicating whether the method name will be cleaned up if it is detected as an anonymous delegate.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.SkipFrames">
            <summary>
            Gets or sets the number of frames to skip.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.FileName">
            <summary>
            Gets or sets a value indicating whether to render the source file name and line number.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.IncludeSourcePath">
            <summary>
            Gets or sets a value indicating whether to include source file path.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.NLog#Internal#IUsesStackTrace#StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.CallSiteLineNumberLayoutRenderer">
            <summary>
            The call site source line number. Full callsite <see cref="T:NLog.LayoutRenderers.CallSiteLayoutRenderer"/>
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLineNumberLayoutRenderer.SkipFrames">
            <summary>
            Gets or sets the number of frames to skip.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLineNumberLayoutRenderer.NLog#Internal#IUsesStackTrace#StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CallSiteLineNumberLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.CounterLayoutRenderer">
            <summary>
            A counter value (increases on each layout rendering).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CounterLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.CounterLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Value">
            <summary>
            Gets or sets the initial value of the counter.
            </summary>
            <docgen category='Counter Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Increment">
            <summary>
            Gets or sets the value to be added to the counter after each layout rendering.
            </summary>
            <docgen category='Counter Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Sequence">
            <summary>
            Gets or sets the name of the sequence. Different named sequences can have individual values.
            </summary>
            <docgen category='Counter Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.CounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified counter value and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.DateLayoutRenderer">
            <summary>
            Current date and time.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.DateLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.DateLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.Culture">
            <summary>
            Gets or sets the culture used for rendering. 
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.Format">
            <summary>
            Gets or sets the date format. Can be any argument accepted by DateTime.ToString(format).
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.UniversalTime">
            <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.DateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current date and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.EnvironmentLayoutRenderer">
            <summary>
            The environment variable.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Variable">
            <summary>
            Gets or sets the name of the environment variable.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Default">
            <summary>
            Gets or sets the default value to be used when the environment variable is not set.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environment variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.EventContextLayoutRenderer">
            <summary>
            Log event context data.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.EventContextLayoutRenderer.Item">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.EventContextLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified log event context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.EventPropertiesLayoutRenderer">
            <summary>
            Log event context data. See <see cref="P:NLog.LogEventInfo.Properties"/>.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.EventPropertiesLayoutRenderer.#ctor">
            <summary>
             Log event context data with default options.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.EventPropertiesLayoutRenderer.Item">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.EventPropertiesLayoutRenderer.Format">
            <summary>
            Format string for conversion from object to string.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.EventPropertiesLayoutRenderer.Culture">
            <summary>
            Gets or sets the culture used for rendering. 
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.EventPropertiesLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified log event context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ExceptionLayoutRenderer">
            <summary>
            Exception information provided through 
            a call to one of the Logger.*Exception() methods.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.ExceptionLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Format">
            <summary>
            Gets or sets the format of the output. Must be a comma-separated list of exception
            properties: Message, Type, ShortType, ToString, Method, StackTrace.
            This parameter value is case-insensitive.
            </summary>
            <see cref="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Formats"/>
            <see cref="T:NLog.Config.ExceptionRenderingFormat"/>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.InnerFormat">
            <summary>
            Gets or sets the format of the output of inner exceptions. Must be a comma-separated list of exception
            properties: Message, Type, ShortType, ToString, Method, StackTrace.
            This parameter value is case-insensitive.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Separator">
            <summary>
            Gets or sets the separator used to concatenate parts specified in the Format.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.MaxInnerExceptionLevel">
            <summary>
            Gets or sets the maximum number of inner exceptions to include in the output.
            By default inner exceptions are not enabled for compatibility with NLog 1.0.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.InnerExceptionSeparator">
            <summary>
            Gets or sets the separator between inner exceptions.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Formats">
            <summary>
             Gets the formats of the output of inner exceptions to be rendered in target.
            </summary>
            <docgen category='Rendering Options' order='10' />
            <see cref="T:NLog.Config.ExceptionRenderingFormat"/>
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.InnerFormats">
            <summary>
             Gets the formats of the output to be rendered in target.
            </summary>
            <docgen category='Rendering Options' order='10' />
            <see cref="T:NLog.Config.ExceptionRenderingFormat"/>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified exception information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendMessage(System.Text.StringBuilder,System.Exception)">
            <summary>
            Appends the Message of an Exception to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ex">The exception containing the Message to append.</param>        
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendMethod(System.Text.StringBuilder,System.Exception)">
            <summary>
            Appends the method name from Exception's stack trace to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ex">The Exception whose method name should be appended.</param>        
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendStackTrace(System.Text.StringBuilder,System.Exception)">
            <summary>
            Appends the stack trace from an Exception to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ex">The Exception whose stack trace should be appended.</param>        
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendToString(System.Text.StringBuilder,System.Exception)">
            <summary>
            Appends the result of calling ToString() on an Exception to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ex">The Exception whose call to ToString() should be appended.</param>       
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendType(System.Text.StringBuilder,System.Exception)">
            <summary>
            Appends the type of an Exception to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ex">The Exception whose type should be appended.</param>        
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendShortType(System.Text.StringBuilder,System.Exception)">
            <summary>
            Appends the short type of an Exception to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ex">The Exception whose short type should be appended.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendData(System.Text.StringBuilder,System.Exception)">
            <summary>
            Appends the contents of an Exception's Data property to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ex">The Exception whose Data property elements should be appended.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.CompileFormat(System.String)">
            <summary>
            Split the string and then compile into list of Rendering formats.
            </summary>
            <param name="formatSpecifier"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.LayoutRenderers.FileContentsLayoutRenderer">
            <summary>
            Renders contents of the specified file.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.FileContentsLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.FileContentsLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.FileContentsLayoutRenderer.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <docgen category='File Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.FileContentsLayoutRenderer.Encoding">
            <summary>
            Gets or sets the encoding used in the file.
            </summary>
            <value>The encoding.</value>
            <docgen category='File Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.FileContentsLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the contents of the specified file and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer">
            <summary>
            The information about the garbage collector.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.Property">
            <summary>
            Gets or sets the property to retrieve.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the selected process information.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.GarbageCollectorProperty">
            <summary>
            Gets or sets the property of System.GC to retrieve.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.TotalMemory">
            <summary>
            Total memory allocated.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.TotalMemoryForceCollection">
            <summary>
            Total memory allocated (perform full garbage collection first).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount0">
            <summary>
            Gets the number of Gen0 collections.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount1">
            <summary>
            Gets the number of Gen1 collections.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount2">
            <summary>
            Gets the number of Gen2 collections.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.MaxGeneration">
            <summary>
            Maximum generation number supported by GC.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.GdcLayoutRenderer">
            <summary>
            Global Diagnostics Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.GdcLayoutRenderer.Item">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.GdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified Global Diagnostics Context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.GuidLayoutRenderer">
            <summary>
            Globally-unique identifier (GUID).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GuidLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.GuidLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.GuidLayoutRenderer.Format">
            <summary>
            Gets or sets the GUID format as accepted by Guid.ToString() method.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.GuidLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders a newly generated GUID string and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.IdentityLayoutRenderer">
            <summary>
            Thread identity information (name and authentication information).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.IdentityLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.IdentityLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.Separator">
            <summary>
            Gets or sets the separator to be used when concatenating 
            parts of identity information.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.Name">
            <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.Name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.AuthType">
            <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.AuthenticationType.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.IsAuthenticated">
            <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.IsAuthenticated.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.IdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified identity information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.InstallContextLayoutRenderer">
            <summary>
            Installation parameter (passed to InstallNLogConfig).
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.InstallContextLayoutRenderer.Parameter">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.InstallContextLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified installation parameter and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LayoutRenderer">
            <summary>
            Render environmental information related to logging events.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.LayoutRenderer.LoggingConfiguration">
            <summary>
            Gets the logging configuration this target is part of.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Render(NLog.LogEventInfo)">
            <summary>
            Renders the the value of layout renderer in the context of the specified log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>String representation of a layout renderer.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.NLog#Internal#ISupportsInitialize#Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.NLog#Internal#ISupportsInitialize#Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environmental information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.CloseLayoutRenderer">
            <summary>
            Closes the layout renderer.
            </summary>      
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LayoutRendererAttribute">
            <summary>
            Marks class as a layout renderer and assigns a name to it.
            </summary>
            <remarks>This attribute is not required when registering the layout in the API.</remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRendererAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LayoutRendererAttribute" /> class.
            </summary>
            <param name="name">Name of the layout renderer, without the `${ }`</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LevelLayoutRenderer">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LevelLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current log level and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LiteralLayoutRenderer">
            <summary>
            A string literal.
            </summary>
            <remarks>
            This is used to escape '${' sequence 
            as ;${literal:text=${}'
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LiteralLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LiteralLayoutRenderer" /> class.
            </summary>
            <param name="text">The literal text value.</param>
            <remarks>This is used by the layout compiler.</remarks>
        </member>
        <member name="P:NLog.LayoutRenderers.LiteralLayoutRenderer.Text">
            <summary>
            Gets or sets the literal text.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified string literal and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer">
            <summary>
            XML event description compatible with log4j, Chainsaw and NLogViewer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.#ctor(NLog.Internal.Fakeables.IAppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeNLogData">
            <summary>
            Gets or sets a value indicating whether to include NLog-specific extensions to log4j schema.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IndentXml">
            <summary>
            Gets or sets a value indicating whether the XML should use spaces for indentation.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.AppInfo">
            <summary>
            Gets or sets the AppInfo field. By default it's the friendly name of the current AppDomain.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeCallSite">
            <summary>
            Gets or sets a value indicating whether to include call site (class and method name) in the information sent over the network.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeSourceInfo">
            <summary>
            Gets or sets a value indicating whether to include source info (file name and line number) in the information sent over the network.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeMdc">
            <summary>
            Gets or sets a value indicating whether to include contents of the <see cref="T:NLog.MappedDiagnosticsContext"/> dictionary.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeNdc">
            <summary>
            Gets or sets a value indicating whether to include contents of the <see cref="T:NLog.NestedDiagnosticsContext"/> stack.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.NdcItemSeparator">
            <summary>
            Gets or sets the NDC item separator.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.NLog#Internal#IUsesStackTrace#StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the XML logging event and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LoggerNameLayoutRenderer">
            <summary>
            The logger name.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.LoggerNameLayoutRenderer.ShortName">
            <summary>
            Gets or sets a value indicating whether to render short logger name (the part after the trailing dot character).
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.LoggerNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the logger name and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LongDateLayoutRenderer">
            <summary>
            The date and time in a long, sortable format yyyy-MM-dd HH:mm:ss.mmm.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.LongDateLayoutRenderer.UniversalTime">
            <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.LongDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the date in the long format (yyyy-MM-dd HH:mm:ss.mmm) and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.MachineNameLayoutRenderer">
            <summary>
            The machine name that the process is running on.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the machine name and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.MdcLayoutRenderer">
            <summary>
            Mapped Diagnostic Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.MdcLayoutRenderer.Item">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.MdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified MDC item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.MessageLayoutRenderer">
            <summary>
            The formatted log message.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MessageLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.MessageLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.MessageLayoutRenderer.WithException">
            <summary>
            Gets or sets a value indicating whether to log exception along with message.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.MessageLayoutRenderer.ExceptionSeparator">
            <summary>
            Gets or sets the string that separates message from the exception.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.MessageLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the log message including any positional parameters and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.NdcLayoutRenderer">
            <summary>
            Nested Diagnostic Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NdcLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.NdcLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.TopFrames">
            <summary>
            Gets or sets the number of top stack frames to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.BottomFrames">
            <summary>
            Gets or sets the number of bottom stack frames to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.Separator">
            <summary>
            Gets or sets the separator to be used for concatenating nested diagnostics context output.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.NdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified Nested Diagnostics Context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.NewLineLayoutRenderer">
            <summary>
            A newline literal.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NewLineLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified string literal and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.NLogDirLayoutRenderer">
            <summary>
            The directory where NLog.dll is located.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NLogDirLayoutRenderer.#cctor">
            <summary>
            Initializes static members of the NLogDirLayoutRenderer class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.NLogDirLayoutRenderer.File">
            <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.NLogDirLayoutRenderer.Dir">
            <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.NLogDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer">
            <summary>
            The performance counter.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Category">
            <summary>
            Gets or sets the name of the counter category.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Counter">
            <summary>
            Gets or sets the name of the performance counter.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Instance">
            <summary>
            Gets or sets the name of the performance counter instance (e.g. this.Global_).
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.MachineName">
            <summary>
            Gets or sets the name of the machine to read the performance counter from.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.CloseLayoutRenderer">
            <summary>
            Closes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environment variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessIdLayoutRenderer">
            <summary>
            The identifier of the current process.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current process ID.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessInfoLayoutRenderer">
            <summary>
            The information about the running process.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.ProcessInfoLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Property">
            <summary>
            Gets or sets the property to retrieve.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.CloseLayoutRenderer">
            <summary>
            Closes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the selected process information.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessInfoProperty">
            <summary>
            Property of System.Diagnostics.Process to retrieve.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.BasePriority">
            <summary>
            Base Priority.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.ExitCode">
            <summary>
            Exit Code.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.ExitTime">
            <summary>
            Exit Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.Handle">
            <summary>
            Process Handle.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.HandleCount">
            <summary>
            Handle Count.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.HasExited">
            <summary>
            Whether process has exited.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.Id">
            <summary>
            Process ID.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MachineName">
            <summary>
            Machine name.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MainWindowHandle">
            <summary>
            Handle of the main window.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MainWindowTitle">
            <summary>
            Title of the main window.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MaxWorkingSet">
            <summary>
            Maximum Working Set.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MinWorkingSet">
            <summary>
            Minimum Working Set.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.NonPagedSystemMemorySize">
            <summary>
            Non-paged System Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.NonPagedSystemMemorySize64">
            <summary>
            Non-paged System Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedMemorySize">
            <summary>
            Paged Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedMemorySize64">
            <summary>
            Paged Memory Size (64-bit)..
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedSystemMemorySize">
            <summary>
            Paged System Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedSystemMemorySize64">
            <summary>
            Paged System Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakPagedMemorySize">
            <summary>
            Peak Paged Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakPagedMemorySize64">
            <summary>
            Peak Paged Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakVirtualMemorySize">
            <summary>
            Peak Virtual Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakVirtualMemorySize64">
            <summary>
            Peak Virtual Memory Size (64-bit)..
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakWorkingSet">
            <summary>
            Peak Working Set Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakWorkingSet64">
            <summary>
            Peak Working Set Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PriorityBoostEnabled">
            <summary>
            Whether priority boost is enabled.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PriorityClass">
            <summary>
            Priority Class.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PrivateMemorySize">
            <summary>
            Private Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PrivateMemorySize64">
            <summary>
            Private Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PrivilegedProcessorTime">
            <summary>
            Privileged Processor Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.ProcessName">
            <summary>
            Process Name.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.Responding">
            <summary>
            Whether process is responding.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.SessionId">
            <summary>
            Session ID.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.StartTime">
            <summary>
            Process Start Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.TotalProcessorTime">
            <summary>
            Total Processor Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.UserProcessorTime">
            <summary>
            User Processor Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.VirtualMemorySize">
            <summary>
            Virtual Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.VirtualMemorySize64">
            <summary>
            Virtual Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.WorkingSet">
            <summary>
            Working Set Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.WorkingSet64">
            <summary>
            Working Set Size (64-bit).
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessNameLayoutRenderer">
            <summary>
            The name of the current process.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ProcessNameLayoutRenderer.FullName">
            <summary>
            Gets or sets a value indicating whether to write the full path to the process executable.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current process name (optionally with a full path).
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessTimeLayoutRenderer">
            <summary>
            The process time in format HH:mm:ss.mmm.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessTimeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current process running time and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessTimeLayoutRenderer.WritetTimestamp(System.Text.StringBuilder,System.TimeSpan)">
            <summary>
            Write timestamp to builder with format hh:mm:ss:fff
            </summary>
            <param name="builder"></param>
            <param name="ts"></param>
        </member>
        <member name="T:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer">
            <summary>
            High precision timer, based on the value returned from QueryPerformanceCounter() optionally converted to seconds.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Normalize">
            <summary>
            Gets or sets a value indicating whether to normalize the result by subtracting 
            it from the result of the first call (so that it's effectively zero-based).
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Difference">
            <summary>
            Gets or sets a value indicating whether to output the difference between the result 
            of QueryPerformanceCounter and the previous one.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Seconds">
            <summary>
            Gets or sets a value indicating whether to convert the result to seconds by dividing 
            by the result of QueryPerformanceFrequency().
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Precision">
            <summary>
            Gets or sets the number of decimal digits to be included in output.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.AlignDecimalPoint">
            <summary>
            Gets or sets a value indicating whether to align decimal point (emit non-significant zeros).
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ticks value of current time and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.RegistryLayoutRenderer">
            <summary>
            A value from the Registry.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.RegistryLayoutRenderer.#ctor">
            <summary>
            Create new renderer
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.Value">
            <summary>
            Gets or sets the registry value name.
            </summary>
            <docgen category='Registry Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.DefaultValue">
            <summary>
            Gets or sets the value to be output when the specified registry key or value is not found.
            </summary>
            <docgen category='Registry Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.RequireEscapingSlashesInDefaultValue">
            <summary>
            Require escaping backward slashes in <see cref="P:NLog.LayoutRenderers.RegistryLayoutRenderer.DefaultValue"/>. Need to be backwardscompatible.
            
            When true:
            
            `\` in value should be configured as `\\`
            `\\` in value should be configured as `\\\\`.
            </summary>
            <remarks>Default value wasn't a Layout before and needed an escape of the slash</remarks>
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.View">
            <summary>
            Gets or sets the registry view (see: https://msdn.microsoft.com/de-de/library/microsoft.win32.registryview.aspx). 
            Allowed values: Registry32, Registry64, Default 
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.Key">
             <summary>
             Gets or sets the registry key.
             </summary>
             <example>
             HKCU\Software\NLogTest
             </example>
             <remarks>
             Possible keys:
             <ul>
            <li>HKEY_LOCAL_MACHINE</li>
            <li>HKLM</li>
            <li>HKEY_CURRENT_USER</li>
            <li>HKCU</li>
            <li>HKEY_CLASSES_ROOT</li>
            <li>HKEY_USERS</li>
            <li>HKEY_CURRENT_CONFIG</li>
            <li>HKEY_DYN_DATA</li>
            <li>HKEY_PERFORMANCE_DATA</li>
             </ul>
             </remarks>
             <docgen category='Registry Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.RegistryLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Reads the specified registry key and value and appends it to
            the passed <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event. Ignored.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.ParseResult.HasSubKey">
            <summary>
            Has <see cref="P:NLog.LayoutRenderers.RegistryLayoutRenderer.ParseResult.SubKey"/>?
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.RegistryLayoutRenderer.ParseKey(System.String)">
            <summary>
            Parse key to <see cref="T:Microsoft.Win32.RegistryHive"/> and subkey.
            </summary>
            <param name="key">full registry key name</param>
            <returns>Result of parsing, never <c>null</c>.</returns>
        </member>
        <member name="F:NLog.LayoutRenderers.RegistryLayoutRenderer.HiveAliases">
            <summary>
            Aliases for the hives. See https://msdn.microsoft.com/en-us/library/ctb3kd86(v=vs.110).aspx
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ShortDateLayoutRenderer">
            <summary>
            The short date in a sortable format yyyy-MM-dd.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ShortDateLayoutRenderer.UniversalTime">
            <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.ShortDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current short date string (yyyy-MM-dd) and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.ShortDateLayoutRenderer.DateData.AppendDate(System.Text.StringBuilder,System.DateTime)">
            <summary>
            Appends a date in format yyyy-MM-dd to the StringBuilder.
            The DateTime.ToString() result is cached for future uses
            since it only changes once a day. This optimization yields a
            performance boost of 40% and makes the renderer allocation-free
            in must cases.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the date to</param>
            <param name="timestamp">The date to append</param>
        </member>
        <member name="T:NLog.LayoutRenderers.SpecialFolderLayoutRenderer">
            <summary>
            System special folder path (includes My Documents, My Music, Program Files, Desktop, and more).
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Folder">
            <summary>
            Gets or sets the system special folder to use.
            </summary>
            <remarks>
            Full list of options is available at <a href="http://msdn2.microsoft.com/en-us/system.environment.specialfolder.aspx">MSDN</a>.
            The most common ones are:
            <ul>
            <li><b>ApplicationData</b> - roaming application data for current user.</li>
            <li><b>CommonApplicationData</b> - application data for all users.</li>
            <li><b>MyDocuments</b> - My Documents</li>
            <li><b>DesktopDirectory</b> - Desktop directory</li>
            <li><b>LocalApplicationData</b> - non roaming application data</li>
            <li><b>Personal</b> - user profile directory</li>
            <li><b>System</b> - System directory</li>
            </ul>
            </remarks>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.File">
            <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Dir">
            <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.StackTraceFormat">
            <summary>
            Format of the ${stacktrace} layout renderer output.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.StackTraceFormat.Raw">
            <summary>
            Raw format (multiline - as returned by StackFrame.ToString() method).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.StackTraceFormat.Flat">
            <summary>
            Flat format (class and method names displayed in a single line).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.StackTraceFormat.DetailedFlat">
            <summary>
            Detailed flat format (method signatures displayed in a single line).
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.StackTraceLayoutRenderer">
            <summary>
            Stack trace renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.StackTraceLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.StackTraceLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.Format">
            <summary>
            Gets or sets the output format of the stack trace.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.TopFrames">
            <summary>
            Gets or sets the number of top stack frames to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.SkipFrames">
            <summary>
            Gets or sets the number of frames to skip.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.Separator">
            <summary>
            Gets or sets the stack frame separator string.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.NLog#Internal#IUsesStackTrace#StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
            <value></value>
        </member>
        <member name="M:NLog.LayoutRenderers.StackTraceLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.TempDirLayoutRenderer">
            <summary>
            A temporary directory.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.TempDirLayoutRenderer.File">
            <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.TempDirLayoutRenderer.Dir">
            <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.TempDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ThreadIdLayoutRenderer">
            <summary>
            The identifier of the current thread.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ThreadIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread identifier and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ThreadNameLayoutRenderer">
            <summary>
            The name of the current thread.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ThreadNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread name and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.TicksLayoutRenderer">
            <summary>
            The Ticks value of current date and time.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.TicksLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ticks value of current time and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.TimeLayoutRenderer">
            <summary>
            The time in a 24-hour, sortable format HH:mm:ss.mmm.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.TimeLayoutRenderer.UniversalTime">
            <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.TimeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders time in the 24-h format (HH:mm:ss.mmm) and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.TraceActivityIdLayoutRenderer">
            <summary>
            A renderer that puts into log a System.Diagnostics trace correlation id.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.TraceActivityIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current trace activity ID.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.VariableLayoutRenderer">
            <summary>
            Render a NLog variable (xml or config)
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.VariableLayoutRenderer.Name">
            <summary>
            Gets or sets the name of the NLog variable.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.VariableLayoutRenderer.Default">
            <summary>
            Gets or sets the default value to be used when the variable is not set.
            </summary>
            <remarks>Not used if Name is <c>null</c></remarks>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.VariableLayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.VariableLayoutRenderer.TryGetLayout(NLog.Layouts.SimpleLayout@)">
            <summary>
            Try get the 
            </summary>
            <param name="layout"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.LayoutRenderers.VariableLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer">
            <summary>
            Thread Windows identity information (username).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.Domain">
            <summary>
            Gets or sets a value indicating whether domain name should be included.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.UserName">
            <summary>
            Gets or sets a value indicating whether username should be included.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread windows identity information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper">
            <summary>
            Applies caching to another layout output.
            </summary>
            <remarks>
            The value of the inner layout will be rendered only once and reused subsequently.
            </remarks>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.ClearCacheOption">
            <summary>
            A value indicating when the cache is cleared.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.ClearCacheOption.None">
            <summary>Never clear the cache.</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.ClearCacheOption.OnInit">
            <summary>Clear the cache whenever the <see cref="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper"/> is initialized.</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.ClearCacheOption.OnClose">
            <summary>Clear the cache whenever the <see cref="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper"/> is closed.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper"/> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.Cached">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper"/> is enabled.
            </summary>
            <docgen category='Caching Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.ClearCache">
            <summary>
            Gets or sets a value indicating when the cache is cleared.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.CloseLayoutRenderer">
            <summary>
            Closes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>Contents of inner layout.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper">
            <summary>
            Filters characters not allowed in the file names by replacing them with safe character.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper.FSNormalize">
            <summary>
            Gets or sets a value indicating whether to modify the output of this renderer so it can be used as a part of file path
            (illegal characters are replaced with '_').
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Padded and trimmed string.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper">
            <summary>
            Escapes output of another layout using JSON rules.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper.JsonEncode">
            <summary>
            Gets or sets a value indicating whether to apply JSON encoding.
            </summary>
            <docgen category="Transformation Options" order="10"/>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>JSON-encoded string.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper">
            <summary>
            Converts the result of another layout output to lower case.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.Lowercase">
            <summary>
            Gets or sets a value indicating whether lower case conversion should be applied.
            </summary>
            <value>A value of <c>true</c> if lower case conversion should be applied; otherwise, <c>false</c>.</value>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.Culture">
            <summary>
            Gets or sets the culture used for rendering. 
            </summary>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Padded and trimmed string.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper">
            <summary>
            Only outputs the inner layout when exception has been defined for log message.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>
            Contents of inner layout.
            </returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.PaddingHorizontalAlignment">
            <summary>
            Horizontal alignment for padding layout renderers.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.PaddingHorizontalAlignment.Left">
            <summary>
            When layout text is too long, align it to the left
            (remove characters from the right).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.PaddingHorizontalAlignment.Right">
            <summary>
            When layout text is too long, align it to the right
            (remove characters from the left).
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper">
            <summary>
            Applies padding to another layout output.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.Padding">
            <summary>
            Gets or sets the number of characters to pad the output to. 
            </summary>
            <remarks>
            Positive padding values cause left padding, negative values 
            cause right padding to the desired width.
            </remarks>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.PadCharacter">
            <summary>
            Gets or sets the padding character.
            </summary>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.FixedLength">
            <summary>
            Gets or sets a value indicating whether to trim the 
            rendered text to the absolute value of the padding length.
            </summary>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.AlignmentOnTruncation">
            <summary>
            Gets or sets a value indicating whether a value that has
            been truncated (when <see cref="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.FixedLength" /> is true)
            will be left-aligned (characters removed from the right)
            or right-aligned (characters removed from the left). The
            default is left alignment.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper">
            <summary>
            Replaces a string in the output of another layout with another string.
            </summary>
            <example>
            ${replace:searchFor=\\n+:replaceWith=-:regex=true:inner=${message}}
            </example>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.SearchFor">
            <summary>
            Gets or sets the text to search for.
            </summary>
            <value>The text search for.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Regex">
            <summary>
            Gets or sets a value indicating whether regular expressions should be used.
            </summary>
            <value>A value of <c>true</c> if regular expressions should be used otherwise, <c>false</c>.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.ReplaceWith">
            <summary>
            Gets or sets the replacement string.
            </summary>
            <value>The replacement string.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.ReplaceGroupName">
            <summary>
            Gets or sets the group name to replace when using regular expressions.
            Leave null or empty to replace without using group name.
            </summary>
            <value>The group name.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case.
            </summary>
            <value>A value of <c>true</c> if case should be ignored when searching; otherwise, <c>false</c>.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.WholeWords">
            <summary>
            Gets or sets a value indicating whether to search for whole words.
            </summary>
            <value>A value of <c>true</c> if whole words should be searched for; otherwise, <c>false</c>.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Post-processed text.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Replacer">
            <summary>
            This class was created instead of simply using a lambda expression so that the "ThreadAgnosticAttributeTest" will pass
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.ReplaceNamedGroup(System.String,System.String,System.String,System.Text.RegularExpressions.Match)">
            <summary>
            A match evaluator for Regular Expression based replacing
            </summary>
            <param name="input">Input string.</param>
            <param name="groupName">Group name in the regex.</param>
            <param name="replacement">Replace value.</param>
            <param name="match">Match from regex.</param>
            <returns>Groups replaced with <paramref name="replacement"/>.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.ReplaceNewLinesLayoutRendererWrapper">
            <summary>
            Replaces newline characters from the result of another layout renderer with spaces.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceNewLinesLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.ReplaceNewLinesLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceNewLinesLayoutRendererWrapper.Replacement">
            <summary>
            Gets or sets a value indicating the string that should be used for separating lines.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceNewLinesLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>String with newline characters replaced with spaces.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper">
            <summary>
            Decodes text "encrypted" with ROT-13.
            </summary>
            <remarks>
            See <a href="http://en.wikipedia.org/wiki/ROT13">http://en.wikipedia.org/wiki/ROT13</a>.
            </remarks>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.Text">
            <summary>
            Gets or sets the layout to be wrapped.
            </summary>
            <value>The layout to be wrapped.</value>
            <remarks>This variable is for backwards compatibility</remarks>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.DecodeRot13(System.String)">
            <summary>
            Encodes/Decodes ROT-13-encoded string.
            </summary>
            <param name="encodedValue">The string to be encoded/decoded.</param>
            <returns>Encoded/Decoded text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper">
            <summary>
            Trims the whitespace from the result of another layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper.TrimWhiteSpace">
            <summary>
            Gets or sets a value indicating whether lower case conversion should be applied.
            </summary>
            <value>A value of <c>true</c> if lower case conversion should be applied; otherwise, <c>false</c>.</value>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Trimmed string.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper">
            <summary>
            Converts the result of another layout output to upper case.
            </summary>
            <example>
            ${uppercase:${level}} //[DefaultParameter]
            ${uppercase:Inner=${level}} 
            ${level:uppercase} // [AmbientProperty]
            </example>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.Uppercase">
            <summary>
            Gets or sets a value indicating whether upper case conversion should be applied.
            </summary>
            <value>A value of <c>true</c> if upper case conversion should be applied otherwise, <c>false</c>.</value>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.Culture">
            <summary>
            Gets or sets the culture used for rendering. 
            </summary>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Padded and trimmed string.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper">
            <summary>
            Encodes the result of another layout output for use with URLs.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.SpaceAsPlus">
            <summary>
            Gets or sets a value indicating whether spaces should be translated to '+' or '%20'.
            </summary>
            <value>A value of <c>true</c> if space should be translated to '+'; otherwise, <c>false</c>.</value>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper">
            <summary>
            Outputs alternative layout when the inner layout produces empty result.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper.WhenEmpty">
            <summary>
            Gets or sets the layout to be rendered when original layout produced empty result.
            </summary>
            <docgen category="Transformation Options" order="10"/>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>
            Contents of inner layout.
            </returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper">
            <summary>
            Only outputs the inner layout when the specified condition has been met.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.When">
            <summary>
            Gets or sets the condition that must be met for the <see cref="P:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Inner"/> layout to be printed.
            </summary>
            <docgen category="Transformation Options" order="10"/>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.Else">
            <summary>
            If <see cref="P:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.When"/> is not met, print this layout.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>
            Contents of inner layout.
            </returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.WrapLineLayoutRendererWrapper">
            <summary>
            Replaces newline characters from the result of another layout renderer with spaces.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WrapLineLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.WrapLineLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.WrapLineLayoutRendererWrapper.WrapLine">
            <summary>
            Gets or sets the line length for wrapping.
            </summary>
            <remarks>
            Only positive values are allowed
            </remarks>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WrapLineLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Post-processed text.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase">
            <summary>
            Base class for <see cref="T:NLog.LayoutRenderers.LayoutRenderer"/>s which wrapping other <see cref="T:NLog.LayoutRenderers.LayoutRenderer"/>s. 
            
            This has the <see cref="P:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Inner"/> property (which is default) and can be used to wrap.
            </summary>
            <example>
            ${uppercase:${level}} //[DefaultParameter]
            ${uppercase:Inner=${level}} 
            </example>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Inner">
            <summary>
            Gets or sets the wrapped layout.
            
            [DefaultParameter] so Inner: is not required if it's the first
            </summary>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the inner message, processes it and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <remarks>If the <see cref="T:NLog.LogEventInfo"/> is needed, overwrite <see cref="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Append(System.Text.StringBuilder,NLog.LogEventInfo)"/>.</remarks>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>Contents of inner layout.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper">
            <summary>
            Converts the result of another layout output to be XML-compliant.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper.XmlEncode">
            <summary>
            Gets or sets a value indicating whether to apply XML encoding.
            </summary>
            <docgen category="Transformation Options" order="10"/>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Padded and trimmed string.</returns>
        </member>
        <member name="T:NLog.Layouts.CsvColumnDelimiterMode">
            <summary>
            Specifies allowed column delimiters.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Auto">
            <summary>
            Automatically detect from regional settings.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Comma">
            <summary>
            Comma (ASCII 44).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Semicolon">
            <summary>
            Semicolon (ASCII 59).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Tab">
            <summary>
            Tab character (ASCII 9).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Pipe">
            <summary>
            Pipe character (ASCII 124).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Space">
            <summary>
            Space character (ASCII 32).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Custom">
            <summary>
            Custom string, specified by the CustomDelimiter.
            </summary>
        </member>
        <member name="T:NLog.Layouts.JsonAttribute">
            <summary>
            JSON attribute.
            </summary>
        </member>
        <member name="M:NLog.Layouts.JsonAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.JsonAttribute" /> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.JsonAttribute.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.JsonAttribute" /> class.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="layout">The layout of the attribute's value.</param>
        </member>
        <member name="M:NLog.Layouts.JsonAttribute.#ctor(System.String,NLog.Layouts.Layout,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.JsonAttribute" /> class.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="layout">The layout of the attribute's value.</param>
            <param name="encode">Encode value with json-encode</param>
        </member>
        <member name="P:NLog.Layouts.JsonAttribute.Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
        </member>
        <member name="P:NLog.Layouts.JsonAttribute.Layout">
            <summary>
            Gets or sets the layout that will be rendered as the attribute's value.
            </summary>
        </member>
        <member name="P:NLog.Layouts.JsonAttribute.Encode">
            <summary>
            Determines wether or not this attribute will be Json encoded.
            </summary>
        </member>
        <member name="T:NLog.Layouts.JsonLayout">
            <summary>
            A specialized layout that renders JSON-formatted events.
            </summary>
        </member>
        <member name="M:NLog.Layouts.JsonLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.JsonLayout"/> class.
            </summary>
        </member>
        <member name="P:NLog.Layouts.JsonLayout.Attributes">
            <summary>
            Gets the array of attributes' configurations.
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.JsonLayout.SuppressSpaces">
            <summary>
            Gets or sets the option to suppress the extra spaces in the output json
            </summary>
        </member>
        <member name="M:NLog.Layouts.JsonLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Formats the log event as a JSON document for writing.
            </summary>
            <param name="logEvent">The log event to be formatted.</param>
            <returns>A JSON string representation of the log event.</returns>
        </member>
        <member name="T:NLog.Layouts.Layout">
            <summary>
            Abstract interface that layouts must implement.
            </summary>
        </member>
        <member name="F:NLog.Layouts.Layout.isInitialized">
            <summary>
            Is this layout initialized? See <see cref="M:NLog.Layouts.Layout.Initialize(NLog.Config.LoggingConfiguration)"/>
            </summary>
        </member>
        <member name="F:NLog.Layouts.Layout.threadAgnostic">
            <summary>
            Does the layout contains threadAgnostic layout renders? If contains non-threadAgnostic-layoutrendender, then this layout is also not threadAgnostic. 
            See <see cref="P:NLog.Layouts.Layout.IsThreadAgnostic"/> and <see cref="M:NLog.Layouts.Layout.Initialize(NLog.Config.LoggingConfiguration)"/>.
            </summary>
        </member>
        <member name="P:NLog.Layouts.Layout.IsThreadAgnostic">
            <summary>
            Gets a value indicating whether this layout is thread-agnostic (can be rendered on any thread).
            </summary>
            <remarks>
            Layout is thread-agnostic if it has been marked with [ThreadAgnostic] attribute and all its children are
            like that as well.
            Thread-agnostic layouts only use contents of <see cref="T:NLog.LogEventInfo"/> for its output.
            </remarks>
        </member>
        <member name="P:NLog.Layouts.Layout.LoggingConfiguration">
            <summary>
            Gets the logging configuration this target is part of.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.op_Implicit(System.String)~NLog.Layouts.Layout">
            <summary>
            Converts a given text to a <see cref="T:NLog.Layouts.Layout" />.
            </summary>
            <param name="text">Text to be converted.</param>
            <returns><see cref="T:NLog.Layouts.SimpleLayout"/> object represented by the text.</returns>
        </member>
        <member name="M:NLog.Layouts.Layout.FromString(System.String)">
            <summary>
            Implicitly converts the specified string to a <see cref="T:NLog.Layouts.SimpleLayout"/>.
            </summary>
            <param name="layoutText">The layout string.</param>
            <returns>Instance of <see cref="T:NLog.Layouts.SimpleLayout"/>.</returns>
        </member>
        <member name="M:NLog.Layouts.Layout.FromString(System.String,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Implicitly converts the specified string to a <see cref="T:NLog.Layouts.SimpleLayout"/>.
            </summary>
            <param name="layoutText">The layout string.</param>
            <param name="configurationItemFactory">The NLog factories to use when resolving layout renderers.</param>
            <returns>Instance of <see cref="T:NLog.Layouts.SimpleLayout"/>.</returns>
        </member>
        <member name="M:NLog.Layouts.Layout.Precalculate(NLog.LogEventInfo)">
            <summary>
            Precalculates the layout for the specified log event and stores the result
            in per-log event cache.
            
            Only if the layout doesn't have [ThreadAgnostic] and doens't contain layouts with [ThreadAgnostic]. 
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            Calling this method enables you to store the log event in a buffer
            and/or potentially evaluate it in another thread even though the 
            layout may contain thread-dependent renderer.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.Layout.Render(NLog.LogEventInfo)">
            <summary>
            Renders the event info in layout.
            </summary>
            <param name="logEvent">The event info.</param>
            <returns>String representing log event.</returns>
        </member>
        <member name="M:NLog.Layouts.Layout.NLog#Internal#ISupportsInitialize#Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.Layouts.Layout.NLog#Internal#ISupportsInitialize#Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.Layouts.Layout.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.InitializeLayout">
            <summary>
            Initializes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.CloseLayout">
            <summary>
            Closes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="T:NLog.Layouts.LayoutAttribute">
            <summary>
            Marks class as a layout renderer and assigns a format string to it.
            </summary>
        </member>
        <member name="M:NLog.Layouts.LayoutAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.LayoutAttribute" /> class.
            </summary>
            <param name="name">Layout name.</param>
        </member>
        <member name="T:NLog.Layouts.LayoutParser">
            <summary>
            Parses layout strings.
            </summary>
        </member>
        <member name="T:NLog.Layouts.SimpleLayout">
            <summary>
            Represents a string with embedded placeholders that can render contextual information.
            </summary>
            <remarks>
            This layout is not meant to be used explicitly. Instead you can just use a string containing layout 
            renderers everywhere the layout is required.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout" /> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout" /> class.
            </summary>
            <param name="txt">The layout string to parse.</param>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.#ctor(System.String,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout"/> class.
            </summary>
            <param name="txt">The layout string to parse.</param>
            <param name="configurationItemFactory">The NLog factories to use when creating references to layout renderers.</param>
        </member>
        <member name="P:NLog.Layouts.SimpleLayout.OriginalText">
            <summary>
            Original text before compile to Layout renderes
            </summary>
        </member>
        <member name="P:NLog.Layouts.SimpleLayout.Text">
            <summary>
            Gets or sets the layout text.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.SimpleLayout.IsFixedText">
            <summary>
            Is the message fixed? (no Layout renderers used)
            </summary>
        </member>
        <member name="P:NLog.Layouts.SimpleLayout.FixedText">
            <summary>
            Get the fixed text. Only set when <see cref="P:NLog.Layouts.SimpleLayout.IsFixedText"/> is <c>true</c>
            </summary>
        </member>
        <member name="P:NLog.Layouts.SimpleLayout.Renderers">
            <summary>
            Gets a collection of <see cref="T:NLog.LayoutRenderers.LayoutRenderer"/> objects that make up this layout.
            </summary>
        </member>
        <member name="P:NLog.Layouts.SimpleLayout.StackTraceUsage">
            <summary>
            Gets the level of stack trace information required for rendering.
            </summary>
            <remarks>Calculated when setting <see cref="P:NLog.Layouts.SimpleLayout.Renderers"/>.</remarks>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.op_Implicit(System.String)~NLog.Layouts.SimpleLayout">
            <summary>
            Converts a text to a simple layout.
            </summary>
            <param name="text">Text to be converted.</param>
            <returns>A <see cref="T:NLog.Layouts.SimpleLayout"/> object.</returns>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.Escape(System.String)">
            <summary>
            Escapes the passed text so that it can
            be used literally in all places where
            layout is normally expected without being
            treated as layout.
            </summary>
            <param name="text">The text to be escaped.</param>
            <returns>The escaped text.</returns>
            <remarks>
            Escaping is done by replacing all occurrences of
            '${' with '${literal:text=${}'
            </remarks>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.Evaluate(System.String,NLog.LogEventInfo)">
            <summary>
            Evaluates the specified text by expanding all layout renderers.
            </summary>
            <param name="text">The text to be evaluated.</param>
            <param name="logEvent">Log event to be used for evaluation.</param>
            <returns>The input text with all occurrences of ${} replaced with
            values provided by the appropriate layout renderers.</returns>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.Evaluate(System.String)">
            <summary>
            Evaluates the specified text by expanding all layout renderers
            in new <see cref="T:NLog.LogEventInfo" /> context.
            </summary>
            <param name="text">The text to be evaluated.</param>
            <returns>The input text with all occurrences of ${} replaced with
            values provided by the appropriate layout renderers.</returns>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current object.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current object.
            </returns>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.InitializeLayout">
            <summary>
            Initializes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers
            that make up the event.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="T:NLog.Layouts.CsvColumn">
            <summary>
            A column in the CSV.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvColumn" /> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvColumn.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvColumn" /> class.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="layout">The layout of the column.</param>
        </member>
        <member name="P:NLog.Layouts.CsvColumn.Name">
            <summary>
            Gets or sets the name of the column.
            </summary>
            <docgen category='CSV Column Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvColumn.Layout">
            <summary>
            Gets or sets the layout of the column.
            </summary>
            <docgen category='CSV Column Options' order='10' />
        </member>
        <member name="T:NLog.Layouts.CsvLayout">
            <summary>
            A specialized layout that renders CSV-formatted events.
            </summary>
            <remarks>If <see cref="P:NLog.Layouts.LayoutWithHeaderAndFooter.Header"/> is set, then the header generation with columnnames will be disabled.</remarks>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvLayout"/> class.
            </summary>
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Columns">
            <summary>
            Gets the array of parameters to be passed.
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.WithHeader">
            <summary>
            Gets or sets a value indicating whether CVS should include header.
            </summary>
            <value>A value of <c>true</c> if CVS should include header; otherwise, <c>false</c>.</value>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Delimiter">
            <summary>
            Gets or sets the column delimiter.
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Quoting">
            <summary>
            Gets or sets the quoting mode.
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.QuoteChar">
            <summary>
            Gets or sets the quote Character.
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.CustomColumnDelimiter">
            <summary>
            Gets or sets the custom column delimiter value (valid when ColumnDelimiter is set to 'Custom').
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="M:NLog.Layouts.CsvLayout.InitializeLayout">
            <summary>
            Initializes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Formats the log event for write.
            </summary>
            <param name="logEvent">The log event to be formatted.</param>
            <returns>A string representation of the log event.</returns>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.GetHeader">
            <summary>
            Get the headers with the column names.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NLog.Layouts.CsvLayout.CsvHeaderLayout">
            <summary>
            Header with column names for CSV layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.#ctor(NLog.Layouts.CsvLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvLayout.CsvHeaderLayout"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="T:NLog.Layouts.CsvQuotingMode">
            <summary>
            Specifies CSV quoting modes.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvQuotingMode.All">
            <summary>
            Quote all column.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvQuotingMode.Nothing">
            <summary>
            Quote nothing.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvQuotingMode.Auto">
            <summary>
            Quote only whose values contain the quote symbol or
            the separator.
            </summary>
        </member>
        <member name="T:NLog.Layouts.LayoutWithHeaderAndFooter">
            <summary>
            A specialized layout that supports header and footer.
            </summary>
        </member>
        <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Layout">
            <summary>
            Gets or sets the body layout (can be repeated multiple times).
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Header">
            <summary>
            Gets or sets the header layout.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Footer">
            <summary>
            Gets or sets the footer layout.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="M:NLog.Layouts.LayoutWithHeaderAndFooter.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="T:NLog.Layouts.Log4JXmlEventLayout">
            <summary>
            A specialized layout that renders Log4j-compatible XML events.
            </summary>
            <remarks>
            This layout is not meant to be used explicitly. Instead you can use ${log4jxmlevent} layout renderer.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.Log4JXmlEventLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.Log4JXmlEventLayout" /> class.
            </summary>
        </member>
        <member name="P:NLog.Layouts.Log4JXmlEventLayout.Renderer">
            <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer"/> instance that renders log events.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Log4JXmlEventLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="T:NLog.LogFactory`1">
            <summary>
            Specialized LogFactory that can return instances of custom logger types.
            </summary>
            <typeparam name="T">The type of the logger to be returned. Must inherit from <see cref="T:NLog.Logger"/>.</typeparam>
        </member>
        <member name="M:NLog.LogFactory`1.GetLogger(System.String)">
            <summary>
            Gets the logger with type <typeparamref name="T"/>.
            </summary>
            <param name="name">The logger name.</param>
            <returns>An instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:NLog.LogFactory`1.GetCurrentClassLogger">
            <summary>
            Gets a custom logger with the name of the current class and type <typeparamref name="T"/>.
            </summary>
            <returns>An instance of <typeparamref name="T"/>.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="T:NLog.Logger">
            <summary>
            Logging methods which only are executed when the DEBUG conditional compilation symbol is set.
            </summary>
            <remarks>
            The DEBUG conditional compilation symbol is default enabled (only) in a debug build.
            
            If the DEBUG conditional compilation symbol isn't set in the calling library, the compiler will remove all the invocations to these methods. 
            This could lead to better performance. 
            
            See: https://msdn.microsoft.com/en-us/library/4xssyw96%28v=vs.90%29.aspx
            </remarks>
            <content>
            Auto-generated Logger members for binary compatibility with NLog 1.0.
            </content>
            <summary>
            Provides logging interface and utility functions.
            </summary>
            <summary>
            Provides logging interface and utility functions.
            </summary>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Debug</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters and formatting them with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Trace</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters and formatting them with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="P:NLog.Logger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Trace</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Trace</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Debug</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Debug</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Info</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Info</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Warn</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Warn</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Error</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Error</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Fatal</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Fatal</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="M:NLog.Logger.Trace``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Trace</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.TraceException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Debug</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.DebugException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Info</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.InfoException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Warn</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.WarnException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Error</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.ErrorException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.FatalException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Logger"/> class.
            </summary>
        </member>
        <member name="E:NLog.Logger.LoggerReconfigured">
            <summary>
            Occurs when logger configuration changes.
            </summary>
        </member>
        <member name="P:NLog.Logger.Name">
            <summary>
            Gets the name of the logger.
            </summary>
        </member>
        <member name="P:NLog.Logger.Factory">
            <summary>
            Gets the factory that created this logger.
            </summary>
        </member>
        <member name="M:NLog.Logger.IsEnabled(NLog.LogLevel)">
            <summary>
            Gets a value indicating whether logging is enabled for the specified level.
            </summary>
            <param name="level">Log level to be checked.</param>
            <returns>A value of <see langword="true" /> if logging is enabled for the specified level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogEventInfo)">
            <summary>
            Writes the specified diagnostic message.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.Logger.Log(System.Type,NLog.LogEventInfo)">
            <summary>
            Writes the specified diagnostic message.
            </summary>
            <param name="wrapperType">The name of the type that wraps Logger.</param>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.Logger.GetCostTime">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Logger.Log``1(NLog.LogLevel,``0)">
            <overloads>
            Writes the diagnostic message at the specified level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="level">The log level.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.LogException(NLog.LogLevel,System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="args">Arguments to format.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="args">Arguments to format.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.String,``0)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the specified level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``2(NLog.LogLevel,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the specified level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``3(NLog.LogLevel,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Swallow(System.Action)">
            <summary>
            Runs the provided action. If the action throws, the exception is logged at <c>Error</c> level. The exception is not propagated outside of this method.
            </summary>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:NLog.Logger.Swallow``1(System.Func{``0})">
            <summary>
            Runs the provided function and returns its result. If an exception is thrown, it is logged at <c>Error</c> level.
            The exception is not propagated outside of this method; a default value is returned instead.
            </summary>
            <typeparam name="T">Return type of the provided function.</typeparam>
            <param name="func">Function to run.</param>
            <returns>Result returned by the provided function or the default value of type <typeparamref name="T"/> in case of exception.</returns>
        </member>
        <member name="M:NLog.Logger.Swallow``1(System.Func{``0},``0)">
            <summary>
            Runs the provided function and returns its result. If an exception is thrown, it is logged at <c>Error</c> level.
            The exception is not propagated outside of this method; a fallback value is returned instead.
            </summary>
            <typeparam name="T">Return type of the provided function.</typeparam>
            <param name="func">Function to run.</param>
            <param name="fallback">Fallback value to return in case of exception.</param>
            <returns>Result returned by the provided function or fallback value in case of exception.</returns>
        </member>
        <member name="T:NLog.LogMessageGenerator">
            <summary>
            Returns a log message. Used to defer calculation of 
            the log message until it's actually needed.
            </summary>
            <returns>Log message.</returns>
        </member>
        <member name="T:NLog.LogReceiverService.ILogReceiverClient">
            <summary>
            Service contract for Log Receiver client.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverClient.BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
            <summary>
            Begins processing of log messages.
            </summary>
            <param name="events">The events.</param>
            <param name="callback">The callback.</param>
            <param name="asyncState">Asynchronous state.</param>
            <returns>
            IAsyncResult value which can be passed to <see cref="M:NLog.LogReceiverService.ILogReceiverClient.EndProcessLogMessages(System.IAsyncResult)"/>.
            </returns>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverClient.EndProcessLogMessages(System.IAsyncResult)">
            <summary>
            Ends asynchronous processing of log messages.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:NLog.LogReceiverService.ILogReceiverOneWayClient">
            <summary>
            Service contract for Log Receiver client.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverOneWayClient.BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
            <summary>
            Begins processing of log messages.
            </summary>
            <param name="events">The events.</param>
            <param name="callback">The callback.</param>
            <param name="asyncState">Asynchronous state.</param>
            <returns>
            IAsyncResult value which can be passed to <see cref="M:NLog.LogReceiverService.ILogReceiverOneWayClient.EndProcessLogMessages(System.IAsyncResult)"/>.
            </returns>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverOneWayClient.EndProcessLogMessages(System.IAsyncResult)">
            <summary>
            Ends asynchronous processing of log messages.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:NLog.LogReceiverService.ILogReceiverTwoWayClient">
            <summary>
            Service contract for Log Receiver client.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverTwoWayClient.BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
            <summary>
            Begins processing of log messages.
            </summary>
            <param name="events">The events.</param>
            <param name="callback">The callback.</param>
            <param name="asyncState">Asynchronous state.</param>
            <returns>
            IAsyncResult value which can be passed to <see cref="M:NLog.LogReceiverService.ILogReceiverTwoWayClient.EndProcessLogMessages(System.IAsyncResult)"/>.
            </returns>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverTwoWayClient.EndProcessLogMessages(System.IAsyncResult)">
            <summary>
            Ends asynchronous processing of log messages.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:NLog.LogReceiverService.LogReceiverServiceConfig">
            <summary>
            Internal configuration of Log Receiver Service contracts.
            </summary>
        </member>
        <member name="T:NLog.LogReceiverService.NLogEvent">
            <summary>
            Wire format for NLog Event.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.NLogEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.NLogEvent"/> class.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.Id">
            <summary>
            Gets or sets the client-generated identifier of the event.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.LevelOrdinal">
            <summary>
            Gets or sets the ordinal of the log level.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.LoggerOrdinal">
            <summary>
            Gets or sets the logger ordinal (index into <see cref="P:NLog.LogReceiverService.NLogEvents.Strings"/>.
            </summary>
            <value>The logger ordinal.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.TimeDelta">
            <summary>
            Gets or sets the time delta (in ticks) between the time of the event and base time.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.MessageOrdinal">
            <summary>
            Gets or sets the message string index.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.Values">
            <summary>
            Gets or sets the collection of layout values.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.ValueIndexes">
            <summary>
            Gets the collection of indexes into <see cref="P:NLog.LogReceiverService.NLogEvents.Strings"/> array for each layout value.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.NLogEvent.ToEventInfo(NLog.LogReceiverService.NLogEvents,System.String)">
            <summary>
            Converts the <see cref="T:NLog.LogReceiverService.NLogEvent"/> to <see cref="T:NLog.LogEventInfo"/>.
            </summary>
            <param name="context">The <see cref="T:NLog.LogReceiverService.NLogEvent"/> object this <see cref="T:NLog.LogReceiverService.NLogEvent" /> is part of..</param>
            <param name="loggerNamePrefix">The logger name prefix to prepend in front of the logger name.</param>
            <returns>Converted <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="T:NLog.LogReceiverService.NLogEvents">
            <summary>
            Wire format for NLog event package.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>The name of the client.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.BaseTimeUtc">
            <summary>
            Gets or sets the base time (UTC ticks) for all events in the package.
            </summary>
            <value>The base time UTC.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.LayoutNames">
            <summary>
            Gets or sets the collection of layout names which are shared among all events.
            </summary>
            <value>The layout names.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.Strings">
            <summary>
            Gets or sets the collection of logger names.
            </summary>
            <value>The logger names.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.Events">
            <summary>
            Gets or sets the list of events.
            </summary>
            <value>The events.</value>
        </member>
        <member name="M:NLog.LogReceiverService.NLogEvents.ToEventInfo(System.String)">
            <summary>
            Converts the events to sequence of <see cref="T:NLog.LogEventInfo"/> objects suitable for routing through NLog.
            </summary>
            <param name="loggerNamePrefix">The logger name prefix to prepend in front of each logger name.</param>
            <returns>
            Sequence of <see cref="T:NLog.LogEventInfo"/> objects.
            </returns>
        </member>
        <member name="M:NLog.LogReceiverService.NLogEvents.ToEventInfo">
            <summary>
            Converts the events to sequence of <see cref="T:NLog.LogEventInfo"/> objects suitable for routing through NLog.
            </summary>
            <returns>
            Sequence of <see cref="T:NLog.LogEventInfo"/> objects.
            </returns>
        </member>
        <member name="T:NLog.LogReceiverService.SoapLogReceiverClient">
            <summary>
            Log Receiver Client using legacy SOAP client.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.SoapLogReceiverClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.SoapLogReceiverClient"/> class.
            </summary>
            <param name="url">The service URL.</param>
        </member>
        <member name="M:NLog.LogReceiverService.SoapLogReceiverClient.ProcessLogMessages(NLog.LogReceiverService.NLogEvents)">
            <summary>
            Processes the log messages.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:NLog.LogReceiverService.SoapLogReceiverClient.BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
            <summary>
            Begins processing of log messages.
            </summary>
            <param name="events">The events.</param>
            <param name="callback">The callback.</param>
            <param name="asyncState">Asynchronous state.</param>
            <returns>
            IAsyncResult value which can be passed to <see cref="M:NLog.LogReceiverService.ILogReceiverClient.EndProcessLogMessages(System.IAsyncResult)"/>.
            </returns>
        </member>
        <member name="M:NLog.LogReceiverService.SoapLogReceiverClient.EndProcessLogMessages(System.IAsyncResult)">
            <summary>
            Ends asynchronous processing of log messages.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:NLog.LogReceiverService.StringCollection">
            <summary>
            List of strings annotated for more terse serialization.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.StringCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.StringCollection"/> class.
            </summary>
        </member>
        <member name="T:NLog.MappedDiagnosticsContext">
            <summary>
            Mapped Diagnostics Context - a thread-local structure that keeps a dictionary
            of strings and provides methods to output them in layouts. 
            Mostly for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Set(System.String,System.String)">
            <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Set(System.String,System.Object)">
            <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Get(System.String)">
            <summary>
            Gets the current thread MDC named item, as <see cref="T:System.String"/>.
            </summary>
            <param name="item">Item name.</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <see cref="F:System.String.Empty"/>.</returns>
            <remarks>If the value isn't a <see cref="T:System.String"/> already, this call locks the <see cref="T:NLog.LogFactory"/> for reading the <see cref="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo"/> needed for converting to <see cref="T:System.String"/>. </remarks>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Get(System.String,System.IFormatProvider)">
            <summary>
            Gets the current thread MDC named item, as <see cref="T:System.String"/>.
            </summary>
            <param name="item">Item name.</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use when converting a value to a <see cref="T:System.String"/>.</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <see cref="F:System.String.Empty"/>.</returns>
            <remarks>If <paramref name="formatProvider"/> is <c>null</c> and the value isn't a <see cref="T:System.String"/> already, this call locks the <see cref="T:NLog.LogFactory"/> for reading the <see cref="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo"/> needed for converting to <see cref="T:System.String"/>. </remarks>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.GetObject(System.String)">
            <summary>
            Gets the current thread MDC named item, as <see cref="T:System.Object"/>.
            </summary>
            <param name="item">Item name.</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.GetNames">
            <summary>
            Returns all item names
            </summary>
            <returns>A set of the names of all items in current thread-MDC.</returns>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in current thread MDC.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified <paramref name="item"/> exists in current thread MDC.</returns>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Remove(System.String)">
            <summary>
            Removes the specified <paramref name="item"/> from current thread MDC.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Clear">
            <summary>
            Clears the content of current thread MDC.
            </summary>
        </member>
        <member name="T:NLog.NestedDiagnosticsContext">
            <summary>
            Nested Diagnostics Context - a thread-local structure that keeps a stack
            of strings and provides methods to output them in layouts
            Mostly for compatibility with log4net.
            </summary>
        </member>
        <member name="P:NLog.NestedDiagnosticsContext.TopMessage">
            <summary>
            Gets the top NDC message but doesn't remove it.
            </summary>
            <returns>The top message. .</returns>
        </member>
        <member name="P:NLog.NestedDiagnosticsContext.TopObject">
            <summary>
            Gets the top NDC object but doesn't remove it.
            </summary>
            <returns>The object at the top of the NDC stack if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.Push(System.String)">
            <summary>
            Pushes the specified text on current thread NDC.
            </summary>
            <param name="text">The text to be pushed.</param>
            <returns>An instance of the object that implements IDisposable that returns the stack to the previous level when IDisposable.Dispose() is called. To be used with C# using() statement.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.Push(System.Object)">
            <summary>
            Pushes the specified object on current thread NDC.
            </summary>
            <param name="value">The object to be pushed.</param>
            <returns>An instance of the object that implements IDisposable that returns the stack to the previous level when IDisposable.Dispose() is called. To be used with C# using() statement.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.Pop">
            <summary>
            Pops the top message off the NDC stack.
            </summary>
            <returns>The top message which is no longer on the stack.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.Pop(System.IFormatProvider)">
            <summary>
            Pops the top message from the NDC stack.
            </summary>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use when converting the value to a string.</param>
            <returns>The top message, which is removed from the stack, as a string value.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.PopObject">
            <summary>
            Pops the top object off the NDC stack.
            </summary>
            <returns>The object from the top of the NDC stack, if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.Clear">
            <summary>
            Clears current thread NDC stack.
            </summary>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.GetAllMessages">
            <summary>
            Gets all messages on the stack.
            </summary>
            <returns>Array of strings on the stack.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.GetAllMessages(System.IFormatProvider)">
            <summary>
            Gets all messages from the stack, without removing them.
            </summary>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use when converting a value to a string.</param>
            <returns>Array of strings.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.GetAllObjects">
            <summary>
            Gets all objects on the stack.
            </summary>
            <returns>Array of objects on the stack.</returns>
        </member>
        <member name="T:NLog.NestedDiagnosticsContext.StackPopper">
            <summary>
            Resets the stack to the original count during <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.StackPopper.#ctor(System.Collections.Generic.Stack{System.Object},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NestedDiagnosticsContext.StackPopper" /> class.
            </summary>
            <param name="stack">The stack.</param>
            <param name="previousCount">The previous count.</param>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.StackPopper.System#IDisposable#Dispose">
            <summary>
            Reverts the stack to original item count.
            </summary>
        </member>
        <member name="T:NLog.NLogConfigurationException">
            <summary>
            Exception thrown during NLog configuration.
            </summary>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="messageParameters">Parameters for the message</param>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:NLog.NLogRuntimeException">
            <summary>
            Exception thrown during log event processing.
            </summary>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="messageParameters">Parameters for the message</param>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:NLog.NLogTraceListener">
            <summary>
            TraceListener which routes all messages through NLog.
            </summary>
        </member>
        <member name="M:NLog.NLogTraceListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogTraceListener"/> class.
            </summary>
        </member>
        <member name="P:NLog.NLogTraceListener.LogFactory">
            <summary>
            Gets or sets the log factory to use when outputting messages (null - use LogManager).
            </summary>
        </member>
        <member name="P:NLog.NLogTraceListener.DefaultLogLevel">
            <summary>
            Gets or sets the default log level.
            </summary>
        </member>
        <member name="P:NLog.NLogTraceListener.ForceLogLevel">
            <summary>
            Gets or sets the log which should be always used regardless of source level.
            </summary>
        </member>
        <member name="P:NLog.NLogTraceListener.DisableFlush">
            <summary>
            Gets or sets a value indicating whether flush calls from trace sources should be ignored.
            </summary>
        </member>
        <member name="P:NLog.NLogTraceListener.IsThreadSafe">
            <summary>
            Gets a value indicating whether the trace listener is thread safe.
            </summary>
            <value></value>
            <returns>true if the trace listener is thread safe; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:NLog.NLogTraceListener.AutoLoggerName">
            <summary>
            Gets or sets a value indicating whether to use auto logger name detected from the stack trace.
            </summary>
        </member>
        <member name="M:NLog.NLogTraceListener.Write(System.String)">
            <summary>
            When overridden in a derived class, writes the specified message to the listener you create in the derived class.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.WriteLine(System.String)">
            <summary>
            When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.Close">
            <summary>
            When overridden in a derived class, closes the output stream so it no longer receives tracing or debugging output.
            </summary>
        </member>
        <member name="M:NLog.NLogTraceListener.Fail(System.String)">
            <summary>
            Emits an error message.
            </summary>
            <param name="message">A message to emit.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.Fail(System.String,System.String)">
            <summary>
            Emits an error message and a detailed error message.
            </summary>
            <param name="message">A message to emit.</param>
            <param name="detailMessage">A detailed message to emit.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.Flush">
            <summary>
            Flushes the output buffer.
            </summary>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes trace information, a data object and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">The trace data to emit.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Writes trace information, an array of data objects and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">An array of objects to emit as data.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
            <summary>
            Writes trace and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes trace information, a formatted array of objects and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args"/> array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes trace information, a message, and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
            <summary>
            Writes trace information, a message, a related activity identity and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">A message to write.</param>
            <param name="relatedActivityId">A <see cref="T:System.Guid"/>  object identifying a related activity.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.GetSupportedAttributes">
            <summary>
            Gets the custom attributes supported by the trace listener.
            </summary>
            <returns>
            A string array naming the custom attributes supported by the trace listener, or null if there are no custom attributes.
            </returns>
        </member>
        <member name="M:NLog.NLogTraceListener.TranslateLogLevel(System.Diagnostics.TraceEventType)">
            <summary>
            Translates the event type to level from <see cref="T:System.Diagnostics.TraceEventType"/>.
            </summary>
            <param name="eventType">Type of the event.</param>
            <returns>Translated log level.</returns>
        </member>
        <member name="M:NLog.NLogTraceListener.ProcessLogEventInfo(NLog.LogLevel,System.String,System.String,System.Object[],System.Nullable{System.Int32},System.Nullable{System.Diagnostics.TraceEventType},System.Nullable{System.Guid})">
            <summary>
            Process the log event
            <param name="logLevel">The log level.</param>
            <param name="loggerName">The name of the logger.</param>
            <param name="message">The log message.</param>
            <param name="arguments">The log parameters.</param>
            <param name="eventId">The event id.</param>
            <param name="eventType">The event type.</param>
            <param name="relatedActiviyId">The related activity id.</param>
            </summary>
        </member>
        <member name="T:NLog.Targets.ArchiveNumberingMode">
            <summary>
            Specifies the way archive numbering is performed.
            </summary>
        </member>
        <member name="F:NLog.Targets.ArchiveNumberingMode.Sequence">
            <summary>
            Sequence style numbering. The most recent archive has the highest number.
            </summary>
        </member>
        <member name="F:NLog.Targets.ArchiveNumberingMode.Rolling">
            <summary>
            Rolling style numbering (the most recent is always #0 then #1, ..., #N.
            </summary>
        </member>
        <member name="F:NLog.Targets.ArchiveNumberingMode.Date">
            <summary>
            Date style numbering.  Archives will be stamped with the prior period 
            (Year, Month, Day, Hour, Minute) datetime.
            </summary>
        </member>
        <member name="F:NLog.Targets.ArchiveNumberingMode.DateAndSequence">
            <summary>
            Date and sequence style numbering.
            Archives will be stamped with the prior period (Year, Month, Day) datetime.
            The most recent archive has the highest number (in combination with the date).
            </summary>
        </member>
        <member name="T:NLog.Targets.AspResponseTarget">
            <summary>
            Outputs log messages through the ASP Response object.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/AspResponse-target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Targets.AspResponseTarget.AddComments">
            <summary>
            Gets or sets a value indicating whether to add &lt;!-- --&gt; comments around all written texts.
            </summary>
            <docgen category='Layout Options' order='100' />
        </member>
        <member name="M:NLog.Targets.AspResponseTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.AspResponseTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.AspResponseTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.AspResponseTarget"/> class with a name.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="M:NLog.Targets.AspResponseTarget.Write(NLog.LogEventInfo)">
            <summary>
            Outputs the rendered logging event through the <c>OutputDebugString()</c> Win32 API.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.ChainsawTarget">
            <summary>
            Sends log messages to the remote instance of Chainsaw application from log4j. 
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Chainsaw-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Chainsaw/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Chainsaw/Simple/Example.cs" />
            <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will crawl. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
            </example>
        </member>
        <member name="M:NLog.Targets.ChainsawTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ChainsawTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.ChainsawTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ChainsawTarget"/> class with a name.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="T:NLog.Targets.ColoredConsoleTarget">
            <summary>
            Writes log messages to the console with customizable coloring.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/ColoredConsole-target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ColoredConsoleTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ColoredConsoleTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.ErrorStream">
            <summary>
            Gets or sets a value indicating whether the error stream (stderr) should be used instead of the output stream (stdout).
            </summary>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.UseDefaultRowHighlightingRules">
            <summary>
            Gets or sets a value indicating whether to use default row highlighting rules.
            </summary>
            <remarks>
            The default rules are:
            <table>
            <tr>
            <th>Condition</th>
            <th>Foreground Color</th>
            <th>Background Color</th>
            </tr>
            <tr>
            <td>level == LogLevel.Fatal</td>
            <td>Red</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Error</td>
            <td>Yellow</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Warn</td>
            <td>Magenta</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Info</td>
            <td>White</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Debug</td>
            <td>Gray</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Trace</td>
            <td>DarkGray</td>
            <td>NoChange</td>
            </tr>
            </table>
            </remarks>
            <docgen category='Highlighting Rules' order='9' />
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.Encoding">
            <summary>
            The encoding for writing messages to the <see cref="T:System.Console"/>.
             </summary>
            <remarks>Has side effect</remarks>
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.RowHighlightingRules">
            <summary>
            Gets the row highlighting rules.
            </summary>
            <docgen category='Highlighting Rules' order='10' />
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.WordHighlightingRules">
            <summary>
            Gets the word highlighting rules.
            </summary>
            <docgen category='Highlighting Rules' order='11' />
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified log event to the console highlighting entries
            and words based on a set of defined rules.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="T:NLog.Targets.ColoredConsoleTarget.ColorPair">
            <summary>
            Color pair (foreground and background).
            </summary>
        </member>
        <member name="T:NLog.Targets.ConsoleOutputColor">
            <summary>
            Colored console output color.
            </summary>
            <remarks>
            Note that this enumeration is defined to be binary compatible with 
            .NET 2.0 System.ConsoleColor + some additions
            </remarks>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Black">
            <summary>
            Black Color (#000000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkBlue">
            <summary>
            Dark blue Color (#000080).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkGreen">
            <summary>
            Dark green Color (#008000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkCyan">
            <summary>
            Dark Cyan Color (#008080).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkRed">
            <summary>
            Dark Red Color (#800000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkMagenta">
            <summary>
            Dark Magenta Color (#800080).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkYellow">
            <summary>
            Dark Yellow Color (#808000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Gray">
            <summary>
            Gray Color (#C0C0C0).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkGray">
            <summary>
            Dark Gray Color (#808080).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Blue">
            <summary>
            Blue Color (#0000FF).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Green">
            <summary>
            Green Color (#00FF00).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Cyan">
            <summary>
            Cyan Color (#00FFFF).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Red">
            <summary>
            Red Color (#FF0000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Magenta">
            <summary>
            Magenta Color (#FF00FF).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Yellow">
            <summary>
            Yellow Color (#FFFF00).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.White">
            <summary>
            White Color (#FFFFFF).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.NoChange">
            <summary>
            Don't change the color.
            </summary>
        </member>
        <member name="T:NLog.Targets.ConsoleRowHighlightingRule">
            <summary>
            The row-highlighting condition.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleRowHighlightingRule.#cctor">
            <summary>
            Initializes static members of the ConsoleRowHighlightingRule class.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleRowHighlightingRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleRowHighlightingRule" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleRowHighlightingRule.#ctor(NLog.Conditions.ConditionExpression,NLog.Targets.ConsoleOutputColor,NLog.Targets.ConsoleOutputColor)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleRowHighlightingRule" /> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="foregroundColor">Color of the foreground.</param>
            <param name="backgroundColor">Color of the background.</param>
        </member>
        <member name="P:NLog.Targets.ConsoleRowHighlightingRule.Default">
            <summary>
            Gets the default highlighting rule. Doesn't change the color.
            </summary>
        </member>
        <member name="P:NLog.Targets.ConsoleRowHighlightingRule.Condition">
            <summary>
            Gets or sets the condition that must be met in order to set the specified foreground and background color.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleRowHighlightingRule.ForegroundColor">
            <summary>
            Gets or sets the foreground color.
            </summary>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleRowHighlightingRule.BackgroundColor">
            <summary>
            Gets or sets the background color.
            </summary>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="M:NLog.Targets.ConsoleRowHighlightingRule.CheckCondition(NLog.LogEventInfo)">
            <summary>
            Checks whether the specified log event matches the condition (if any).
            </summary>
            <param name="logEvent">
            Log event.
            </param>
            <returns>
            A value of <see langword="true"/> if the condition is not defined or 
            if it matches, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:NLog.Targets.ConsoleTarget">
            <summary>
            Writes log messages to the console.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Console-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Console/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Console/Simple/Example.cs" />
            </example>
        </member>
        <member name="P:NLog.Targets.ConsoleTarget.Error">
            <summary>
            Gets or sets a value indicating whether to send the log messages to the standard error instead of the standard output.
            </summary>
            <docgen category='Console Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleTarget.Encoding">
            <summary>
            The encoding for writing messages to the <see cref="T:System.Console"/>.
             </summary>
            <remarks>Has side effect</remarks>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the Console.Out or
            Console.Error depending on the value of the Error flag.
            </summary>
            <param name="logEvent">The logging event.</param>
            <remarks>
            Note that the Error option is not supported on .NET Compact Framework.
            </remarks>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.Output(System.String)">
            <summary>
            Write to output
            </summary>
            <param name="textLine">text to be written.</param>
        </member>
        <member name="T:NLog.Targets.ConsoleWordHighlightingRule">
            <summary>
            Highlighting rule for Win32 colorful console.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleWordHighlightingRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleWordHighlightingRule" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleWordHighlightingRule.#ctor(System.String,NLog.Targets.ConsoleOutputColor,NLog.Targets.ConsoleOutputColor)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleWordHighlightingRule" /> class.
            </summary>
            <param name="text">The text to be matched..</param>
            <param name="foregroundColor">Color of the foreground.</param>
            <param name="backgroundColor">Color of the background.</param>
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.Regex">
            <summary>
            Gets or sets the regular expression to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.CompileRegex">
            <summary>
            Compile the <see cref="P:NLog.Targets.ConsoleWordHighlightingRule.Regex"/>? This can improve the performance, but at the costs of more memory usage. If <c>false</c>, the Regex Cache is used.
            </summary>
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.Text">
            <summary>
            Gets or sets the text to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.WholeWords">
            <summary>
            Gets or sets a value indicating whether to match whole words only.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing texts.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.ForegroundColor">
            <summary>
            Gets or sets the foreground color.
            </summary>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.BackgroundColor">
            <summary>
            Gets or sets the background color.
            </summary>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.CompiledRegex">
            <summary>
            Gets the compiled regular expression that matches either Text or Regex property. Only used when <see cref="P:NLog.Targets.ConsoleWordHighlightingRule.CompileRegex"/> is <c>true</c>.
            </summary>
            <remarks>Access this property will compile the Regex.</remarks>
        </member>
        <member name="M:NLog.Targets.ConsoleWordHighlightingRule.GetRegexOptions(System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Get regex options. 
            </summary>
            <param name="regexOptions">Default option to start with.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.ConsoleWordHighlightingRule.GetRegexExpression">
            <summary>
            Get Expression for a <see cref="P:NLog.Targets.ConsoleWordHighlightingRule.Regex"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.ConsoleWordHighlightingRule.MatchEvaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Replace regex result
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.Targets.DatabaseCommandInfo">
            <summary>
            Information about database command + parameters.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseCommandInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseCommandInfo"/> class.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.CommandType">
            <summary>
            Gets or sets the type of the command.
            </summary>
            <value>The type of the command.</value>
            <docgen category='Command Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.ConnectionString">
            <summary>
            Gets or sets the connection string to run the command against. If not provided, connection string from the target is used.
            </summary>
            <docgen category='Command Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.Text">
            <summary>
            Gets or sets the command text.
            </summary>
            <docgen category='Command Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.IgnoreFailures">
            <summary>
            Gets or sets a value indicating whether to ignore failures.
            </summary>
            <docgen category='Command Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.Parameters">
            <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a database named or positional parameter.
            </summary>
            <docgen category='Command Options' order='10' />
        </member>
        <member name="T:NLog.Targets.DatabaseTarget">
            <summary>
            Writes log messages to the database using an ADO.NET provider.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Database-target">Documentation on NLog Wiki</seealso>
            <example>
            <para>
            The configuration is dependent on the database type, because
            there are differnet methods of specifying connection string, SQL
            command and command parameters.
            </para>
            <para>MS SQL Server using System.Data.SqlClient:</para>
            <code lang="XML" source="examples/targets/Configuration File/Database/MSSQL/NLog.config" height="450" />
            <para>Oracle using System.Data.OracleClient:</para>
            <code lang="XML" source="examples/targets/Configuration File/Database/Oracle.Native/NLog.config" height="350" />
            <para>Oracle using System.Data.OleDBClient:</para>
            <code lang="XML" source="examples/targets/Configuration File/Database/Oracle.OleDB/NLog.config" height="350" />
            <para>To set up the log target programmatically use code like this (an equivalent of MSSQL configuration):</para>
            <code lang="C#" source="examples/targets/Configuration API/Database/MSSQL/Example.cs" height="630" />
            </example>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseTarget" /> class.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBProvider">
            <summary>
            Gets or sets the name of the database provider.
            </summary>
            <remarks>
            <para>
            The parameter name should be a provider invariant name as registered in machine.config or app.config. Common values are:
            </para>
            <ul>
            <li><c>System.Data.SqlClient</c> - <see href="http://msdn.microsoft.com/en-us/library/system.data.sqlclient.aspx">SQL Sever Client</see></li>
            <li><c>System.Data.SqlServerCe.3.5</c> - <see href="http://www.microsoft.com/sqlserver/2005/en/us/compact.aspx">SQL Sever Compact 3.5</see></li>
            <li><c>System.Data.OracleClient</c> - <see href="http://msdn.microsoft.com/en-us/library/system.data.oracleclient.aspx">Oracle Client from Microsoft</see> (deprecated in .NET Framework 4)</li>
            <li><c>Oracle.DataAccess.Client</c> - <see href="http://www.oracle.com/technology/tech/windows/odpnet/index.html">ODP.NET provider from Oracle</see></li>
            <li><c>System.Data.SQLite</c> - <see href="http://sqlite.phxsoftware.com/">System.Data.SQLite driver for SQLite</see></li>
            <li><c>Npgsql</c> - <see href="http://npgsql.projects.postgresql.org/">Npgsql driver for PostgreSQL</see></li>
            <li><c>MySql.Data.MySqlClient</c> - <see href="http://www.mysql.com/downloads/connector/net/">MySQL Connector/Net</see></li>
            </ul>
            <para>(Note that provider invariant names are not supported on .NET Compact Framework).</para>
            <para>
            Alternatively the parameter value can be be a fully qualified name of the provider 
            connection type (class implementing <see cref="T:System.Data.IDbConnection" />) or one of the following tokens:
            </para>
            <ul>
            <li><c>sqlserver</c>, <c>mssql</c>, <c>microsoft</c> or <c>msde</c> - SQL Server Data Provider</li>
            <li><c>oledb</c> - OLEDB Data Provider</li>
            <li><c>odbc</c> - ODBC Data Provider</li>
            </ul>
            </remarks>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.ConnectionStringName">
            <summary>
            Gets or sets the name of the connection string (as specified in <see href="http://msdn.microsoft.com/en-us/library/bf7sd233.aspx">&lt;connectionStrings&gt; configuration section</see>.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.ConnectionString">
            <summary>
            Gets or sets the connection string. When provided, it overrides the values
            specified in DBHost, DBUserName, DBPassword, DBDatabase.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.InstallConnectionString">
            <summary>
            Gets or sets the connection string using for installation and uninstallation. If not provided, regular ConnectionString is being used.
            </summary>
            <docgen category='Installation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.InstallDdlCommands">
            <summary>
            Gets the installation DDL commands.
            </summary>
            <docgen category='Installation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.UninstallDdlCommands">
            <summary>
            Gets the uninstallation DDL commands.
            </summary>
            <docgen category='Installation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.KeepConnection">
            <summary>
            Gets or sets a value indicating whether to keep the 
            database connection open between the log events.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.UseTransactions">
            <summary>
            Obsolete - value will be ignored! The logging code always runs outside of transaction. 
            
            Gets or sets a value indicating whether to use database transactions. 
            Some data providers require this.
            </summary>
            <docgen category='Connection Options' order='10' />
            <remarks>
            This option was removed in NLog 4.0 because the logging code always runs outside of transaction. 
            This ensures that the log gets written to the database if you rollback the main transaction because of an error and want to log the error.
            </remarks>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBHost">
            <summary>
            Gets or sets the database host name. If the ConnectionString is not provided
            this value will be used to construct the "Server=" part of the
            connection string.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBUserName">
            <summary>
            Gets or sets the database user name. If the ConnectionString is not provided
            this value will be used to construct the "User ID=" part of the
            connection string.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBPassword">
            <summary>
            Gets or sets the database password. If the ConnectionString is not provided
            this value will be used to construct the "Password=" part of the
            connection string.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBDatabase">
            <summary>
            Gets or sets the database name. If the ConnectionString is not provided
            this value will be used to construct the "Database=" part of the
            connection string.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.CommandText">
            <summary>
            Gets or sets the text of the SQL command to be run on each log level.
            </summary>
            <remarks>
            Typically this is a SQL INSERT statement or a stored procedure call. 
            It should use the database-specific parameters (marked as <c>@parameter</c>
            for SQL server or <c>:parameter</c> for Oracle, other data providers
            have their own notation) and not the layout renderers, 
            because the latter is prone to SQL injection attacks.
            The layout renderers should be specified as &lt;parameter /&gt; elements instead.
            </remarks>
            <docgen category='SQL Statement' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.CommandType">
            <summary>
            Gets or sets the type of the SQL command to be run on each log level.
            </summary>
            <remarks>
            This specifies how the command text is interpreted, as "Text" (default) or as "StoredProcedure".
            When using the value StoredProcedure, the commandText-property would 
            normally be the name of the stored procedure. TableDirect method is not supported in this context.
            </remarks>
            <docgen category='SQL Statement' order='11' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.Parameters">
            <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a database named or positional parameter.
            </summary>
            <docgen category='SQL Statement' order='12' />
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.InitializeTarget">
            <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the database. It creates
            a new database command, prepares parameters for it by calculating
            layouts and executes the command.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
            <param name="logEvents">Logging events to be written out.</param>
        </member>
        <member name="T:NLog.Targets.DateAndSequenceArchive">
            <summary>
            A descriptor for an archive created with the DateAndSequence numbering mode.
            </summary>
        </member>
        <member name="P:NLog.Targets.DateAndSequenceArchive.FileName">
            <summary>
            The full name of the archive file.
            </summary>
        </member>
        <member name="P:NLog.Targets.DateAndSequenceArchive.Date">
            <summary>
            The parsed date contained in the file name.
            </summary>
        </member>
        <member name="P:NLog.Targets.DateAndSequenceArchive.Sequence">
            <summary>
            The parsed sequence number contained in the file name.
            </summary>
        </member>
        <member name="M:NLog.Targets.DateAndSequenceArchive.HasSameFormattedDate(System.DateTime)">
            <summary>
            Determines whether <paramref name="date"/> produces the same string as the current instance's date once formatted with the current instance's date format.
            </summary>
            <param name="date">The date to compare the current object's date to.</param>
            <returns><c>True</c> if the formatted dates are equal, otherwise <c>False</c>.</returns>
        </member>
        <member name="M:NLog.Targets.DateAndSequenceArchive.#ctor(System.String,System.DateTime,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DateAndSequenceArchive"/> class.
            </summary>
        </member>
        <member name="T:NLog.Targets.DebuggerTarget">
            <summary>
            Writes log messages to the attached managed debugger.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Debugger/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Debugger/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DebuggerTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DebuggerTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the attached debugger.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.DebugTarget">
            <summary>
            Mock target - useful for testing.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Debug-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Debug/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Debug/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.DebugTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DebugTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.DebugTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DebugTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.DebugTarget.Counter">
            <summary>
            Gets the number of times this target has been called.
            </summary>
            <docgen category='Debugging Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DebugTarget.LastMessage">
            <summary>
            Gets the last message rendered by this target.
            </summary>
            <docgen category='Debugging Options' order='10' />
        </member>
        <member name="M:NLog.Targets.DebugTarget.Write(NLog.LogEventInfo)">
            <summary>
            Increases the number of messages.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.EventLogTarget">
            <summary>
            Writes log message to the Event Log.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/EventLog-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/EventLog/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/EventLog/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.EventLogTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.#ctor(NLog.Internal.Fakeables.IAppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.EventLogTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.EventLogTarget"/> class.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.EventLogTarget.MachineName">
            <summary>
            Gets or sets the name of the machine on which Event Log service is running.
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.EventId">
            <summary>
            Gets or sets the layout that renders event ID.
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.Category">
            <summary>
            Gets or sets the layout that renders event Category.
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.EntryType">
            <summary>
            Optional entrytype. When not set, or when not convertable to <see cref="T:System.LogLevel"/> then determined by <see cref="T:NLog.LogLevel"/>
            </summary>
        </member>
        <member name="P:NLog.Targets.EventLogTarget.Source">
            <summary>
            Gets or sets the value to be used as the event Source.
            </summary>
            <remarks>
            By default this is the friendly name of the current AppDomain.
            </remarks>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.Log">
            <summary>
            Gets or sets the name of the Event Log to write to. This can be System, Application or 
            any user-defined name.
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.MaxMessageLength">
            <summary>
            Gets or sets the message length limit to write to the Event Log.
            </summary>
            <remarks><value>MaxMessageLength</value> cannot be zero or negative</remarks>
        </member>
        <member name="P:NLog.Targets.EventLogTarget.OnOverflow">
            <summary>
            Gets or sets the action to take if the message is larger than the <see cref="P:NLog.Targets.EventLogTarget.MaxMessageLength"/> option.
            </summary>
            <docgen category='Event Log Overflow Action' order='10' />
        </member>
        <member name="M:NLog.Targets.EventLogTarget.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the event log. 
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.GetEntryType(NLog.LogEventInfo)">
            <summary>
            Get the entry type for logging the message.
            </summary>
            <param name="logEvent">The logging event - for rendering the <see cref="P:NLog.Targets.EventLogTarget.EntryType"/></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.GetFixedSource">
            <summary>
            Get the source, if and only if the source is fixed. 
            </summary>
            <returns><c>null</c> when not <see cref="P:NLog.Layouts.SimpleLayout.IsFixedText"/></returns>
            <remarks>Internal for unit tests</remarks>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.GetEventLog(NLog.LogEventInfo)">
            <summary>
            Get the eventlog to write to.
            </summary>
            <param name="logEvent">Event if the source needs to be rendered.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.CreateEventSourceIfNeeded(System.String,System.Boolean)">
            <summary>
            (re-)create a event source, if it isn't there. Works only with fixed sourcenames.
            </summary>
            <param name="fixedSource">sourcenaam. If source is not fixed (see <see cref="P:NLog.Layouts.SimpleLayout.IsFixedText"/>, then pass <c>null</c> or emptystring.</param>
            <param name="alwaysThrowError">always throw an Exception when there is an error</param>
        </member>
        <member name="T:NLog.Targets.EventLogTargetOverflowAction">
            <summary>
            Action that should be taken if the message is greater than
            the max message size allowed by the Event Log.
            </summary>
        </member>
        <member name="F:NLog.Targets.EventLogTargetOverflowAction.Truncate">
            <summary>
            Truncate the message before writing to the Event Log.
            </summary>
        </member>
        <member name="F:NLog.Targets.EventLogTargetOverflowAction.Split">
            <summary>
            Split the message and write multiple entries to the Event Log.
            </summary>
        </member>
        <member name="F:NLog.Targets.EventLogTargetOverflowAction.Discard">
            <summary>
            Discard of the message. It will not be written to the Event Log.
            </summary>
        </member>
        <member name="T:NLog.Targets.FileArchivePeriod">
            <summary>
            Modes of archiving files based on time.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.None">
            <summary>
            Don't archive based on time.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Year">
            <summary>
            AddToArchive every year.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Month">
            <summary>
            AddToArchive every month.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Day">
            <summary>
            AddToArchive daily.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Hour">
            <summary>
            AddToArchive every hour.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Minute">
            <summary>
            AddToArchive every minute.
            </summary>
        </member>
        <member name="T:NLog.Targets.FileTarget">
            <summary>
            Writes log messages to one or more files.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/File-target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="F:NLog.Targets.FileTarget.InitializedFilesCleanupPeriod">
            <summary>
            Default clean up period of the initilized files. When a file exceeds the clean up period is removed from the list.
            </summary>
            <remarks>Clean up period is defined in days.</remarks>
        </member>
        <member name="F:NLog.Targets.FileTarget.InitializedFilesCounterMax">
            <summary>
            The maximum number of initialised files at any one time. Once this number is exceeded clean up procedures
            are initiated to reduce the number of initialised files.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.ArchiveAboveSizeDisabled">
            <summary>
            This value disables file archiving based on the size. 
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.DirectorySeparatorChars">
            <summary>
            Cached directory separator char array to avoid memory allocation on each method call.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.InvalidFileNameChars">
            <summary>
            Cached invalid filenames char array to avoid memory allocation everytime Path.GetInvalidFileNameChars() is called.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.initializedFiles">
            <summary>
            Holds the initialised files each given time by the <see cref="T:NLog.Targets.FileTarget"/> instance. Against each file, the last write time is stored. 
            </summary>
            <remarks>Last write time is store in local time (no UTC).</remarks>
        </member>
        <member name="F:NLog.Targets.FileTarget.appenderFactory">
            <summary>
            Factory used to create the file appenders in the <see cref="T:NLog.Targets.FileTarget"/> instance. 
            </summary>
            <remarks>File appenders are stored in an instance of <see cref="T:NLog.Internal.FileAppenders.FileAppenderCache"/>.</remarks>
        </member>
        <member name="F:NLog.Targets.FileTarget.fileAppenderCache">
            <summary>
            List of the associated file appenders with the <see cref="T:NLog.Targets.FileTarget"/> instance.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.initializedFilesCounter">
            <summary>
            The number of initialised files at any one time.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.maxArchiveFiles">
            <summary>
            The maximum number of archive files that should be kept.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.previousFileNames">
            <summary>
            It holds the file names of existing archives in order for the oldest archives to be removed when the list of
            filenames becomes too long.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.fileName">
            <summary>
            The filename as target
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.archiveFileName">
            <summary>
            The archive file name as target
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.cachedCleanedFileNamed">
            <summary>
            The filename if <see cref="P:NLog.Targets.FileTarget.FileName"/> is a fixed string
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.previousLogEventTimestamp">
            <summary>
            The date of the previous log event.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.previousLogFileName">
            <summary>
            The file name of the previous log event.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.FileTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.FileTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.FileTarget.FileName">
            <summary>
            Gets or sets the name of the file to write to.
            </summary>
            <remarks>
            This FileName string is a layout which may include instances of layout renderers.
            This lets you use a single target to write to multiple files.
            </remarks>
            <example>
            The following value makes NLog write logging events to files based on the log level in the directory where
            the application runs.
            <code>${basedir}/${level}.log</code>
            All <c>Debug</c> messages will go to <c>Debug.log</c>, all <c>Info</c> messages will go to <c>Info.log</c> and so on.
            You can combine as many of the layout renderers as you want to produce an arbitrary log file name.
            </example>
            <docgen category='Output Options' order='1' />
        </member>
        <member name="P:NLog.Targets.FileTarget.CleanupFileName">
            <summary>
            Cleanup invalid values in a filename, e.g. slashes in a filename. If set to <c>true</c>, this can impact the performance of massive writes. 
            If set to <c>false</c>, nothing gets written when the filename is wrong.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.CreateDirs">
            <summary>
            Gets or sets a value indicating whether to create directories if they do not exist.
            </summary>
            <remarks>
            Setting this to false may improve performance a bit, but you'll receive an error
            when attempting to write to a directory that's not present.
            </remarks>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.DeleteOldFileOnStartup">
            <summary>
            Gets or sets a value indicating whether to delete old log file on startup.
            </summary>
            <remarks>
            This option works only when the "FileName" parameter denotes a single file.
            </remarks>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ReplaceFileContentsOnEachWrite">
            <summary>
            Gets or sets a value indicating whether to replace file contents on each write instead of appending log message at the end.
            </summary>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.KeepFileOpen">
            <summary>
            Gets or sets a value indicating whether to keep log file open instead of opening and closing it on each logging event.
            </summary>
            <remarks>
            Setting this property to <c>True</c> helps improve performance.
            </remarks>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.maxLogFilenames">
            <summary>
            Gets or sets the maximum number of log filenames that should be stored as existing.
            </summary>
            <remarks>
            The bigger this number is the longer it will take to write each log record. The smaller the number is
            the higher the chance that the clean function will be run when no new files have been opened.
            </remarks>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.EnableFileDelete">
            <summary>
            Gets or sets a value indicating whether to enable log file(s) to be deleted.
            </summary>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.FileAttributes">
            <summary>
            Gets or sets the file attributes (Windows only).
            </summary>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.LineEnding">
            <summary>
            Gets or sets the line ending mode.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.AutoFlush">
            <summary>
            Gets or sets a value indicating whether to automatically flush the file buffers after each log message.
            </summary>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.OpenFileCacheSize">
            <summary>
            Gets or sets the number of files to be kept open. Setting this to a higher value may improve performance
            in a situation where a single File target is writing to many files
            (such as splitting by level or by logger).
            </summary>
            <remarks>
            The files are managed on a LRU (least recently used) basis, which flushes
            the files that have not been used for the longest period of time should the
            cache become full. As a rule of thumb, you shouldn't set this parameter to 
            a very high value. A number like 10-15 shouldn't be exceeded, because you'd
            be keeping a large number of files open which consumes system resources.
            </remarks>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.OpenFileCacheTimeout">
            <summary>
            Gets or sets the maximum number of seconds that files are kept open. If this number is negative the files are 
            not automatically closed after a period of inactivity.
            </summary>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.BufferSize">
            <summary>
            Gets or sets the log file buffer size in bytes.
            </summary>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.Encoding">
            <summary>
            Gets or sets the file encoding.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWrites">
            <summary>
            Gets or sets a value indicating whether concurrent writes to the log file by multiple processes on the same host.
            </summary>
            <remarks>
            This makes multi-process logging possible. NLog uses a special technique
            that lets it keep the files open for writing.
            </remarks>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.NetworkWrites">
            <summary>
            Gets or sets a value indicating whether concurrent writes to the log file by multiple processes on different network hosts.
            </summary>
            <remarks>
            This effectively prevents files from being kept open.
            </remarks>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWriteAttempts">
            <summary>
            Gets or sets the number of times the write is appended on the file before NLog
            discards the log message.
            </summary>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWriteAttemptDelay">
            <summary>
            Gets or sets the delay in milliseconds to wait before attempting to write to the file again.
            </summary>
            <remarks>
            The actual delay is a random value between 0 and the value specified
            in this parameter. On each failed attempt the delay base is doubled
            up to <see cref="P:NLog.Targets.FileTarget.ConcurrentWriteAttempts" /> times.
            </remarks>
            <example>
            Assuming that ConcurrentWriteAttemptDelay is 10 the time to wait will be:<p/>
            a random value between 0 and 10 milliseconds - 1st attempt<br/>
            a random value between 0 and 20 milliseconds - 2nd attempt<br/>
            a random value between 0 and 40 milliseconds - 3rd attempt<br/>
            a random value between 0 and 80 milliseconds - 4th attempt<br/>
            ...<p/>
            and so on.
            </example>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveOldFileOnStartup">
            <summary>
            Gets or sets a value indicating whether to archive old log file on startup.
            </summary>
            <remarks>
            This option works only when the "FileName" parameter denotes a single file.
            After archiving the old file, the current log file will be empty.
            </remarks>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveDateFormat">
            <summary>
            Gets or sets a value specifying the date format to use when archiving files.
            </summary>
            <remarks>
            This option works only when the "ArchiveNumbering" parameter is set either to Date or DateAndSequence.
            </remarks>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveAboveSize">
            <summary>
            Gets or sets the size in bytes above which log files will be automatically archived.
            
            Warning: combining this with <see cref="F:NLog.Targets.ArchiveNumberingMode.Date"/> isn't supported. We cannot create multiple archive files, if they should have the same name.
            Choose:  <see cref="F:NLog.Targets.ArchiveNumberingMode.DateAndSequence"/> 
            </summary>
            <remarks>
            Caution: Enabling this option can considerably slow down your file 
            logging in multi-process scenarios. If only one process is going to
            be writing to the file, consider setting <c>ConcurrentWrites</c>
            to <c>false</c> for maximum performance.
            </remarks>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveEvery">
            <summary>
            Gets or sets a value indicating whether to automatically archive log files every time the specified time passes.
            </summary>
            <remarks>
            Files are moved to the archive as part of the write operation if the current period of time changes. For example
            if the current <c>hour</c> changes from 10 to 11, the first write that will occur
            on or after 11:00 will trigger the archiving.
            <p>
            Caution: Enabling this option can considerably slow down your file 
            logging in multi-process scenarios. If only one process is going to
            be writing to the file, consider setting <c>ConcurrentWrites</c>
            to <c>false</c> for maximum performance.
            </p>
            </remarks>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveFileName">
            <summary>
            Gets or sets the name of the file to be used for an archive.
            </summary>
            <remarks>
            It may contain a special placeholder {#####}
            that will be replaced with a sequence of numbers depending on 
            the archiving strategy. The number of hash characters used determines
            the number of numerical digits to be used for numbering files.
            </remarks>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.MaxArchiveFiles">
            <summary>
            Gets or sets the maximum number of archive files that should be kept.
            </summary>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveNumbering">
            <summary>
            Gets or sets the way file archives are numbered. 
            </summary>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.FileCompressor">
            <summary>
            Used to compress log files during archiving.
            This may be used to provide your own implementation of a zip file compressor,
            on platforms other than .Net4.5.
            Defaults to ZipArchiveFileCompressor on .Net4.5 and to null otherwise.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.EnableArchiveFileCompression">
            <summary>
            Gets or sets a value indicating whether to compress archive files into the zip archive format.
            </summary>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ForceManaged">
            <summary>
            Gets or set a value indicating whether a managed file stream is forced, instead of used the native implementation.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.NewLineChars">
            <summary>
            Gets the characters that are appended after each line.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.RefreshArchiveFilePatternToWatch">
            <summary>
            Refresh the ArchiveFilePatternToWatch option of the <see cref="T:NLog.Internal.FileAppenders.FileAppenderCache" />. 
            The log file must be watched for archiving when multiple processes are writing to the same 
            open file.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.CleanupInitializedFiles">
            <summary>
            Removes records of initialized files that have not been 
            accessed in the last two days.
            </summary>
            <remarks>
            Files are marked 'initialized' for the purpose of writing footers when the logging finishes.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.CleanupInitializedFiles(System.DateTime)">
            <summary>
            Removes records of initialized files that have not been
            accessed after the specified date.
            </summary>
            <param name="cleanupThreshold">The cleanup threshold.</param>
            <remarks>
            Files are marked 'initialized' for the purpose of writing footers when the logging finishes.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flushes all pending file operations.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <remarks>
            The timeout parameter is ignored, because file APIs don't provide
            the needed functionality.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetFileAppenderFactory">
            <summary>
            Returns the suitable appender factory ( <see cref="T:NLog.Internal.FileAppenders.IFileAppenderFactory"/>) to be used to generate the file
            appenders associated with the <see cref="T:NLog.Targets.FileTarget"/> instance.
            
            The type of the file appender factory returned depends on the values of various <see cref="T:NLog.Targets.FileTarget"/> properties.
            </summary>
            <returns><see cref="T:NLog.Internal.FileAppenders.IFileAppenderFactory"/> suitable for this instance.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.InitializeTarget">
            <summary>
            Initializes file logging by creating data structures that
            enable efficient multi-file logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.CloseTarget">
            <summary>
            Closes the file(s) opened for writing.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to a file specified in the FileName 
            parameter.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes the specified array of logging events to a file specified in the FileName
            parameter.
            </summary>
            <param name="logEvents">An array of <see cref="T:NLog.Common.AsyncLogEventInfo"/> objects.</param>
            <remarks>
            This function makes use of the fact that the events are batched by sorting
            the requests by filename. This optimizes the number of open/close calls
            and can help improve performance.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Formats the log event for write.
            </summary>
            <param name="logEvent">The log event to be formatted.</param>
            <returns>A string representation of the log event.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetBytesToWrite(NLog.LogEventInfo)">
            <summary>
            Gets the bytes to be written to the file.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>Array of bytes that are ready to be written.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.TransformBytes(System.Byte[])">
            <summary>
            Modifies the specified byte array before it gets sent to a file.
            </summary>
            <param name="value">The byte array.</param>
            <returns>The modified byte array. The function can do the modification in-place.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.ReplaceNumberPattern(System.String,System.Int32)">
            <summary>
            Replaces the numeric pattern i.e. {#} in a file name with the <paramref name="value"/> parameter value.
            </summary>
            <param name="pattern">File name which contains the numeric pattern.</param>
            <param name="value">Value which will replace the numeric pattern.</param>
            <returns>File name with the value of <paramref name="value"/> in the position of the numeric pattern.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.ContainsFileNamePattern(System.String)">
             <summary>
             Determines if the file name as <see cref="T:System.String"/> contains a numeric pattern i.e. {#} in it.  
            
             Example: 
                 trace{#}.log        Contains the numeric pattern.
                 trace{###}.log      Contains the numeric pattern.
                 trace{#X#}.log      Contains the numeric pattern (See remarks).
                 trace.log           Does not contain the pattern.
             </summary>
             <remarks>Occasionally, this method can identify the existence of the {#} pattern incorrectly.</remarks>
             <param name="fileName">File name to be checked.</param>
             <returns><see langword="true"/> when the pattern is found; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.RollArchivesForward(System.String,System.String,System.Int32)">
            <summary>
            Archives the <paramref name="fileName"/> using a rolling style numbering (the most recent is always #0 then
            #1, ..., #N. When the number of archive files exceed <see cref="P:MaxArchiveFiles"/> the obsolete archives
            are deleted.
            </summary>
            <remarks>
            This method is called recursively. This is the reason the <paramref name="archiveNumber"/> is required.
            </remarks>
            <param name="fileName">File name to be archived.</param>
            <param name="pattern">File name template which contains the numeric pattern to be replaced.</param>
            <param name="archiveNumber">Value which will replace the numeric pattern.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.RollArchiveForward(System.String,System.String)">
            <summary>
            Moves the archive file to the specified file name.
            </summary>
            <param name="existingFileName">The archive file to move.</param>
            <param name="newFileName">The destination file name.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.ArchiveBySequence(System.String,System.String)">
            <summary>
            Archives the <paramref name="fileName"/> using a sequence style numbering. The most recent archive has the
            highest number. When the number of archive files exceed <see cref="P:MaxArchiveFiles"/> the obsolete
            archives are deleted.
            </summary>
            <param name="fileName">File name to be archived.</param>
            <param name="pattern">File name template which contains the numeric pattern to be replaced.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.ArchiveFile(System.String,System.String)">
            <summary>
            Archives fileName to archiveFileName.
            </summary>
            <param name="fileName">File name to be archived.</param>
            <param name="archiveFileName">Name of the archive file.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.ArchiveByDateAndSequence(System.String,System.String,NLog.LogEventInfo)">
            <summary>
            <para>
            Archives the <paramref name="fileName"/> using a date and sequence style numbering. Archives will be stamped
            with the prior period (Year, Month, Day) datetime. The most recent archive has the highest number (in
            combination with the date).
            </para>
            <para>
            When the number of archive files exceed <see cref="P:MaxArchiveFiles"/> the obsolete archives are deleted.
            </para>
            </summary>
            <param name="fileName">File name to be archived.</param>
            <param name="pattern">File name template which contains the numeric pattern to be replaced.</param>
            <param name="logEvent">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.EnsureArchiveCount(System.Collections.Generic.List{System.String})">
            <summary>
            Deletes files among a given list, and stops as soon as the remaining files are fewer than the <see
            cref="P:FileTarget.MaxArchiveFiles"/> setting.
            </summary>
            <param name="oldArchiveFileNames">List of the file archives.</param>
            <remarks>
            Items are deleted in the same order as in <paramref name="oldArchiveFileNames"/>. No file is deleted if <see
            cref="P:FileTarget.MaxArchiveFiles"/> property is zero.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.FindDateAndSequenceArchives(System.String,System.String,System.String,System.Int32,System.String,NLog.Targets.FileTarget.FileNameTemplate)">
            <summary>
            Searches a given directory for archives that comply with the current archive pattern.
            </summary>
            <returns>An enumeration of archive infos, ordered by their file creation date.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetFiles(System.IO.DirectoryInfo,System.String)">
            <summary>
            Gets the collection of files in the specified directory which they match the <paramref name="fileNameMask"/>.
            </summary>
            <param name="directoryInfo">Directory to searched.</param>
            <param name="fileNameMask">Pattern which the files will be searched against.</param>
            <returns>List of files matching the pattern.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.ReplaceFileNamePattern(System.String,System.String)">
            <summary>
            Replaces the string-based pattern i.e. {#} in a file name with the value passed in <paramref
            name="replacementValue"/> parameter.
            </summary>
            <param name="pattern">File name which contains the string-based pattern.</param>
            <param name="replacementValue">Value which will replace the string-based pattern.</param>
            <returns>
            File name with the value of <paramref name="replacementValue"/> in the position of the string-based pattern.
            </returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.ArchiveByDate(System.String,System.String,NLog.LogEventInfo)">
            <summary>
            Archives the <paramref name="fileName"/> using a date style numbering. Archives will be stamped with the
            prior period (Year, Month, Day, Hour, Minute) datetime. When the number of archive files exceed <see
            cref="P:MaxArchiveFiles"/> the obsolete archives are deleted.
            </summary>
            <param name="fileName">File name to be archived.</param>
            <param name="pattern">File name template which contains the numeric pattern to be replaced.</param>
            <param name="logEvent">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.DeleteOldDateArchives(System.String)">
            <summary>
            Deletes archive files in reverse chronological order until only the
            MaxArchiveFiles number of archive files remain.
            </summary>
            <param name="pattern">The pattern that archive filenames will match</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetArchiveDateFormatString(System.String)">
            <summary>
            Gets the correct formatting <see langword="String"/> to be used based on the value of <see
            cref="P:ArchiveEvery"/> for converting <see langword="DateTime"/> values which will be inserting into file
            names during archiving.
            
            This value will be computed only when a empty value or <see langword="null"/> is passed into <paramref name="defaultFormat"/>
            </summary>
            <param name="defaultFormat">Date format to used irrespectively of <see cref="P:ArchiveEvery"/> value.</param>
            <returns>Formatting <see langword="String"/> for dates.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.DoAutoArchive(System.String,NLog.LogEventInfo)">
            <summary>
            Invokes the archiving process after determining when and which type of archiving is required.
            </summary>
            <param name="fileName">File name to be checked and archived.</param>
            <param name="eventInfo">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetArchiveFileNamePattern(System.String,NLog.LogEventInfo)">
            <summary>
            Gets the pattern that archive files will match
            </summary>
            <param name="fileName">Filename of the log file</param>
            <param name="eventInfo">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
            <returns>A string with a pattern that will match the archive filenames</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.ShouldDeleteOldArchives">
            <summary>
            Determine if old archive files should be deleted.
            </summary>
            <returns><see langword="true"/> when old archives should be deleted; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.ShouldAutoArchive(System.String,NLog.LogEventInfo,System.Int32)">
            <summary>
            Indicates if the automatic archiving process should be executed.
            </summary>
            <param name="fileName">File name to be written.</param>
            <param name="ev">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
            <param name="upcomingWriteSize">The size in bytes of the next chunk of data to be written in the file.</param>
            <returns><see langword="true"/> when archiving should be executed; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.ShouldAutoArchiveBasedOnFileSize(System.String,System.Int32)">
            <summary>
            Indicates if the automatic archiving process should be executed based on file size constrains.
            </summary>
            <param name="fileName">File name to be written.</param>
            <param name="upcomingWriteSize">The size in bytes of the next chunk of data to be written in the file.</param>
            <returns><see langword="true"/> when archiving should be executed; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.ShouldAutoArchiveBasedOnTime(System.String,NLog.LogEventInfo)">
            <summary>
            Indicates if the automatic archiving process should be executed based on date/time constrains.
            </summary>
            <param name="fileName">File name to be written.</param>
            <param name="logEvent">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
            <returns><see langword="true"/> when archiving should be executed; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetHeaderBytes">
            <summary>
            The sequence of <see langword="byte"/> to be written for the file header.
            </summary>
            <returns>Sequence of <see langword="byte"/> to be written.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetFooterBytes">
            <summary>
            The sequence of <see langword="byte"/> to be written for the file footer.
            </summary>
            <returns>Sequence of <see langword="byte"/> to be written.</returns>        
        </member>
        <member name="M:NLog.Targets.FileTarget.WriteToFile(System.String,NLog.LogEventInfo,System.Byte[],System.Boolean)">
            <summary>
            Evaluates which parts of a file should be written (header, content, footer) based on various properties of
            <see cref="T:NLog.Targets.FileTarget"/> instance and writes them.
            </summary>
            <param name="fileName">File name to be written.</param>
            <param name="logEvent">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
            <param name="bytes">Raw sequence of <see langword="byte"/> to be written into the content part of the file.</param>        
            <param name="justData">Indicates that only content section should be written in the file.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.InitializeFile(System.String,NLog.LogEventInfo,System.Boolean)">
            <summary>
            Initialise a file to be used by the <see cref="T:NLog.Targets.FileTarget"/> instance. Based on the number of initialised
            files and the values of various instance properties clean up and/or archiving processes can be invoked.
            </summary>
            <param name="fileName">File name to be written.</param>
            <param name="logEvent">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
            <param name="justData">Indicates that only content section should be written in the file.</param>
            <returns><see langword="true"/> when file header should be written; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.UninitializeFile(System.String)">
            <summary>
            Writes the file footer and uninitialises the file in <see cref="T:NLog.Targets.FileTarget"/> instance internal structures.
            </summary>
            <param name="fileName">File name to close.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.WriteFooter(System.String)">
            <summary>
            Writes the footer information to a file.
            </summary>
            <param name="fileName">The file path to write to.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.ProcessOnStartup(System.String,NLog.LogEventInfo)">
            <summary>
            Invokes the archiving and clean up of older archive file based on the values of <see
            cref="P:NLog.Targets.FileTarget.ArchiveOldFileOnStartup"/> and <see
            cref="P:NLog.Targets.FileTarget.DeleteOldFileOnStartup"/> properties respectively.
            </summary>
            <param name="fileName">File name to be written.</param>
            <param name="logEvent">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.ReplaceFileContent(System.String,System.Byte[],System.Boolean)">
            <summary>
            Creates the file specified in <paramref name="fileName"/> and writes the file content in each entirety i.e.
            Header, Content and Footer.
            </summary>
            <param name="fileName">The name of the file to be written.</param>
            <param name="bytes">Sequence of <see langword="byte"/> to be written in the content section of the file.</param>
            <param name="firstAttempt">First attempt to write?</param>
            <remarks>This method is used when the content of the log file is re-written on every write.</remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.WriteHeader(NLog.Internal.FileAppenders.BaseFileAppender)">
            <summary>
            Writes the header information to a file.
            </summary>
            <param name="appender">File appender associated with the file.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetFileCharacteristics(System.String)">
            <summary>
            Returns the length of a specified file and the last time it has been written. File appender is queried before the file system.  
            </summary>
            <param name="filePath">File which the information are requested.</param>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetLayoutBytes(NLog.Layouts.Layout)">
            <summary>
            The sequence of <see langword="byte"/> to be written in a file after applying any formating and any
            transformations required from the <see cref="T:NLog.Layouts.Layout"/>.
            </summary>
            <param name="layout">The layout used to render output message.</param>
            <returns>Sequence of <see langword="byte"/> to be written.</returns>
            <remarks>Usually it is used to render the header and hooter of the files.</remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.CleanupInvalidFileNameChars(System.String)">
            <summary>
            Replaces any invalid characters found in the <paramref name="fileName"/> with underscore i.e _ character.
            Invalid characters are defined by .NET framework and they returned by <see
            cref="M:System.IO.Path.GetInvalidFileNameChars"/> method.
            <para>Note: not implemented in Silverlight</para>
            </summary>
            <param name="fileName">The original file name which might contain invalid characters.</param>
            <returns>The cleaned up file name without any invalid characters.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.DynamicFileArchive.#ctor(NLog.Targets.FileTarget,System.Int32)">
            <summary>
            Creates an instance of <see cref="T:NLog.Targets.FileTarget.DynamicFileArchive"/> class.
            </summary>
            <param name="fileTarget">The file target instance whose files to archive.</param>
            <param name="maxArchivedFiles">Maximum number of archive files to be kept.</param>
        </member>
        <member name="P:NLog.Targets.FileTarget.DynamicFileArchive.MaxArchiveFileToKeep">
            <summary>
            Gets or sets the maximum number of archive files that should be kept.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.DynamicFileArchive.InitializeForArchiveFolderPath(System.String)">
            <summary>
            Adds the files in the specified path to the archive file queue.
            </summary>
            <param name="archiveFolderPath">The folder where the archive files are stored.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.DynamicFileArchive.Archive(System.String,System.String,System.Boolean)">
            <summary>
            Adds a file into archive.
            </summary>
            <param name="archiveFileName">File name of the archive</param>
            <param name="fileName">Original file name</param>
            <param name="createDirectory">Create a directory, if it does not exist</param>
            <returns><see langword="true"/> if the file has been moved successfully; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.DynamicFileArchive.AddToArchive(System.String,System.String,System.Boolean)">
            <summary>
            Archives the file, either by copying it to a new file system location or by compressing it, and add the file name into the list of archives.
            </summary>
            <param name="archiveFileName">Target file name.</param>
            <param name="fileName">Original file name.</param>
            <param name="createDirectory">Create a directory, if it does not exist.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.DynamicFileArchive.DeleteOldArchiveFiles">
            <summary>
            Remove old archive files when the files on the queue are more than the <see cref="P:MaxArchiveFilesToKeep"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.DynamicFileArchive.GetNextArchiveFileName(System.String)">
            <summary>
            Gets the file name for the next archive file by appending a number to the provided
            "base"-filename.
            
            Example: 
                Original Filename   trace.log
                Target Filename     trace.15.log
            </summary>          
            <param name="fileName">Original file name.</param>
            <returns>File name suitable for archiving</returns>
        </member>
        <member name="F:NLog.Targets.FileTarget.FileNameTemplate.PatternStartCharacters">
            <summary>
            Characters determining the start of the <see cref="P:FileNameTemplate.Pattern"/>.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.FileNameTemplate.PatternEndCharacters">
            <summary>
            Characters determining the end of the <see cref="P:FileNameTemplate.Pattern"/>.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.FileNameTemplate.Template">
            <summary>
            File name which is used as template for matching and replacements. 
            It is expected to contain a pattern to match.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.FileNameTemplate.BeginAt">
            <summary>
            The begging position of the <see cref="P:FileNameTemplate.Pattern"/> 
            within the <see cref="P:FileNameTemplate.Template"/>. -1 is returned 
            when no pattern can be found.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.FileNameTemplate.EndAt">
            <summary>
            The ending position of the <see cref="P:FileNameTemplate.Pattern"/> 
            within the <see cref="P:FileNameTemplate.Template"/>. -1 is returned 
            when no pattern can be found.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.FileNameTemplate.ReplacePattern(System.String)">
            <summary>
            Replace the pattern with the specified String.
            </summary>
            <param name="replacementValue"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.Targets.IFileCompressor">
            <summary>
            <see cref="T:NLog.Targets.FileTarget"/> may be configured to compress archived files in a custom way
            by setting <see cref="P:NLog.Targets.FileTarget.FileCompressor"/> before logging your first event.
            </summary>
        </member>
        <member name="M:NLog.Targets.IFileCompressor.CompressFile(System.String,System.String)">
            <summary>
            Create archiveFileName by compressing fileName.
            </summary>
            <param name="fileName">Absolute path to the log file to compress.</param>
            <param name="archiveFileName">Absolute path to the compressed archive file to create.</param>
        </member>
        <member name="T:NLog.Targets.LineEndingMode">
            <summary>
            Line ending mode.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.Default">
            <summary>
            Insert platform-dependent end-of-line sequence after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.CRLF">
            <summary>
            Insert CR LF sequence (ASCII 13, ASCII 10) after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.CR">
            <summary>
            Insert CR character (ASCII 13) after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.LF">
            <summary>
            Insert LF character (ASCII 10) after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.None">
            <summary>
            Do not insert any line ending.
            </summary>
        </member>
        <member name="P:NLog.Targets.LineEndingMode.Name">
            <summary>
            Gets the name of the LineEndingMode instance.
            </summary>
        </member>
        <member name="P:NLog.Targets.LineEndingMode.NewLineCharacters">
            <summary>
            Gets the new line characters (value) of the LineEndingMode instance.  
            </summary>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NLog.LogLevel"/>.
            </summary>
            <param name="name">The mode name.</param>
            <param name="newLineCharacters">The new line characters to be used.</param>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.FromString(System.String)">
            <summary>
             Returns the <see cref="T:NLog.Targets.LineEndingMode"/> that corresponds to the supplied <paramref name="name"/>.
            </summary>
            <param name="name">
             The textual representation of the line ending mode, such as CRLF, LF, Default etc.
             Name is not case sensitive.
            </param>
            <returns>The <see cref="T:NLog.Targets.LineEndingMode"/> value, that corresponds to the <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">There is no line ending mode with the specified name.</exception>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.op_Equality(NLog.Targets.LineEndingMode,NLog.Targets.LineEndingMode)">
            <summary>
            Compares two <see cref="T:NLog.Targets.LineEndingMode"/> objects and returns a 
            value indicating whether the first one is equal to the second one.
            </summary>
            <param name="mode1">The first level.</param>
            <param name="mode2">The second level.</param>
            <returns>The value of <c>mode1.NewLineCharacters == mode2.NewLineCharacters</c>.</returns>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.op_Inequality(NLog.Targets.LineEndingMode,NLog.Targets.LineEndingMode)">
            <summary>
            Compares two <see cref="T:NLog.Targets.LineEndingMode"/> objects and returns a 
            value indicating whether the first one is not equal to the second one.
            </summary>
            <param name="mode1">The first mode</param>
            <param name="mode2">The second mode</param>
            <returns>The value of <c>mode1.NewLineCharacters != mode2.NewLineCharacters</c>.</returns>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.ToString">
            <summary>
            Returns a string representation of the log level.
            </summary>
            <returns>Log level name.</returns>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms 
            and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with 
            this instance.</param>
            <returns>
            Value of <c>true</c> if the specified <see cref="T:System.Object"/> 
            is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="T:NLog.Targets.LineEndingMode.LineEndingModeConverter">
            <summary>
            Provides a type converter to convert <see cref="T:NLog.Targets.LineEndingMode"/> objects to and from other representations.
            </summary>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.LineEndingModeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. </param>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.LineEndingModeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:NLog.Targets.LogReceiverWebServiceTarget">
            <summary>
            Sends log messages to a NLog Receiver Service (using WCF or Web Services).
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/LogReceiverService-target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.LogReceiverWebServiceTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.LogReceiverWebServiceTarget"/> class.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.EndpointAddress">
            <summary>
            Gets or sets the endpoint address.
            </summary>
            <value>The endpoint address.</value>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.ClientId">
            <summary>
            Gets or sets the client ID.
            </summary>
            <value>The client ID.</value>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.Parameters">
            <summary>
            Gets the list of parameters.
            </summary>
            <value>The parameters.</value>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.IncludeEventProperties">
            <summary>
            Gets or sets a value indicating whether to include per-event properties in the payload sent to the server.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.OnSend(NLog.LogReceiverService.NLogEvents,System.Collections.Generic.IEnumerable{NLog.Common.AsyncLogEventInfo})">
            <summary>
            Called when log events are being sent (test hook).
            </summary>
            <param name="events">The events.</param>
            <param name="asyncContinuations">The async continuations.</param>
            <returns>True if events should be sent, false to stop processing them.</returns>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Writes logging event to the log target. Must be overridden in inheriting
            classes.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Append" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
            <param name="logEvents">Logging events to be written out.</param>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages asynchronously (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="T:NLog.Targets.MailTarget">
            <summary>
            Sends log messages by email using SMTP protocol.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Mail-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Mail/Simple/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Mail/Simple/Example.cs" />
            <p>
            Mail target works best when used with BufferingWrapper target
            which lets you send multiple log messages in single mail
            </p>
            <p>
            To set up the buffered mail target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Mail/Buffered/NLog.config" />
            <p>
            To set up the buffered mail target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Mail/Buffered/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.MailTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MailTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpSection">
            <summary>
            Gets the mailSettings/smtp configuration from app.config in cases when we need those configuration.
            E.g when UseSystemNetMailSettings is enabled and we need to read the From attribute from system.net/mailSettings/smtp
            </summary>
            <remarks>Internal for mocking</remarks>
        </member>
        <member name="M:NLog.Targets.MailTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MailTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.MailTarget.From">
            <summary>
            Gets or sets sender's email address (e.g. joe@domain.com).
            </summary>
            <docgen category='Message Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MailTarget.To">
            <summary>
            Gets or sets recipients' email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
            <docgen category='Message Options' order='11' />
        </member>
        <member name="P:NLog.Targets.MailTarget.CC">
            <summary>
            Gets or sets CC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
            <docgen category='Message Options' order='12' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Bcc">
            <summary>
            Gets or sets BCC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
            <docgen category='Message Options' order='13' />
        </member>
        <member name="P:NLog.Targets.MailTarget.AddNewLines">
            <summary>
            Gets or sets a value indicating whether to add new lines between log entries.
            </summary>
            <value>A value of <c>true</c> if new lines should be added; otherwise, <c>false</c>.</value>
            <docgen category='Layout Options' order='99' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Subject">
            <summary>
            Gets or sets the mail subject.
            </summary>
            <docgen category='Message Options' order='5' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Body">
            <summary>
            Gets or sets mail message body (repeated for each log message send in one mail).
            </summary>
            <remarks>Alias for the <c>Layout</c> property.</remarks>
            <docgen category='Message Options' order='6' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Encoding">
            <summary>
            Gets or sets encoding to be used for sending e-mail.
            </summary>
            <docgen category='Layout Options' order='20' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Html">
            <summary>
            Gets or sets a value indicating whether to send message as HTML instead of plain text.
            </summary>
            <docgen category='Layout Options' order='11' />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpServer">
            <summary>
            Gets or sets SMTP Server to be used for sending.
            </summary>
            <docgen category='SMTP Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpAuthentication">
            <summary>
            Gets or sets SMTP Authentication mode.
            </summary>
            <docgen category='SMTP Options' order='11' />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpUserName">
            <summary>
            Gets or sets the username used to connect to SMTP server (used when SmtpAuthentication is set to "basic").
            </summary>
            <docgen category='SMTP Options' order='12' />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpPassword">
            <summary>
            Gets or sets the password used to authenticate against SMTP server (used when SmtpAuthentication is set to "basic").
            </summary>
            <docgen category='SMTP Options' order='13' />
        </member>
        <member name="P:NLog.Targets.MailTarget.EnableSsl">
            <summary>
            Gets or sets a value indicating whether SSL (secure sockets layer) should be used when communicating with SMTP server.
            </summary>
            <docgen category='SMTP Options' order='14' />.
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpPort">
            <summary>
            Gets or sets the port number that SMTP Server is listening on.
            </summary>
            <docgen category='SMTP Options' order='15' />
        </member>
        <member name="P:NLog.Targets.MailTarget.UseSystemNetMailSettings">
            <summary>
            Gets or sets a value indicating whether the default Settings from System.Net.MailSettings should be used.
            </summary>
            <docgen category='SMTP Options' order='16' />
        </member>
        <member name="P:NLog.Targets.MailTarget.DeliveryMethod">
            <summary>
            Specifies how outgoing email messages will be handled.
            </summary>
            <docgen category='SMTP Options' order='18' />
        </member>
        <member name="P:NLog.Targets.MailTarget.PickupDirectoryLocation">
            <summary>
            Gets or sets the folder where applications save mail messages to be processed by the local SMTP server.
            </summary>
            <docgen category='SMTP Options' order='17' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Priority">
            <summary>
            Gets or sets the priority used for sending mails.
            </summary>
        </member>
        <member name="P:NLog.Targets.MailTarget.ReplaceNewlineWithBrTagInHtml">
            <summary>
            Gets or sets a value indicating whether NewLine characters in the body should be replaced with <br/> tags.
            </summary>
            <remarks>Only happens when <see cref="P:NLog.Targets.MailTarget.Html"/> is set to true.</remarks>
        </member>
        <member name="P:NLog.Targets.MailTarget.Timeout">
            <summary>
            Gets or sets a value indicating the SMTP client timeout.
            </summary>
            <remarks>Warning: zero is not infinit waiting</remarks>
        </member>
        <member name="M:NLog.Targets.MailTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Renders the logging event message and adds it to the internal ArrayList of log messages.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.MailTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Renders an array logging events.
            </summary>
            <param name="logEvents">Array of logging events.</param>
        </member>
        <member name="M:NLog.Targets.MailTarget.InitializeTarget">
            <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.MailTarget.ProcessSingleMailMessage(System.Collections.Generic.List{NLog.Common.AsyncLogEventInfo})">
            <summary>
            Create mail and send with SMTP
            </summary>
            <param name="events">event printed in the body of the event</param>
        </member>
        <member name="M:NLog.Targets.MailTarget.CreateBodyBuffer(System.Collections.Generic.IEnumerable{NLog.Common.AsyncLogEventInfo},NLog.LogEventInfo,NLog.LogEventInfo)">
            <summary>
            Create buffer for body
            </summary>
            <param name="events">all events</param>
            <param name="firstEvent">first event for header</param>
            <param name="lastEvent">last event for footer</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.MailTarget.ConfigureMailClient(NLog.LogEventInfo,NLog.Internal.ISmtpClient)">
            <summary>
            Set properties of <paramref name="client"/>
            </summary>
            <param name="lastEvent">last event for username/password</param>
            <param name="client">client to set properties on</param>
            <remarks>Configure not at <see cref="M:NLog.Targets.MailTarget.InitializeTarget"/>, as the properties could have layout renderers.</remarks>
        </member>
        <member name="M:NLog.Targets.MailTarget.ConvertDirectoryLocation(System.String)">
            <summary>
            Handle <paramref name="pickupDirectoryLocation"/> if it is a virtual directory.
            </summary>
            <param name="pickupDirectoryLocation"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.MailTarget.GetSmtpSettingsKey(NLog.LogEventInfo)">
             <summary>
             Create key for grouping. Needed for multiple events in one mailmessage
             </summary>
             <param name="logEvent">event for rendering layouts   </param>  
            <returns>string to group on</returns>
        </member>
        <member name="M:NLog.Targets.MailTarget.AppendLayout(System.Text.StringBuilder,NLog.LogEventInfo,NLog.Layouts.Layout)">
            <summary>
            Append rendered layout to the stringbuilder
            </summary>
            <param name="sb">append to this</param>
            <param name="logEvent">event for rendering <paramref name="layout"/></param>
            <param name="layout">append if not <c>null</c></param>
        </member>
        <member name="M:NLog.Targets.MailTarget.CreateMailMessage(NLog.LogEventInfo,System.String)">
            <summary>
            Create the mailmessage with the addresses, properties and body.
            </summary>
        </member>
        <member name="M:NLog.Targets.MailTarget.AddAddresses(System.Net.Mail.MailAddressCollection,NLog.Layouts.Layout,NLog.LogEventInfo)">
            <summary>
            Render  <paramref name="layout"/> and add the addresses to <paramref name="mailAddressCollection"/>
            </summary>
            <param name="mailAddressCollection">Addresses appended to this list</param>
            <param name="layout">layout with addresses, ; separated</param>
            <param name="logEvent">event for rendering the <paramref name="layout"/></param>
            <returns>added a address?</returns>
        </member>
        <member name="T:NLog.Targets.MemoryTarget">
            <summary>
            Writes log messages to an ArrayList in memory for programmatic retrieval.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Memory-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Memory/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Memory/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.MemoryTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MemoryTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.MemoryTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MemoryTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.MemoryTarget.Logs">
            <summary>
            Gets the list of logs gathered in the <see cref="T:NLog.Targets.MemoryTarget"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.MemoryTarget.Write(NLog.LogEventInfo)">
            <summary>
            Renders the logging event message and adds it to the internal ArrayList of log messages.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.MethodCallTarget">
            <summary>
            Calls the specified static method on each log message and passes contextual parameters to it.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/MethodCall-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/MethodCall/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/MethodCall/Simple/Example.cs" />
            </example>
        </member>
        <member name="P:NLog.Targets.MethodCallTarget.ClassName">
            <summary>
            Gets or sets the class name.
            </summary>
            <docgen category='Invocation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MethodCallTarget.MethodName">
            <summary>
            Gets or sets the method name. The method must be public and static.
            
            Use the AssemblyQualifiedName , https://msdn.microsoft.com/en-us/library/system.type.assemblyqualifiedname(v=vs.110).aspx
            e.g. 
            </summary>
            <docgen category='Invocation Options' order='10' />
        </member>
        <member name="M:NLog.Targets.MethodCallTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallTarget" /> class.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="M:NLog.Targets.MethodCallTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallTarget.DoInvoke(System.Object[])">
            <summary>
            Calls the specified Method.
            </summary>
            <param name="parameters">Method parameters.</param>
        </member>
        <member name="T:NLog.Targets.NetworkTarget">
            <summary>
            Sends log messages over the network.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Network-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Network/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Network/Simple/Example.cs" />
            <p>
            To print the results, use any application that's able to receive messages over
            TCP or UDP. <a href="http://m.nu/program/util/netcat/netcat.html">NetCat</a> is
            a simple but very powerful command-line tool that can be used for that. This image
            demonstrates the NetCat tool receiving log messages from Network target.
            </p>
            <img src="examples/targets/Screenshots/Network/Output.gif" />
            <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will be very slow. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
            <p>
            There are two specialized versions of the Network target: <a href="target.Chainsaw.html">Chainsaw</a>
            and <a href="target.NLogViewer.html">NLogViewer</a> which write to instances of Chainsaw log4j viewer
            or NLogViewer application respectively.
            </p>
            </example>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NetworkTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NetworkTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.Address">
            <summary>
            Gets or sets the network address.
            </summary>
            <remarks>
            The network address can be:
            <ul>
            <li>tcp://host:port - TCP (auto select IPv4/IPv6) (not supported on Windows Phone 7.0)</li>
            <li>tcp4://host:port - force TCP/IPv4 (not supported on Windows Phone 7.0)</li>
            <li>tcp6://host:port - force TCP/IPv6 (not supported on Windows Phone 7.0)</li>
            <li>udp://host:port - UDP (auto select IPv4/IPv6, not supported on Silverlight and on Windows Phone 7.0)</li>
            <li>udp4://host:port - force UDP/IPv4 (not supported on Silverlight and on Windows Phone 7.0)</li>
            <li>udp6://host:port - force UDP/IPv6  (not supported on Silverlight and on Windows Phone 7.0)</li>
            <li>http://host:port/pageName - HTTP using POST verb</li>
            <li>https://host:port/pageName - HTTPS using POST verb</li>
            </ul>
            For SOAP-based webservice support over HTTP use WebService target.
            </remarks>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.KeepConnection">
            <summary>
            Gets or sets a value indicating whether to keep connection open whenever possible.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.NewLine">
            <summary>
            Gets or sets a value indicating whether to append newline at the end of log message.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.MaxMessageSize">
            <summary>
            Gets or sets the maximum message size in bytes.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.ConnectionCacheSize">
            <summary>
            Gets or sets the size of the connection cache (number of connections which are kept alive).
            </summary>
            <docgen category="Connection Options" order="10"/>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.MaxConnections">
            <summary>
            Gets or sets the maximum current connections. 0 = no maximum.
            </summary>
            <docgen category="Connection Options" order="10"/>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.OnConnectionOverflow">
            <summary>
            Gets or sets the action that should be taken if the will be more connections than <see cref="P:NLog.Targets.NetworkTarget.MaxConnections"/>.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.MaxQueueSize">
            <summary>
            Gets or sets the maximum queue size.
            </summary>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.OnOverflow">
            <summary>
            Gets or sets the action that should be taken if the message is larger than
            maxMessageSize.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.Encoding">
            <summary>
            Gets or sets the encoding to be used.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="M:NLog.Targets.NetworkTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages asynchronously (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.CloseTarget">
            <summary>
            Closes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Sends the 
            rendered logging event over the network optionally concatenating it with a newline character.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.TryRemove``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0})">
            <summary>
            Try to remove. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="node"></param>
            <returns>removed something?</returns>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.GetBytesToWrite(NLog.LogEventInfo)">
            <summary>
            Gets the bytes to be written.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="T:NLog.Targets.NetworkTargetConnectionsOverflowAction">
            <summary>
            The action to be taken when there are more connections then the max.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetConnectionsOverflowAction.AllowNewConnnection">
            <summary>
            Just allow it.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetConnectionsOverflowAction.DiscardMessage">
            <summary>
            Discard the connection item.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetConnectionsOverflowAction.Block">
            <summary>
            Block until there's more room in the queue.
            </summary>
        </member>
        <member name="T:NLog.Targets.NetworkTargetOverflowAction">
            <summary>
            Action that should be taken if the message overflows.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetOverflowAction.Error">
            <summary>
            Report an error.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetOverflowAction.Split">
            <summary>
            Split the message into smaller pieces.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetOverflowAction.Discard">
            <summary>
            Discard the entire message.
            </summary>
        </member>
        <member name="T:NLog.Targets.NLogViewerTarget">
            <summary>
            Sends log messages to the remote instance of NLog Viewer. 
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/NLogViewer-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/NLogViewer/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/NLogViewer/Simple/Example.cs" />
            <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will crawl. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
            </example>
        </member>
        <member name="M:NLog.Targets.NLogViewerTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NLogViewerTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.NLogViewerTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NLogViewerTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeNLogData">
            <summary>
            Gets or sets a value indicating whether to include NLog-specific extensions to log4j schema.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.AppInfo">
            <summary>
            Gets or sets the AppInfo field. By default it's the friendly name of the current AppDomain.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeCallSite">
            <summary>
            Gets or sets a value indicating whether to include call site (class and method name) in the information sent over the network.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeSourceInfo">
            <summary>
            Gets or sets a value indicating whether to include source info (file name and line number) in the information sent over the network.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeMdc">
            <summary>
            Gets or sets a value indicating whether to include <see cref="T:NLog.MappedDiagnosticsContext"/> dictionary contents.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeNdc">
            <summary>
            Gets or sets a value indicating whether to include <see cref="T:NLog.NestedDiagnosticsContext"/> stack contents.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.NdcItemSeparator">
            <summary>
            Gets or sets the NDC item separator.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.Parameters">
            <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a named parameter.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.Renderer">
            <summary>
            Gets the layout renderer which produces Log4j-compatible XML events.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.Layout">
            <summary>
            Gets or sets the instance of <see cref="T:NLog.Layouts.Log4JXmlEventLayout"/> that is used to format log messages.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="T:NLog.Targets.NullTarget">
            <summary>
            Discards log messages. Used mainly for debugging and benchmarking.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Null-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Null/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Null/Simple/Example.cs" />
            </example>
        </member>
        <member name="P:NLog.Targets.NullTarget.FormatMessage">
            <summary>
            Gets or sets a value indicating whether to perform layout calculation.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="M:NLog.Targets.NullTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NullTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.NullTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NullTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name"></param>
        </member>
        <member name="M:NLog.Targets.NullTarget.Write(NLog.LogEventInfo)">
            <summary>
            Does nothing. Optionally it calculates the layout text but
            discards the results.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.OutputDebugStringTarget">
            <summary>
            Outputs log messages through the <c>OutputDebugString()</c> Win32 API.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/OutputDebugString-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/OutputDebugString/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/OutputDebugString/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.OutputDebugStringTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.OutputDebugStringTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.OutputDebugStringTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.OutputDebugStringTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="M:NLog.Targets.OutputDebugStringTarget.Write(NLog.LogEventInfo)">
            <summary>
            Outputs the rendered logging event through the <c>OutputDebugString()</c> Win32 API.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.PerformanceCounterTarget">
            <summary>
            Increments specified performance counter on each write.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/PerformanceCounter-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/PerfCounter/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/PerfCounter/Simple/Example.cs" />
            </example>
            <remarks>
            TODO:
            1. Unable to create a category allowing multiple counter instances (.Net 2.0 API only, probably)
            2. Is there any way of adding new counters without deleting the whole category?
            3. There should be some mechanism of resetting the counter (e.g every day starts from 0), or auto-switching to 
               another counter instance (with dynamic creation of new instance). This could be done with layouts. 
            </remarks>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.PerformanceCounterTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.PerformanceCounterTarget" /> class.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.AutoCreate">
            <summary>
            Gets or sets a value indicating whether performance counter should be automatically created.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.CategoryName">
            <summary>
            Gets or sets the name of the performance counter category.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.CounterName">
            <summary>
            Gets or sets the name of the performance counter.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.InstanceName">
            <summary>
            Gets or sets the performance counter instance name.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.CounterHelp">
            <summary>
            Gets or sets the counter help text.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.CounterType">
            <summary>
            Gets or sets the performance counter type.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.IncrementValue">
            <summary>
            The value by which to increment the counter.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.Write(NLog.LogEventInfo)">
            <summary>
            Increments the configured performance counter.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.EnsureInitialized">
            <summary>
            Ensures that the performance counter has been initialized.
            </summary>
            <returns>True if the performance counter is operational, false otherwise.</returns>
        </member>
        <member name="T:NLog.Targets.SmtpAuthenticationMode">
            <summary>
            SMTP authentication modes.
            </summary>
        </member>
        <member name="F:NLog.Targets.SmtpAuthenticationMode.None">
            <summary>
            No authentication.
            </summary>
        </member>
        <member name="F:NLog.Targets.SmtpAuthenticationMode.Basic">
            <summary>
            Basic - username and password.
            </summary>
        </member>
        <member name="F:NLog.Targets.SmtpAuthenticationMode.Ntlm">
            <summary>
            NTLM Authentication.
            </summary>
        </member>
        <member name="T:NLog.Targets.Target">
            <summary>
            Represents logging target.
            </summary>
        </member>
        <member name="P:NLog.Targets.Target.Name">
            <summary>
            Gets or sets the name of the target.
            </summary>
            <docgen category='General Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Target.SyncRoot">
            <summary>
            Gets the object which can be used to synchronize asynchronous operations that must rely on the .
            </summary>
        </member>
        <member name="P:NLog.Targets.Target.LoggingConfiguration">
            <summary>
            Gets the logging configuration this target is part of.
            </summary>
        </member>
        <member name="P:NLog.Targets.Target.IsInitialized">
            <summary>
            Gets a value indicating whether the target has been initialized.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.GetAllLayouts">
            <summary>
            Get all used layouts in this target.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.Target.NLog#Internal#ISupportsInitialize#Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.Targets.Target.NLog#Internal#ISupportsInitialize#Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.Dispose">
            <summary>
            Closes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.Flush(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)">
            <summary>
            Calls the <see cref="M:NLog.Layouts.Layout.Precalculate(NLog.LogEventInfo)"/> on each volatile layout
            used by this target.
            </summary>
            <param name="logEvent">
            The log event.
            </param>
        </member>
        <member name="M:NLog.Targets.Target.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NLog.Targets.Target.WriteAsyncLogEvent(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Writes the log to the target.
            </summary>
            <param name="logEvent">Log event to write.</param>
        </member>
        <member name="M:NLog.Targets.Target.WriteAsyncLogEvents(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes the array of log events.
            </summary>
            <param name="logEvents">The log events.</param>
        </member>
        <member name="M:NLog.Targets.Target.Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.Targets.Target.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:NLog.Targets.Target.InitializeTarget">
            <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages asynchronously (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Target.Write(NLog.LogEventInfo)">
            <summary>
            Writes logging event to the log target.
            classes.
            </summary>
            <param name="logEvent">
            Logging event to be written out.
            </param>
        </member>
        <member name="M:NLog.Targets.Target.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Writes log event to the log target. Must be overridden in inheriting
            classes.
            </summary>
            <param name="logEvent">Log event to be written out.</param>
        </member>
        <member name="M:NLog.Targets.Target.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
            <param name="logEvents">Logging events to be written out.</param>
        </member>
        <member name="M:NLog.Targets.Target.MergeEventProperties(NLog.LogEventInfo)">
            <summary>
            Merges (copies) the event context properties from any event info object stored in
            parameters of the given event info object.
            </summary>
            <param name="logEvent">The event info object to perform the merge to.</param>
        </member>
        <member name="T:NLog.Targets.TargetAttribute">
            <summary>
            Marks class as a logging target and assigns a name to it.
            </summary>
            <remarks>This attribute is not required when registering the target in the API.</remarks>
        </member>
        <member name="M:NLog.Targets.TargetAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetAttribute" /> class.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.TargetAttribute.IsWrapper">
            <summary>
            Gets or sets a value indicating whether to the target is a wrapper target (used to generate the target summary documentation page).
            </summary>
        </member>
        <member name="P:NLog.Targets.TargetAttribute.IsCompound">
            <summary>
            Gets or sets a value indicating whether to the target is a compound target (used to generate the target summary documentation page).
            </summary>
        </member>
        <member name="T:NLog.Targets.TargetWithLayout">
            <summary>
            Represents target that supports string formatting using layouts.
            </summary>
        </member>
        <member name="M:NLog.Targets.TargetWithLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetWithLayout" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="P:NLog.Targets.TargetWithLayout.Layout">
            <summary>
            Gets or sets the layout used to format log messages.
            </summary>
            <docgen category='Layout Options' order='1' />
        </member>
        <member name="T:NLog.Targets.TargetWithLayoutHeaderAndFooter">
            <summary>
            Represents target that supports string formatting using layouts.
            </summary>
        </member>
        <member name="M:NLog.Targets.TargetWithLayoutHeaderAndFooter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetWithLayoutHeaderAndFooter" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Layout">
            <summary>
            Gets or sets the text to be rendered.
            </summary>
            <docgen category='Layout Options' order='1' />
        </member>
        <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Footer">
            <summary>
            Gets or sets the footer.
            </summary>
            <docgen category='Layout Options' order='3' />
        </member>
        <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <docgen category='Layout Options' order='2' />
        </member>
        <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.LHF">
            <summary>
            Gets or sets the layout with header and footer.
            </summary>
            <value>The layout with header and footer.</value>
        </member>
        <member name="T:NLog.Targets.TraceTarget">
            <summary>
            Sends log messages through System.Diagnostics.Trace.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Trace-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Trace/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Trace/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.TraceTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TraceTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.TraceTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TraceTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="M:NLog.Targets.TraceTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the <see cref="T:System.Diagnostics.Trace"/> facility.
            If the log level is greater than or equal to <see cref="F:NLog.LogLevel.Error"/> it uses the
            <see cref="M:System.Diagnostics.Trace.Fail(System.String)"/> method, otherwise it uses
            <see cref="M:System.Diagnostics.Trace.Write(System.String)" /> method.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.WebServiceProtocol">
            <summary>
            Web service protocol.
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceProtocol.Soap11">
            <summary>
            Use SOAP 1.1 Protocol.
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceProtocol.Soap12">
            <summary>
            Use SOAP 1.2 Protocol.
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceProtocol.HttpPost">
            <summary>
            Use HTTP POST Protocol.
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceProtocol.HttpGet">
            <summary>
            Use HTTP GET Protocol.
            </summary>
        </member>
        <member name="T:NLog.Targets.WebServiceTarget">
            <summary>
            Calls the specified web service on each log message.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/WebService-target">Documentation on NLog Wiki</seealso>
            <remarks>
            The web service must implement a method that accepts a number of string parameters.
            </remarks>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/WebService/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/WebService/Simple/Example.cs" />
            <p>The example web service that works with this example is shown below</p>
            <code lang="C#" source="examples/targets/Configuration API/WebService/Simple/WebService1/Service1.asmx.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.WebServiceTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.WebServiceTarget" /> class.
            </summary>
            <param name="name">Name of the target</param>
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Url">
            <summary>
            Gets or sets the web service URL.
            </summary>
            <docgen category='Web Service Options' order='10' />
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.MethodName">
            <summary>
            Gets or sets the Web service method name. Only used with Soap.
            </summary>
            <docgen category='Web Service Options' order='10' />
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Namespace">
            <summary>
            Gets or sets the Web service namespace. Only used with Soap.
            </summary>
            <docgen category='Web Service Options' order='10' />
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Protocol">
            <summary>
            Gets or sets the protocol to be used when calling web service.
            </summary>
            <docgen category='Web Service Options' order='10' />
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.IncludeBOM">
            <summary>
            Should we include the BOM (Byte-order-mark) for UTF? Influences the <see cref="P:NLog.Targets.WebServiceTarget.Encoding"/> property.
            
            This will only work for UTF-8.
            </summary>
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
            <docgen category='Web Service Options' order='10' />
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.DoInvoke(System.Object[])">
            <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
            <param name="parameters">Method call parameters.</param>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.DoInvoke(System.Object[],NLog.Common.AsyncContinuation)">
            <summary>
            Invokes the web service method.
            </summary>
            <param name="parameters">Parameters to be passed.</param>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.BuildWebServiceUrl(System.Object[])">
            <summary>
            Builds the URL to use when calling the web service for a message, depending on the WebServiceProtocol.
            </summary>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.PrepareSoapRequestPost(System.Net.WebRequest,System.Object[],System.String,System.String)">
            <summary>
            Helper for creating soap POST-XML request
            </summary>
            <param name="request"></param>
            <param name="parameterValues"></param>
            <param name="soapEnvelopeNamespace"></param>
            <param name="soapname"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.WriteStreamAndFixPreamble(System.IO.Stream,System.IO.Stream,System.Nullable{System.Boolean},System.Text.Encoding)">
            <summary>
            Write from input to output. Fix the UTF-8 bom
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <param name="writeUtf8BOM"></param>
            <param name="encoding"></param>
        </member>
        <member name="T:NLog.Targets.Win32FileAttributes">
            <summary>
            Win32 file attributes.
            </summary>
            <remarks>
            For more information see <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/createfile.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/createfile.asp</a>.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.ReadOnly">
            <summary>
            Read-only file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Hidden">
            <summary>
            Hidden file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.System">
            <summary>
            System file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Archive">
            <summary>
            File should be archived.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Device">
            <summary>
            Device file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Normal">
            <summary>
            Normal file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Temporary">
            <summary>
            File is temporary (should be kept in cache and not 
            written to disk if possible).
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.SparseFile">
            <summary>
            Sparse file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.ReparsePoint">
            <summary>
            Reparse point.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Compressed">
            <summary>
            Compress file contents.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.NotContentIndexed">
            <summary>
            File should not be indexed by the content indexing service. 
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Encrypted">
            <summary>
            Encrypted file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.WriteThrough">
            <summary>
            The system writes through any intermediate cache and goes directly to disk. 
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.NoBuffering">
            <summary>
            The system opens a file with no system caching.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.DeleteOnClose">
            <summary>
            Delete file after it is closed.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.PosixSemantics">
            <summary>
            A file is accessed according to POSIX rules.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AsyncRequestQueue">
            <summary>
            Asynchronous request queue.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.#ctor(System.Int32,NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction)">
            <summary>
            Initializes a new instance of the AsyncRequestQueue class.
            </summary>
            <param name="requestLimit">Request limit.</param>
            <param name="overflowAction">The overflow action.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.RequestLimit">
            <summary>
            Gets or sets the request limit.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.OnOverflow">
            <summary>
            Gets or sets the action to be taken when there's no more room in
            the queue and another request is enqueued.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.RequestCount">
            <summary>
            Gets the number of requests currently in the queue.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.Enqueue(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Enqueues another item. If the queue is overflown the appropriate
            action is taken as specified by <see cref="P:NLog.Targets.Wrappers.AsyncRequestQueue.OnOverflow"/>.
            </summary>
            <param name="logEventInfo">The log event info.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.DequeueBatch(System.Int32)">
            <summary>
            Dequeues a maximum of <c>count</c> items from the queue
            and adds returns the list containing them.
            </summary>
            <param name="count">Maximum number of items to be dequeued.</param>
            <returns>The array of log events.</returns>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.Clear">
            <summary>
            Clears the queue.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction">
            <summary>
            The action to be taken when the queue overflows.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Grow">
            <summary>
            Grow the queue.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Discard">
            <summary>
            Discard the overflowing item.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Block">
            <summary>
            Block until there's more room in the queue.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.CompoundTargetBase">
            <summary>
            A base class for targets which wrap other (multiple) targets
            and provide various forms of target routing.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.CompoundTargetBase" /> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.CompoundTargetBase.Targets">
            <summary>
            Gets the collection of targets managed by this compound target.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.ToString">
            <summary>
            Returns the text representation of the object. Used for diagnostics.
            </summary>
            <returns>A string that describes the target.</returns>
        </member>
        <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.Write(NLog.LogEventInfo)">
            <summary>
            Writes logging event to the log target.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages for all wrapped targets.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.FallbackGroupTarget">
            <summary>
            Provides fallback-on-error.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/FallbackGroup-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes the messages to be written to server1, 
            and if it fails, messages go to server2.</p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/FallbackGroup/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/FallbackGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FallbackGroupTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.#ctor(System.String,NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FallbackGroupTarget"/> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FallbackGroupTarget" /> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.FallbackGroupTarget.ReturnToFirstOnSuccess">
            <summary>
            Gets or sets a value indicating whether to return to the first target after any successful write.
            </summary>
            <docgen category='Fallback Options' order='10' />
        </member>
        <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the log event to the sub-targets until one of them succeeds.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            The method remembers the last-known-successful target
            and starts the iteration from it.
            If <see cref="P:NLog.Targets.Wrappers.FallbackGroupTarget.ReturnToFirstOnSuccess"/> is set, the method
            resets the target to the first target
            stored in <see cref="N:NLog.Targets"/>.
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.FilteringTargetWrapper">
            <summary>
            Filters log entries based on a condition.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/FilteringWrapper-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes the messages not contains the string '1' to be ignored.</p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/FilteringWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/FilteringWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FilteringTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.#ctor(System.String,NLog.Targets.Target,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FilteringTargetWrapper" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.#ctor(NLog.Targets.Target,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FilteringTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringTargetWrapper.Condition">
            <summary>
            Gets or sets the condition expression. Log events who meet this condition will be forwarded 
            to the wrapped target.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Checks the condition against the passed log event.
            If the condition is met, the log event is forwarded to
            the wrapped target.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper">
            <summary>
            Impersonates another user for the duration of the write.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/ImpersonatingWrapper-target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.#ctor(System.String,NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.UserName">
            <summary>
            Gets or sets username to change context to.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Password">
            <summary>
            Gets or sets the user account password.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Domain">
            <summary>
            Gets or sets Windows domain name to change context to.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.LogOnType">
            <summary>
            Gets or sets the Logon Type.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.LogOnProvider">
            <summary>
            Gets or sets the type of the logon provider.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ImpersonationLevel">
            <summary>
            Gets or sets the required impersonation level.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.RevertToSelf">
            <summary>
            Gets or sets a value indicating whether to revert to the credentials of the process instead of impersonating another user.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.InitializeTarget">
            <summary>
            Initializes the impersonation context.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.CloseTarget">
            <summary>
            Closes the impersonation context.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Changes the security context, forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/>.Write()
            and switches the context back to original.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Changes the security context, forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/>.Write()
            and switches the context back to original.
            </summary>
            <param name="logEvents">Log events.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter">
            <summary>
            Helper class which reverts the given <see cref="T:System.Security.Principal.WindowsImpersonationContext"/> 
            to its original value as part of <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter.#ctor(System.Security.Principal.WindowsImpersonationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter" /> class.
            </summary>
            <param name="windowsImpersonationContext">The windows impersonation context.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter.Dispose">
            <summary>
            Reverts the impersonation context.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.LogOnProviderType">
            <summary>
            Logon provider.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.LogOnProviderType.Default">
            <summary>
            Use the standard logon provider for the system.
            </summary>
            <remarks>
            The default security provider is negotiate, unless you pass NULL for the domain name and the user name
            is not in UPN format. In this case, the default provider is NTLM.
            NOTE: Windows 2000/NT:   The default security provider is NTLM.
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper">
            <summary>
            Filters buffered log entries based on a set of conditions that are evaluated on a group of events.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/PostFilteringWrapper-target">Documentation on NLog Wiki</seealso>
            <remarks>
            PostFilteringWrapper must be used with some type of buffering target or wrapper, such as
            AsyncTargetWrapper, BufferingWrapper or ASPNetBufferingWrapper.
            </remarks>
            <example>
            <p>
            This example works like this. If there are no Warn,Error or Fatal messages in the buffer
            only Info messages are written to the file, but if there are any warnings or errors, 
            the output includes detailed trace (levels &gt;= Debug). You can plug in a different type
            of buffering wrapper (such as ASPNetBufferingWrapper) to achieve different
            functionality.
            </p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/PostFilteringWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/PostFilteringWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.#ctor(System.String,NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.PostFilteringTargetWrapper.DefaultFilter">
            <summary>
            Gets or sets the default filter to be applied when no specific rule matches.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.PostFilteringTargetWrapper.Rules">
            <summary>
            Gets the collection of filtering rules. The rules are processed top-down
            and the first rule that matches determines the filtering condition to
            be applied to log events.
            </summary>
            <docgen category='Filtering Rules' order='10' />
        </member>
        <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Evaluates all filtering rules to find the first one that matches.
            The matching rule determines the filtering condition to be applied
            to all items in a buffer. If no condition matches, default filter
            is applied to the array of log events.
            </summary>
            <param name="logEvents">Array of log events to be post-filtered.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.RandomizeGroupTarget">
            <summary>
            Sends log messages to a randomly selected target.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/RandomizeGroup-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes the messages to be written to either file1.txt or file2.txt 
            chosen randomly on a per-message basis.
            </p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/RandomizeGroup/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/RandomizeGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RandomizeGroupTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.#ctor(System.String,NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RandomizeGroupTarget" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RandomizeGroupTarget" /> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the log event to one of the sub-targets.
            The sub-target is randomly chosen.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.RepeatingTargetWrapper">
            <summary>
            Repeats each log event the specified number of times.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/RepeatingWrapper-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes each log message to be repeated 3 times.</p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/RepeatingWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/RepeatingWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RepeatingTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.#ctor(System.String,NLog.Targets.Target,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RepeatingTargetWrapper" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="repeatCount">The repeat count.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RepeatingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="repeatCount">The repeat count.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.RepeatingTargetWrapper.RepeatCount">
            <summary>
            Gets or sets the number of times to repeat each log message.
            </summary>
            <docgen category='Repeating Options' order='10' />
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the log message to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/> by calling the <see cref="M:NLog.Targets.Target.Write(NLog.LogEventInfo)"/> method <see cref="P:NLog.Targets.Wrappers.RepeatingTargetWrapper.RepeatCount"/> times.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.RetryingTargetWrapper">
            <summary>
            Retries in case of write error.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/RetryingWrapper-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes each write attempt to be repeated 3 times, 
            sleeping 1 second between attempts if first one fails.</p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/RetryingWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/RetryingWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RetryingTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.#ctor(System.String,NLog.Targets.Target,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RetryingTargetWrapper" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="retryCount">The retry count.</param>
            <param name="retryDelayMilliseconds">The retry delay milliseconds.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RetryingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="retryCount">The retry count.</param>
            <param name="retryDelayMilliseconds">The retry delay milliseconds.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.RetryingTargetWrapper.RetryCount">
            <summary>
            Gets or sets the number of retries that should be attempted on the wrapped target in case of a failure.
            </summary>
            <docgen category='Retrying Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.RetryingTargetWrapper.RetryDelayMilliseconds">
            <summary>
            Gets or sets the time to wait between retries in milliseconds.
            </summary>
            <docgen category='Retrying Options' order='10' />
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Writes the specified log event to the wrapped target, retrying and pausing in case of an error.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.RoundRobinGroupTarget">
            <summary>
            Distributes log events to targets in a round-robin fashion.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/RoundRobinGroup-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes the messages to be written to either file1.txt or file2.txt.
            Each odd message is written to file2.txt, each even message goes to file1.txt.
            </p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/RoundRobinGroup/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/RoundRobinGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RoundRobinGroupTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.#ctor(System.String,NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RoundRobinGroupTarget" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RoundRobinGroupTarget" /> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the write to one of the targets from
            the <see cref="N:NLog.Targets"/> collection.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            The writes are routed in a round-robin fashion.
            The first log event goes to the first target, the second
            one goes to the second target and so on looping to the
            first target when there are no more targets available.
            In general request N goes to Targets[N % Targets.Count].
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.SecurityImpersonationLevel">
            <summary>
            Impersonation level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Anonymous">
            <summary>
            Anonymous Level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Identification">
            <summary>
            Identification Level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Impersonation">
            <summary>
            Impersonation Level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Delegation">
            <summary>
            Delegation Level.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.SecurityLogOnType">
            <summary>
            Logon type.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Interactive">
            <summary>
            Interactive Logon.
            </summary>
            <remarks>
            This logon type is intended for users who will be interactively using the computer, such as a user being logged on  
            by a terminal server, remote shell, or similar process.
            This logon type has the additional expense of caching logon information for disconnected operations;
            therefore, it is inappropriate for some client/server applications,
            such as a mail server.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Network">
            <summary>
            Network Logon.
            </summary>
            <remarks>
            This logon type is intended for high performance servers to authenticate plaintext passwords.
            The LogonUser function does not cache credentials for this logon type.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Batch">
            <summary>
            Batch Logon.
            </summary>
            <remarks>
            This logon type is intended for batch servers, where processes may be executing on behalf of a user without
            their direct intervention. This type is also for higher performance servers that process many plaintext
            authentication attempts at a time, such as mail or Web servers.
            The LogonUser function does not cache credentials for this logon type.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Service">
            <summary>
            Logon as a Service.
            </summary>
            <remarks>
            Indicates a service-type logon. The account provided must have the service privilege enabled.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.NetworkClearText">
            <summary>
            Network Clear Text Logon.
            </summary>
            <remarks>
            This logon type preserves the name and password in the authentication package, which allows the server to make
            connections to other network servers while impersonating the client. A server can accept plaintext credentials
            from a client, call LogonUser, verify that the user can access the system across the network, and still
            communicate with other servers.
            NOTE: Windows NT:  This value is not supported.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.NewCredentials">
            <summary>
            New Network Credentials.
            </summary>
            <remarks>
            This logon type allows the caller to clone its current token and specify new credentials for outbound connections.
            The new logon session has the same local identifier but uses different credentials for other network connections.
            NOTE: This logon type is supported only by the LOGON32_PROVIDER_WINNT50 logon provider.
            NOTE: Windows NT:  This value is not supported.
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.SplitGroupTarget">
            <summary>
            Writes log events to all targets.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/SplitGroup-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes the messages to be written to both file1.txt or file2.txt 
            </p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/SplitGroup/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/SplitGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.SplitGroupTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.#ctor(System.String,NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.SplitGroupTarget" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.SplitGroupTarget" /> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the specified log event to all sub-targets.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
            <param name="logEvents">Logging events to be written out.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.AsyncTargetWrapper">
            <summary>
            Provides asynchronous, buffered execution of target writes.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/AsyncWrapper-target">Documentation on NLog Wiki</seealso>
            <remarks>
            <p>
            Asynchronous target wrapper allows the logger code to execute more quickly, by queueing
            messages and processing them in a separate thread. You should wrap targets
            that spend a non-trivial amount of time in their Write() method with asynchronous
            target to speed up logging.
            </p>
            <p>
            Because asynchronous logging is quite a common scenario, NLog supports a
            shorthand notation for wrapping all targets with AsyncWrapper. Just add async="true" to
            the &lt;targets/&gt; element in the configuration file.
            </p>
            <code lang="XML">
            <![CDATA[
            <targets async="true">
               ... your targets go here ...
            </targets>
            ]]></code>
            </remarks>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/AsyncWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/AsyncWrapper/Wrapping File/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor(System.String,NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="queueLimit">Maximum number of requests in the queue.</param>
            <param name="overflowAction">The action to be taken when the queue overflows.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.BatchSize">
            <summary>
            Gets or sets the number of log events that should be processed in a batch
            by the lazy writer thread.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.TimeToSleepBetweenBatches">
            <summary>
            Gets or sets the time in milliseconds to sleep between batches.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.OverflowAction">
            <summary>
            Gets or sets the action to be taken when the lazy writer thread request queue count
            exceeds the set limit.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.QueueLimit">
            <summary>
            Gets or sets the limit on the number of requests in the lazy writer thread request queue.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.RequestQueue">
            <summary>
            Gets the queue of lazy writer thread requests.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Waits for the lazy writer thread to finish writing messages.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.InitializeTarget">
            <summary>
            Initializes the target by starting the lazy writer timer.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.CloseTarget">
            <summary>
            Shuts down the lazy writer timer.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.StartLazyWriterTimer">
            <summary>
            Starts the lazy writer thread which periodically writes
            queued log messages.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.StopLazyWriterThread">
            <summary>
            Stops the lazy writer thread.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Adds the log event to asynchronous queue to be processed by
            the lazy writer thread.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            The <see cref="M:NLog.Targets.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)"/> is called
            to ensure that the log event can be processed in another thread.
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper">
            <summary>
            Causes a flush after each write on a wrapped target.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/AutoFlushWrapper-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/AutoFlushWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/AutoFlushWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.#ctor(System.String,NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="name">Name of the target</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/>.Write()
            and calls <see cref="M:NLog.Targets.Target.Flush(NLog.Common.AsyncContinuation)"/> on it.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.BufferingTargetWrapper">
            <summary>
            A target that buffers log events and sends them in batches to the wrapped target.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/BufferingWrapper-target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(System.String,NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="flushTimeout">The flush timeout.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.BufferSize">
            <summary>
            Gets or sets the number of log events to be buffered.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.FlushTimeout">
            <summary>
            Gets or sets the timeout (in milliseconds) after which the contents of buffer will be flushed 
            if there's no write in the specified period of time. Use -1 to disable timed flushes.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.SlidingTimeout">
            <summary>
            Gets or sets a value indicating whether to use sliding timeout.
            </summary>
            <remarks>
            This value determines how the inactivity period is determined. If sliding timeout is enabled,
            the inactivity timer is reset after each write, if it is disabled - inactivity timer will 
            count from the first event written to the buffer. 
            </remarks>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flushes pending events in the buffer (if any).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.CloseTarget">
            <summary>
            Closes the target by flushing pending events in the buffer (if any).
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Adds the specified log event to the buffer and flushes
            the buffer in case the buffer gets full.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.FilteringRule">
            <summary>
            Filtering rule for <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRule.#ctor">
            <summary>
            Initializes a new instance of the FilteringRule class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRule.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the FilteringRule class.
            </summary>
            <param name="whenExistsExpression">Condition to be tested against all events.</param>
            <param name="filterToApply">Filter to apply to all log events when the first condition matches any of them.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringRule.Exists">
            <summary>
            Gets or sets the condition to be tested.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringRule.Filter">
            <summary>
            Gets or sets the resulting filter to be applied when the condition matches.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="T:NLog.Targets.Wrappers.WrapperTargetBase">
            <summary>
            Base class for targets wrap other (single) targets.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget">
            <summary>
            Gets or sets the target that is wrapped by this target.
            </summary>
            <docgen category='General Options' order='11' />
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.ToString">
            <summary>
            Returns the text representation of the object. Used for diagnostics.
            </summary>
            <returns>A string that describes the target.</returns>
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.Write(NLog.LogEventInfo)">
            <summary>
            Writes logging event to the log target. Must be overridden in inheriting
            classes.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="T:NLog.Targets.DatabaseParameterInfo">
            <summary>
            Represents a parameter to a Database target.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseParameterInfo" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfo.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseParameterInfo" /> class.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterLayout">The parameter layout.</param>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Name">
            <summary>
            Gets or sets the database parameter name.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Layout">
            <summary>
            Gets or sets the layout that should be use to calcuate the value for the parameter.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Size">
            <summary>
            Gets or sets the database parameter size.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Precision">
            <summary>
            Gets or sets the database parameter precision.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Scale">
            <summary>
            Gets or sets the database parameter scale.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="T:NLog.Targets.MethodCallParameter">
            <summary>
            A parameter to MethodCall.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor(NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
            <param name="layout">The layout to use for parameter value.</param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="layout">The layout.</param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor(System.String,NLog.Layouts.Layout,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="layout">The layout.</param>
            <param name="type">The type of the parameter.</param>
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Name">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Type">
            <summary>
            Gets or sets the type of the parameter.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Layout">
            <summary>
            Gets or sets the layout that should be use to calculate the value for the parameter.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="T:NLog.Targets.MethodCallTargetBase">
            <summary>
            The base class for all targets which call methods (local or remote). 
            Manages parameters and type coercion.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallTargetBase" /> class.
            </summary>
        </member>
        <member name="P:NLog.Targets.MethodCallTargetBase.Parameters">
            <summary>
            Gets the array of parameters to be passed.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Prepares an array of parameters to be passed based on the logging event and calls DoInvoke().
            </summary>
            <param name="logEvent">
            The logging event.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.DoInvoke(System.Object[],NLog.Common.AsyncContinuation)">
            <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
            <param name="parameters">Method call parameters.</param>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.DoInvoke(System.Object[])">
            <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
            <param name="parameters">Method call parameters.</param>
        </member>
        <member name="T:NLog.Targets.NLogViewerParameterInfo">
            <summary>
            Represents a parameter to a NLogViewer target.
            </summary>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NLogViewerParameterInfo" /> class.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerParameterInfo.Name">
            <summary>
            Gets or sets viewer parameter name.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerParameterInfo.Layout">
            <summary>
            Gets or sets the layout that should be use to calcuate the value for the parameter.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="T:NLog.Time.AccurateLocalTimeSource">
            <summary>
            Current local time retrieved directly from DateTime.Now.
            </summary>
        </member>
        <member name="P:NLog.Time.AccurateLocalTimeSource.Time">
            <summary>
            Gets current local time directly from DateTime.Now.
            </summary>
        </member>
        <member name="M:NLog.Time.AccurateLocalTimeSource.FromSystemTime(System.DateTime)">
            <summary>
             Converts the specified system time to the same form as the time value originated from this time source.
            </summary>
            <param name="systemTime">The system originated time value to convert.</param>
            <returns>
             The value of <paramref name="systemTime"/> converted to local time.
            </returns>
        </member>
        <member name="T:NLog.Time.AccurateUtcTimeSource">
            <summary>
            Current UTC time retrieved directly from DateTime.UtcNow.
            </summary>
        </member>
        <member name="P:NLog.Time.AccurateUtcTimeSource.Time">
            <summary>
            Gets current UTC time directly from DateTime.UtcNow.
            </summary>
        </member>
        <member name="M:NLog.Time.AccurateUtcTimeSource.FromSystemTime(System.DateTime)">
            <summary>
             Converts the specified system time to the same form as the time value originated from this time source.
            </summary>
            <param name="systemTime">The system originated time value to convert.</param>
            <returns>
             The value of <paramref name="systemTime"/> converted to UTC time.
            </returns>
        </member>
        <member name="T:NLog.Time.CachedTimeSource">
            <summary>
            Fast time source that updates current time only once per tick (15.6 milliseconds).
            </summary>
        </member>
        <member name="P:NLog.Time.CachedTimeSource.FreshTime">
            <summary>
            Gets raw uncached time from derived time source.
            </summary>
        </member>
        <member name="P:NLog.Time.CachedTimeSource.Time">
            <summary>
            Gets current time cached for one system tick (15.6 milliseconds).
            </summary>
        </member>
        <member name="T:NLog.Time.FastLocalTimeSource">
            <summary>
            Fast local time source that is updated once per tick (15.6 milliseconds).
            </summary>
        </member>
        <member name="P:NLog.Time.FastLocalTimeSource.FreshTime">
            <summary>
            Gets uncached local time directly from DateTime.Now.
            </summary>
        </member>
        <member name="M:NLog.Time.FastLocalTimeSource.FromSystemTime(System.DateTime)">
            <summary>
             Converts the specified system time to the same form as the time value originated from this time source.
            </summary>
            <param name="systemTime">The system originated time value to convert.</param>
            <returns>
             The value of <paramref name="systemTime"/> converted to local time.
            </returns>
        </member>
        <member name="T:NLog.Time.FastUtcTimeSource">
            <summary>
            Fast UTC time source that is updated once per tick (15.6 milliseconds).
            </summary>
        </member>
        <member name="P:NLog.Time.FastUtcTimeSource.FreshTime">
            <summary>
            Gets uncached UTC time directly from DateTime.UtcNow.
            </summary>
        </member>
        <member name="M:NLog.Time.FastUtcTimeSource.FromSystemTime(System.DateTime)">
            <summary>
             Converts the specified system time to the same form as the time value originated from this time source.
            </summary>
            <param name="systemTime">The system originated time value to convert.</param>
            <returns>
             The value of <paramref name="systemTime"/> converted to UTC time.
            </returns>
        </member>
        <member name="T:NLog.Time.TimeSource">
            <summary>
            Defines source of current time.
            </summary>
        </member>
        <member name="P:NLog.Time.TimeSource.Time">
            <summary>
            Gets current time.
            </summary>
        </member>
        <member name="P:NLog.Time.TimeSource.Current">
            <summary>
            Gets or sets current global time source used in all log events.
            </summary>
            <remarks>
            Default time source is <see cref="T:NLog.Time.FastLocalTimeSource"/>.
            </remarks>
        </member>
        <member name="M:NLog.Time.TimeSource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NLog.Time.TimeSource.FromSystemTime(System.DateTime)">
            <summary>
             Converts the specified system time to the same form as the time value originated from this time source.
            </summary>
            <param name="systemTime">The system originated time value to convert.</param>
            <returns>
             The value of <paramref name="systemTime"/> converted to the same form 
             as time values originated from this source.
            </returns>
            <remarks>
             <para>
              There are situations when NLog have to compare the time originated from TimeSource 
              to the time originated externally in the system.
              To be able to provide meaningful result of such comparisons the system time must be expressed in 
              the same form as TimeSource time.
            </para>
            <para>
              Examples:
               - If the TimeSource provides time values of local time, it should also convert the provided 
                 <paramref name="systemTime"/> to the local time.
               - If the TimeSource shifts or skews its time values, it should also apply 
                 the same transform to the given <paramref name="systemTime"/>.
            </para>
            </remarks>
        </member>
        <member name="T:NLog.Time.TimeSourceAttribute">
            <summary>
            Marks class as a time source and assigns a name to it.
            </summary>
        </member>
        <member name="M:NLog.Time.TimeSourceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Time.TimeSourceAttribute" /> class.
            </summary>
            <param name="name">Name of the time source.</param>
        </member>
        <member name="T:NLog.GDC">
            <summary>
            Global Diagnostics Context - used for log4net compatibility.
            </summary>
        </member>
        <member name="M:NLog.GDC.Set(System.String,System.String)">
            <summary>
            Sets the Global Diagnostics Context item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.GDC.Get(System.String)">
            <summary>
            Gets the Global Diagnostics Context named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <see cref="F:System.String.Empty"/>.</returns>
            <remarks>If the value isn't a <see cref="T:System.String"/> already, this call locks the <see cref="T:NLog.LogFactory"/> for reading the <see cref="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo"/> needed for converting to <see cref="T:System.String"/>. </remarks>
        </member>
        <member name="M:NLog.GDC.Get(System.String,System.IFormatProvider)">
            <summary>
            Gets the Global Diagnostics Context item.
            </summary>
            <param name="item">Item name.</param>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> to use when converting the item's value to a string.</param>
            <returns>The value of <paramref name="item"/> as a string, if defined; otherwise <see cref="F:System.String.Empty"/>.</returns>
            <remarks>If <paramref name="formatProvider"/> is <c>null</c> and the value isn't a <see cref="T:System.String"/> already, this call locks the <see cref="T:NLog.LogFactory"/> for reading the <see cref="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo"/> needed for converting to <see cref="T:System.String"/>. </remarks>
        </member>
        <member name="M:NLog.GDC.GetObject(System.String)">
            <summary>
            Gets the Global Diagnostics Context named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:NLog.GDC.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in the Global Diagnostics Context.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread GDC.</returns>
        </member>
        <member name="M:NLog.GDC.Remove(System.String)">
            <summary>
            Removes the specified item from the Global Diagnostics Context.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.GDC.Clear">
            <summary>
            Clears the content of the GDC.
            </summary>
        </member>
        <member name="T:NLog.LogEventInfo">
            <summary>
            Represents the logging event.
            </summary>
        </member>
        <member name="F:NLog.LogEventInfo.ZeroDate">
            <summary>
            Gets the date of the first log event created.
            </summary>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
            <param name="level">Log level.</param>
            <param name="loggerName">Logger name.</param>
            <param name="message">Log message including parameter placeholders.</param>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
            <param name="level">Log level.</param>
            <param name="loggerName">Logger name.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">Log message including parameter placeholders.</param>
            <param name="parameters">Parameter array.</param>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[],System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
            <param name="level">Log level.</param>
            <param name="loggerName">Logger name.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">Log message including parameter placeholders.</param>
            <param name="parameters">Parameter array.</param>
            <param name="exception">Exception information.</param>
        </member>
        <member name="P:NLog.LogEventInfo.SequenceID">
            <summary>
            Gets the unique identifier of log event which is automatically generated
            and monotonously increasing.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.TimeStamp">
            <summary>
            Gets or sets the timestamp of the logging event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Level">
            <summary>
            Gets or sets the level of the logging event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.HasStackTrace">
            <summary>
            Gets a value indicating whether stack trace has been set for this event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.UserStackFrame">
            <summary>
            Gets the stack frame of the method that did the logging.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.UserStackFrameNumber">
            <summary>
            Gets the number index of the stack frame that represents the user
            code (not the NLog code).
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.StackTrace">
            <summary>
            Gets the entire stack trace.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Exception">
            <summary>
            Gets or sets the exception information.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.LoggerName">
            <summary>
            Gets or sets the logger name.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.LoggerShortName">
            <summary>
            Gets the logger short name.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Message">
            <summary>
            Gets or sets the log message including any parameter placeholders.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Parameters">
            <summary>
            Gets or sets the parameter values or null if no parameters have been specified.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.FormatProvider">
            <summary>
            Gets or sets the format provider that was provided while logging or <see langword="null" />
            when no formatProvider was specified.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.FormattedMessage">
            <summary>
            Gets the formatted message.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Properties">
            <summary>
            Gets the dictionary of per-event context properties.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Context">
            <summary>
            Gets the dictionary of per-event context properties.
            </summary>
        </member>
        <member name="M:NLog.LogEventInfo.CreateNullEvent">
            <summary>
            Creates the null event.
            </summary>
            <returns>Null log event.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.String)">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="message">The message.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.IFormatProvider,System.Object)">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="message">The message.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.String,System.Exception)">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.Exception,System.IFormatProvider,System.String)">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="exception">The exception.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="message">The message.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="exception">The exception.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.WithContinuation(NLog.Common.AsyncContinuation)">
            <summary>
            Creates <see cref="T:NLog.Common.AsyncLogEventInfo"/> from this <see cref="T:NLog.LogEventInfo"/> by attaching the specified asynchronous continuation.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <returns>Instance of <see cref="T:NLog.Common.AsyncLogEventInfo"/> with attached continuation.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.ToString">
            <summary>
            Returns a string representation of this log event.
            </summary>
            <returns>String representation of the log event.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.SetStackTrace(System.Diagnostics.StackTrace,System.Int32)">
            <summary>
            Sets the stack trace for the event info.
            </summary>
            <param name="stackTrace">The stack trace.</param>
            <param name="userStackFrame">Index of the first user stack frame within the stack trace.</param>
        </member>
        <member name="T:NLog.LogFactory">
            <summary>
            Creates and manages instances of <see cref="T:NLog.Logger" /> objects.
            </summary>
        </member>
        <member name="E:NLog.LogFactory.ConfigurationChanged">
            <summary>
            Occurs when logging <see cref="P:NLog.LogFactory.Configuration" /> changes.
            </summary>
        </member>
        <member name="E:NLog.LogFactory.ConfigurationReloaded">
            <summary>
            Occurs when logging <see cref="P:NLog.LogFactory.Configuration" /> gets reloaded.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory" /> class.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.#ctor(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory" /> class.
            </summary>
            <param name="config">The config.</param>
        </member>
        <member name="P:NLog.LogFactory.CurrentAppDomain">
            <summary>
            Gets the current <see cref="T:NLog.Internal.Fakeables.IAppDomain"/>.
            </summary>
        </member>
        <member name="P:NLog.LogFactory.ThrowExceptions">
            <summary>
            Gets or sets a value indicating whether exceptions should be thrown. See also <see cref="P:NLog.LogFactory.ThrowConfigExceptions"/>.
            </summary>
            <value>A value of <c>true</c> if exception should be thrown; otherwise, <c>false</c>.</value>
            <remarks>By default exceptions are not thrown under any circumstances.</remarks>
        </member>
        <member name="P:NLog.LogFactory.ThrowConfigExceptions">
            <summary>
            Gets or sets a value indicating whether <see cref="T:NLog.NLogConfigurationException"/> should be thrown.
            
            If <c>null</c> then <see cref="P:NLog.LogFactory.ThrowExceptions"/> is used.
            </summary>
            <value>A value of <c>true</c> if exception should be thrown; otherwise, <c>false</c>.</value>
            <remarks>
            This option is for backwards-compatiblity.
            By default exceptions are not thrown under any circumstances.
            
            </remarks>
        </member>
        <member name="P:NLog.LogFactory.Configuration">
            <summary>
            Gets or sets the current logging configuration. After setting this property all
            existing loggers will be re-configured, so that there is no need to call <see cref="M:NLog.LogFactory.ReconfigExistingLoggers" />
            manually.
            </summary>
        </member>
        <member name="P:NLog.LogFactory.GlobalThreshold">
            <summary>
            Gets or sets the global log threshold. Log events below this threshold are not logged.
            </summary>
        </member>
        <member name="P:NLog.LogFactory.DefaultCultureInfo">
            <summary>
            Gets the default culture info to use as <see cref="P:NLog.LogEventInfo.FormatProvider"/>.
            </summary>
            <value>
            Specific culture info or null to use <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>
            </value>
        </member>
        <member name="M:NLog.LogFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.CreateNullLogger">
            <summary>
            Creates a logger that discards all log messages.
            </summary>
            <returns>Null logger instance.</returns>
        </member>
        <member name="M:NLog.LogFactory.GetCurrentClassLogger">
            <summary>
            Gets the logger with the name of the current class. 
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogFactory.GetCurrentClassLogger``1">
            <summary>
            Gets the logger with the name of the current class. 
            </summary>
            <returns>The logger with type <typeparamref name="T"/>.</returns>
            <typeparam name="T">Type of the logger</typeparam>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogFactory.GetCurrentClassLogger(System.Type)">
            <summary>
            Gets a custom logger with the name of the current class. Use <paramref name="loggerType"/> to pass the type of the needed Logger.
            </summary>
            <param name="loggerType">The type of the logger to create. The type must inherit from <see cref="T:NLog.Logger"/></param>
            <returns>The logger of type <paramref name="loggerType"/>.</returns>
            <remarks>This is a slow-running method. Make sure you are not calling this method in a 
            loop.</remarks>
        </member>
        <member name="M:NLog.LogFactory.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument 
            are not guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogFactory.GetLogger``1(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <typeparam name="T">Type of the logger</typeparam>
            <returns>The logger reference with type <typeparamref name="T"/>. Multiple calls to <c>GetLogger</c> with the same argument 
            are not guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogFactory.GetLogger(System.String,System.Type)">
            <summary>
            Gets the specified named logger.  Use <paramref name="loggerType"/> to pass the type of the needed Logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <param name="loggerType">The type of the logger to create. The type must inherit from <see cref="T:NLog.Logger" />.</param>
            <returns>The logger of type <paramref name="loggerType"/>. Multiple calls to <c>GetLogger</c> with the 
            same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogFactory.ReconfigExistingLoggers">
            <summary>
            Loops through all loggers previously returned by GetLogger and recalculates their 
            target and filter list. Useful after modifying the configuration programmatically
            to ensure that all loggers have been properly configured.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.Flush">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
        </member>
        <member name="M:NLog.LogFactory.Flush(System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time 
            will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages 
            after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation,System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages 
            after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation,System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.DisableLogging">
            <summary>
            Decreases the log enable counter and if it reaches -1 the logs are disabled.
            </summary>
            <remarks>
            Logging is enabled if the number of <see cref="M:NLog.LogFactory.ResumeLogging"/> calls is greater than 
            or equal to <see cref="M:NLog.LogFactory.SuspendLogging"/> calls.
            </remarks>
            <returns>An object that implements IDisposable whose Dispose() method re-enables logging. 
            To be used with C# <c>using ()</c> statement.</returns>
        </member>
        <member name="M:NLog.LogFactory.EnableLogging">
            <summary>
            Increases the log enable counter and if it reaches 0 the logs are disabled.
            </summary>
            <remarks>
            Logging is enabled if the number of <see cref="M:NLog.LogFactory.ResumeLogging"/> calls is greater than 
            or equal to <see cref="M:NLog.LogFactory.SuspendLogging"/> calls.</remarks>
        </member>
        <member name="M:NLog.LogFactory.SuspendLogging">
            <summary>
            Decreases the log enable counter and if it reaches -1 the logs are disabled.
            </summary>
            <remarks>
            Logging is enabled if the number of <see cref="M:NLog.LogFactory.ResumeLogging"/> calls is greater than 
            or equal to <see cref="M:NLog.LogFactory.SuspendLogging"/> calls.
            </remarks>
            <returns>An object that implements IDisposable whose Dispose() method re-enables logging. 
            To be used with C# <c>using ()</c> statement.</returns>
        </member>
        <member name="M:NLog.LogFactory.ResumeLogging">
            <summary>
            Increases the log enable counter and if it reaches 0 the logs are disabled.
            </summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.ResumeLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.SuspendLogging"/> calls.</remarks>
        </member>
        <member name="M:NLog.LogFactory.IsLoggingEnabled">
            <summary>
            Returns <see langword="true" /> if logging is currently enabled.
            </summary>
            <returns>A value of <see langword="true" /> if logging is currently enabled, 
            <see langword="false"/> otherwise.</returns>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.ResumeLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.SuspendLogging"/> calls.</remarks>
        </member>
        <member name="M:NLog.LogFactory.OnConfigurationChanged(NLog.Config.LoggingConfigurationChangedEventArgs)">
            <summary>
            Invoke the Changed event; called whenever list changes
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:NLog.LogFactory.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>True</c> to release both managed and unmanaged resources;
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:NLog.LogFactory.IsDisposing">
            <summary>
            Currenty this logfactory is disposing?
            </summary>
        </member>
        <member name="T:NLog.LogFactory.LoggerCacheKey">
            <summary>
            Logger cache key.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.LoggerCacheKey.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NLog.LogFactory.LoggerCacheKey.Equals(System.Object)">
            <summary>
            Determines if two objects are equal in value.
            </summary>
            <param name="obj">Other object to compare to.</param>
            <returns>True if objects are equal, false otherwise.</returns>
        </member>
        <member name="M:NLog.LogFactory.LoggerCacheKey.Equals(NLog.LogFactory.LoggerCacheKey)">
            <summary>
            Determines if two objects of the same type are equal in value.
            </summary>
            <param name="key">Other object to compare to.</param>
            <returns>True if objects are equal, false otherwise.</returns>
        </member>
        <member name="T:NLog.LogFactory.LoggerCache">
            <summary>
            Logger cache.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.LoggerCache.InsertOrUpdate(NLog.LogFactory.LoggerCacheKey,NLog.Logger)">
            <summary>
            Inserts or updates. 
            </summary>
            <param name="cacheKey"></param>
            <param name="logger"></param>
        </member>
        <member name="T:NLog.LogFactory.LogEnabler">
            <summary>
            Enables logging in <see cref="M:System.IDisposable.Dispose"/> implementation.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.LogEnabler.#ctor(NLog.LogFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory.LogEnabler" /> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:NLog.LogFactory.LogEnabler.System#IDisposable#Dispose">
            <summary>
            Enables logging.
            </summary>
        </member>
        <member name="T:NLog.LoggerImpl">
            <summary>
            Implementation of logging engine.
            </summary>
        </member>
        <member name="M:NLog.LoggerImpl.FindCallingMethodOnStackTrace(System.Diagnostics.StackTrace,System.Type)">
            <summary>
             Finds first user stack frame in a stack trace
            </summary>
            <param name="stackTrace">The stack trace of the logging method invocation</param>
            <param name="loggerType">Type of the logger or logger wrapper. This is still Logger if it's a subclass of Logger.</param>
            <returns>Index of the first user stack frame or 0 if all stack frames are non-user</returns>
        </member>
        <member name="M:NLog.LoggerImpl.FindIndexOfCallingMethod(System.Collections.Generic.List{NLog.LoggerImpl.StackFrameWithIndex},System.Collections.Generic.List{NLog.LoggerImpl.StackFrameWithIndex})">
            <summary>
            Get the index which correspondens to the calling method.
            
            This is most of the time the first index after <paramref name="candidateStackFrames"/>.
            </summary>
            <param name="allStackFrames">all the frames of the stacktrace</param>
            <param name="candidateStackFrames">frames which all hiddenAssemblies are removed</param>
            <returns>index on stacktrace</returns>
        </member>
        <member name="M:NLog.LoggerImpl.SkipAssembly(System.Diagnostics.StackFrame)">
            <summary>
            Assembly to skip?
            </summary>
            <param name="frame">Find assembly via this frame. </param>
            <returns><c>true</c>, we should skip.</returns>
        </member>
        <member name="M:NLog.LoggerImpl.IsLoggerType(System.Diagnostics.StackFrame,System.Type)">
            <summary>
            Is this the type of the logger?
            </summary>
            <param name="frame">get type of this logger in this frame.</param>
            <param name="loggerType">Type of the logger.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.LoggerImpl.GetFilterResult(System.Collections.Generic.IList{NLog.Filters.Filter},NLog.LogEventInfo)">
            <summary>
            Gets the filter result.
            </summary>
            <param name="filterChain">The filter chain.</param>
            <param name="logEvent">The log event.</param>
            <returns>The result of the filter.</returns>
        </member>
        <member name="T:NLog.LoggerImpl.StackFrameWithIndex">
            <summary>
            Stackframe with correspending index on the stracktrace
            </summary>
        </member>
        <member name="P:NLog.LoggerImpl.StackFrameWithIndex.StackFrameIndex">
            <summary>
            Index of <see cref="P:NLog.LoggerImpl.StackFrameWithIndex.StackFrame"/> on the stack.
            </summary>
        </member>
        <member name="P:NLog.LoggerImpl.StackFrameWithIndex.StackFrame">
            <summary>
            A stackframe
            </summary>
        </member>
        <member name="M:NLog.LoggerImpl.StackFrameWithIndex.#ctor(System.Int32,System.Diagnostics.StackFrame)">
            <summary>
            New item
            </summary>
            <param name="stackFrameIndex">Index of <paramref name="stackFrame"/> on the stack.</param>
            <param name="stackFrame">A stackframe</param>
        </member>
        <member name="T:NLog.LogLevel">
            <summary>
            Defines available log levels.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Trace">
            <summary>
            Trace log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Debug">
            <summary>
            Debug log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Info">
            <summary>
            Info log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Warn">
            <summary>
            Warn log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Error">
            <summary>
            Error log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Fatal">
            <summary>
            Fatal log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Off">
            <summary>
            Off log level.
            </summary>
        </member>
        <member name="P:NLog.LogLevel.AllLevels">
            <summary>
            All log levels. (Trace, Debug, Info, Warn, Error, Fatal, Off)
            </summary>
        </member>
        <member name="P:NLog.LogLevel.AllLoggingLevels">
            <summary>
            All log levels that can be used to log events (excludes Off). (Trace, Debug, Info, Warn, Error, Fatal)
            </summary>
        </member>
        <member name="M:NLog.LogLevel.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:NLog.LogLevel"/>.
            </summary>
            <param name="name">The log level name.</param>
            <param name="ordinal">The log level ordinal number.</param>
        </member>
        <member name="P:NLog.LogLevel.Name">
            <summary>
            Gets the name of the log level.
            </summary>
        </member>
        <member name="P:NLog.LogLevel.Ordinal">
            <summary>
            Gets the ordinal of the log level.
            </summary>
        </member>
        <member name="M:NLog.LogLevel.op_Equality(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is equal to the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal == level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_Inequality(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is not equal to the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal != level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_GreaterThan(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is greater than the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal &gt; level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_GreaterThanOrEqual(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is greater than or equal to the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal &gt;= level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_LessThan(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is less than the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal &lt; level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_LessThanOrEqual(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is less than or equal to the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal &lt;= level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.FromOrdinal(System.Int32)">
            <summary>
            Gets the <see cref="T:NLog.LogLevel"/> that corresponds to the specified ordinal.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns>The <see cref="T:NLog.LogLevel"/> instance. For 0 it returns <see cref="F:NLog.LogLevel.Trace"/>, 1 gives <see cref="F:NLog.LogLevel.Debug"/> and so on.</returns>
        </member>
        <member name="M:NLog.LogLevel.FromString(System.String)">
            <summary>
            Returns the <see cref="T:NLog.LogLevel"/> that corresponds to the supplied <see langword="string" />.
            </summary>
            <param name="levelName">The textual representation of the log level.</param>
            <returns>The enumeration value.</returns>
        </member>
        <member name="M:NLog.LogLevel.ToString">
            <summary>
            Returns a string representation of the log level.
            </summary>
            <returns>Log level name.</returns>
        </member>
        <member name="M:NLog.LogLevel.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NLog.LogLevel.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>Value of <c>true</c> if the specified <see cref="T:System.Object"/> is equal to 
            this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.Equals(NLog.LogLevel)">
            <summary>
            Determines whether the specified <see cref="T:NLog.LogLevel"/> instance is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:NLog.LogLevel"/> to compare with this instance.</param>
            <returns>Value of <c>true</c> if the specified <see cref="T:NLog.LogLevel"/> is equal to 
            this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.CompareTo(System.Object)">
            <summary>
            Compares the level to the other <see cref="T:NLog.LogLevel"/> object.
            </summary>
            <param name="obj">
            The object object.
            </param>
            <returns>
            A value less than zero when this logger's <see cref="P:NLog.LogLevel.Ordinal"/> is 
            less than the other logger's ordinal, 0 when they are equal and 
            greater than zero when this ordinal is greater than the
            other ordinal.
            </returns>
        </member>
        <member name="T:NLog.LogManager">
            <summary>
            Creates and manages instances of <see cref="T:NLog.Logger" /> objects.
            </summary>
        </member>
        <member name="T:NLog.LogManager.GetCultureInfo">
            <summary>
            Delegate used to set/get the culture in use.
            </summary>
        </member>
        <member name="M:NLog.LogManager.#cctor">
            <summary>
            Initializes static members of the LogManager class.
            </summary>
        </member>
        <member name="M:NLog.LogManager.#ctor">
            <summary>
            Prevents a default instance of the LogManager class from being created.
            </summary>
        </member>
        <member name="P:NLog.LogManager.LogFactory">
            <summary>
            Gets the default <see cref="T:NLog.LogFactory" /> instance.
            </summary>
        </member>
        <member name="E:NLog.LogManager.ConfigurationChanged">
            <summary>
            Occurs when logging <see cref="P:NLog.LogManager.Configuration" /> changes.
            </summary>
        </member>
        <member name="E:NLog.LogManager.ConfigurationReloaded">
            <summary>
            Occurs when logging <see cref="P:NLog.LogManager.Configuration" /> gets reloaded.
            </summary>
        </member>
        <member name="P:NLog.LogManager.ThrowExceptions">
            <summary>
            Gets or sets a value indicating whether NLog should throw exceptions. 
            By default exceptions are not thrown under any circumstances.
            </summary>
        </member>
        <member name="P:NLog.LogManager.ThrowConfigExceptions">
            <summary>
            Gets or sets a value indicating whether <see cref="T:NLog.NLogConfigurationException"/> should be thrown.
            </summary>
            <value>A value of <c>true</c> if exception should be thrown; otherwise, <c>false</c>.</value>
            <remarks>
            This option is for backwards-compatiblity.
            By default exceptions are not thrown under any circumstances.
            
            </remarks>
        </member>
        <member name="P:NLog.LogManager.Configuration">
            <summary>
            Gets or sets the current logging configuration.
            <see cref="P:NLog.LogFactory.Configuration" />
            </summary>
        </member>
        <member name="P:NLog.LogManager.GlobalThreshold">
            <summary>
            Gets or sets the global log threshold. Log events below this threshold are not logged.
            </summary>
        </member>
        <member name="P:NLog.LogManager.DefaultCultureInfo">
            <summary>
            Gets or sets the default culture to use.
            </summary>
        </member>
        <member name="M:NLog.LogManager.GetCurrentClassLogger">
            <summary>
            Gets the logger with the name of the current class.  
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogManager.AddHiddenAssembly(System.Reflection.Assembly)">
            <summary>
            Adds the given assembly which will be skipped 
            when NLog is trying to find the calling method on stack trace.
            </summary>
            <param name="assembly">The assembly to skip.</param>
        </member>
        <member name="M:NLog.LogManager.GetCurrentClassLogger(System.Type)">
            <summary>
            Gets a custom logger with the name of the current class. Use <paramref name="loggerType"/> to pass the type of the needed Logger.
            </summary>
            <param name="loggerType">The logger class. The class must inherit from <see cref="T:NLog.Logger" />.</param>
            <returns>The logger of type <paramref name="loggerType"/>.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogManager.CreateNullLogger">
            <summary>
            Creates a logger that discards all log messages.
            </summary>
            <returns>Null logger which discards all log messages.</returns>
        </member>
        <member name="M:NLog.LogManager.ResetLogger">
            <summary>
            重置日志记录器，尝试从配置文件重新加载
            </summary>
        </member>
        <member name="M:NLog.LogManager.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogManager.GetLogger(System.String,System.Type)">
            <summary>
            Gets the specified named custom logger.  Use <paramref name="loggerType"/> to pass the type of the needed Logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <param name="loggerType">The logger class. The class must inherit from <see cref="T:NLog.Logger" />.</param>
            <returns>The logger of type <paramref name="loggerType"/>. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
            <remarks>The generic way for this method is <see cref="M:NLog.LogFactory`1.GetLogger(System.String)"/></remarks>
        </member>
        <member name="M:NLog.LogManager.ReconfigExistingLoggers">
            <summary>
            Loops through all loggers previously returned by GetLogger.
            and recalculates their target and filter list. Useful after modifying the configuration programmatically
            to ensure that all loggers have been properly configured.
            </summary>
        </member>
        <member name="M:NLog.LogManager.Flush">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
        </member>
        <member name="M:NLog.LogManager.Flush(System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation,System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation,System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.DisableLogging">
            <summary>
            Decreases the log enable counter and if it reaches -1 the logs are disabled.
            </summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging"/> calls is greater 
                than or equal to <see cref="M:NLog.LogManager.DisableLogging"/> calls.</remarks>
            <returns>An object that implements IDisposable whose Dispose() method reenables logging. 
                To be used with C# <c>using ()</c> statement.</returns>
        </member>
        <member name="M:NLog.LogManager.EnableLogging">
            <summary>
            Increases the log enable counter and if it reaches 0 the logs are disabled.
            </summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging"/> calls is greater 
                than or equal to <see cref="M:NLog.LogManager.DisableLogging"/> calls.</remarks>
        </member>
        <member name="M:NLog.LogManager.IsLoggingEnabled">
            <summary>
            Checks if logging is currently enabled.
            </summary>
            <returns><see langword="true" /> if logging is currently enabled, <see langword="false"/> 
                otherwise.</returns>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging"/> calls is greater 
                than or equal to <see cref="M:NLog.LogManager.DisableLogging"/> calls.</remarks>
        </member>
        <member name="M:NLog.LogManager.Shutdown">
            <summary>
            Dispose all targets, and shutdown logging.
            </summary>
        </member>
        <member name="M:NLog.LogManager.GetClassFullName">
            <summary>
            Gets the fully qualified name of the class invoking the LogManager, including the 
            namespace but not the assembly.    
            </summary>
        </member>
        <member name="T:NLog.MDC">
            <summary>
            Mapped Diagnostics Context - used for log4net compatibility.
            </summary>
        </member>
        <member name="M:NLog.MDC.Set(System.String,System.String)">
            <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.MDC.Get(System.String)">
            <summary>
            Gets the current thread MDC named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <see cref="F:System.String.Empty"/>.</returns>
            <remarks>If the value isn't a <see cref="T:System.String"/> already, this call locks the <see cref="T:NLog.LogFactory"/> for reading the <see cref="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo"/> needed for converting to <see cref="T:System.String"/>. </remarks>
        </member>
        <member name="M:NLog.MDC.GetObject(System.String)">
            <summary>
            Gets the current thread MDC named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:NLog.MDC.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in current thread MDC.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread MDC.</returns>
        </member>
        <member name="M:NLog.MDC.Remove(System.String)">
            <summary>
            Removes the specified item from current thread MDC.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.MDC.Clear">
            <summary>
            Clears the content of current thread MDC.
            </summary>
        </member>
        <member name="T:NLog.NDC">
            <summary>
            Nested Diagnostics Context - for log4net compatibility.
            </summary>
        </member>
        <member name="P:NLog.NDC.TopMessage">
            <summary>
            Gets the top NDC message but doesn't remove it.
            </summary>
            <returns>The top message. .</returns>
        </member>
        <member name="P:NLog.NDC.TopObject">
            <summary>
            Gets the top NDC object but doesn't remove it.
            </summary>
            <returns>The object from the top of the NDC stack, if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:NLog.NDC.Push(System.String)">
            <summary>
            Pushes the specified text on current thread NDC.
            </summary>
            <param name="text">The text to be pushed.</param>
            <returns>An instance of the object that implements IDisposable that returns the stack to the previous level when IDisposable.Dispose() is called. To be used with C# using() statement.</returns>
        </member>
        <member name="M:NLog.NDC.Pop">
            <summary>
            Pops the top message off the NDC stack.
            </summary>
            <returns>The top message which is no longer on the stack.</returns>
        </member>
        <member name="M:NLog.NDC.PopObject">
            <summary>
            Pops the top object off the NDC stack. The object is removed from the stack.
            </summary>
            <returns>The top object from the NDC stack, if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:NLog.NDC.Clear">
            <summary>
            Clears current thread NDC stack.
            </summary>
        </member>
        <member name="M:NLog.NDC.GetAllMessages">
            <summary>
            Gets all messages on the stack.
            </summary>
            <returns>Array of strings on the stack.</returns>
        </member>
        <member name="M:NLog.NDC.GetAllObjects">
            <summary>
            Gets all objects on the NDC stack. The objects are not removed from the stack.
            </summary>
            <returns>Array of objects on the stack.</returns>
        </member>
        <member name="T:___Helper">
            <summary>
            帮助类
            </summary>
        </member>
        <member name="M:___Helper.fm(System.String,System.Object[])">
            <summary>
            格式化指定字符串，等同与string.Format()
            </summary>
        </member>
        <member name="M:___Helper.ToText(System.TimeSpan)">
            <summary>
            返回TimeSpan的文本描述形式
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.ToText(System.TimeSpan,System.Boolean)">
            <summary>
            返回TimeSpan的文本描述形式
            </summary>
            <param name="span"></param>
            <param name="fullText">true=显示完整时间信息</param>
            <returns></returns>
        </member>
        <member name="M:___Helper.Split(System.String,System.String)">
            <summary>
            将给定的字符串用另一个字符串分割
            </summary>
            <param name="target"></param>
            <param name="splitor"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.CreateDirectory(System.String)">
            <summary>
            创建路径，成功创建返回null，失败则返回错误原因。
            </summary>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:___Helper.Substring(System.String,System.String,System.String,System.Boolean)">
            <summary>
            从给定的target中截取symbolStart和symbolEnd之间的字符串
            </summary>
            <param name="target"></param>
            <param name="symbolStart"></param>
            <param name="symbolEnd"></param>
            <param name="containsSymbol">true=截取的结果应该包含symbolStart和symbolEnd</param>
            <returns></returns>
        </member>
        <member name="M:___Helper.Substring(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            从给定的target中截取symbolStart和symbolEnd之间的字符串
            </summary>
            <param name="target"></param>
            <param name="symbolStart"></param>
            <param name="symbolEnd"></param>
            <param name="containsSymbol">true=截取的结果应该包含symbolStart和symbolEnd</param>
            <returns></returns>
        </member>
        <member name="M:___Helper.Substring(System.String,System.String,System.Boolean)">
            <summary>
            从给定的target中截取一个字符串
            </summary>
            <param name="target"></param>
            <param name="symbolStart"></param>
            <param name="symbolEnd"></param>
            <param name="containsSymbol">true=截取的结果应该包含symbolStart和symbolEnd</param>
            <returns></returns>
        </member>
        <member name="M:___Helper.Substring(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            从给定的target中截取一个字符串
            </summary>
            <param name="target"></param>
            <param name="symbolStart"></param>
            <param name="symbolEnd"></param>
            <param name="containsSymbol">true=截取的结果应该包含symbolStart和symbolEnd</param>
            <returns></returns>
        </member>
        <member name="M:___Helper.Substring(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            从给定的target中截取一个字符串
            </summary>
            <param name="target"></param>
            <param name="symbolStart"></param>
            <param name="symbolEnd"></param>
            <param name="containsSymbol">true=截取的结果应该包含symbolStart和symbolEnd</param>
            <returns></returns>
        </member>
        <member name="M:___Helper.Count(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.Substrings(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            从给定的target中截取symbolStart和symbolEnd之间的字符串
            </summary>
            <param name="target"></param>
            <param name="symbolStart"></param>
            <param name="symbolEnd"></param>
            <param name="containsSymbol">true=截取的结果应该包含symbolStart和symbolEnd</param>
            <returns></returns>
        </member>
        <member name="M:___Helper.Substrings(System.String,System.String,System.String,System.Boolean)">
            <summary>
            从给定的target中截取symbolStart和symbolEnd之间的字符串
            </summary>
            <param name="target"></param>
            <param name="symbolStart"></param>
            <param name="symbolEnd"></param>
            <param name="containsSymbol">true=截取的结果应该包含symbolStart和symbolEnd</param>
            <returns></returns>
        </member>
        <member name="M:___Helper.TrimHMS(System.DateTime)">
            <summary>
            剔除给定时间的小时，分钟，秒参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:___Helper.GetTimestamp(System.DateTime)">
            <summary>
            返回js脚本中调用getTime时返回的数字
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.GetTimestamp">
            <summary>
            返回js脚本中调用getTime时返回的数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:___Helper.ToTimestampTime(System.Int64)">
            <summary>
            返回js脚本中调用getTime时返回的数字
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.ToTimestampTime(System.Int32)">
            <summary>
            返回js脚本中调用getTime时返回的数字
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.NowDistance(System.DateTime,TimeDistanceType)">
            <summary>
            根据间隔类型 disType 不同，返回与当前时间的间隔值
            </summary>
            <param name="date">时间参数</param>
            <param name="disType">返回间隔类型</param>
            <returns></returns>
        </member>
        <member name="M:___Helper.TimeDistance(System.DateTime,System.DateTime,TimeDistanceType)">
            <summary>
            根据间隔类型 disType 不同，返回 (date - time) 的间隔值
            </summary>
            <param name="date"></param>
            <param name="time"></param>
            <param name="disType">返回间隔类型</param>
            <returns></returns>
        </member>
        <member name="M:___Helper.EncryptTurn(System.Byte[],System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            加密和解密转换
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <param name="key"></param>
            <param name="M"></param>
            <param name="A"></param>
            <param name="C"></param>
        </member>
        <member name="M:___Helper.Random(System.Int32,System.Int32,System.Int32)">
            <summary>
            返回一个随机数
            </summary>
            <param name="num"></param>
            <param name="min">随机数最小值</param>
            <param name="max">随机数最大值，如果被设定为int.MinValue则最大值默认为num</param>
            <returns></returns>
        </member>
        <member name="M:___Helper.Next(System.Int32,System.Int32,System.Int32)">
            <summary>
            返回一个随机数
            </summary>
            <param name="num"></param>
            <param name="min">随机数最小值</param>
            <param name="max">随机数最大值，如果被设定为int.MinValue则最大值默认为num</param>
            <returns></returns>
        </member>
        <member name="M:___Helper.Next(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            返回一个随机数
            </summary>
            <param name="num"></param>
            <param name="min">随机数最小值</param>
            <param name="max">随机数最大值，如果被设定为int.MinValue则最大值默认为num</param>
            <returns></returns>
        </member>
        <member name="M:___Helper.ToBcdString(System.Byte[],System.String)">
            <summary>
            返回给定字节数组的BCD字符串
            </summary>
            <param name="bytes"></param>
            <param name="split"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.ToBcdString(System.Byte[])">
            <summary>
            返回给定字节数组的BCD字符串
            </summary>
            <param name="bytes"></param>
            <param name="split"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.ToCharString(System.Byte[])">
            <summary>
            返回给定字节数组的字符串
            </summary>
            <param name="bytes"></param>
            <param name="split"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.ToCharString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            返回给定字节数组的字符串
            </summary>
            <param name="bytes"></param>
            <param name="split"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.ToBcdString(System.Byte[],System.String,System.Int32,System.Int32)">
            <summary>
            返回给定字节数组的BCD字符串
            </summary>
            <param name="bytes"></param>
            <param name="split"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.IsEmpty(System.String)">
            <summary>
            如果给定的字符串是null或者长度为0的字符串，则返回true
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.IsWhite(System.String)">
            <summary>
            如果给定的字符串是null或者空格的字符串，则返回true
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.WriteToFile(System.Drawing.Image,System.String,NRails.Util.ImageFormats)">
            <summary>
            保存到文件
            </summary>
            <param name="img"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:___Helper.WriteToFile(System.Drawing.Image,System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="img"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:___Helper.GetPath(System.String,System.String[])">
            <summary>
            取得当前应用程序目录下的子目录
            </summary>
            <param name="path"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.WriteToFile(System.Byte[],System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            将给定的数据存储到文件中
            </summary>
            <param name="bytes">需要存储的数据</param>
            <param name="fileName">写入的文件名</param>
            <param name="offset"></param>
            <param name="len"></param>
            <param name="backup">true=保留一份原有文件的副本作为备份</param>
        </member>
        <member name="M:___Helper.WriteToFile(System.Byte[],System.String,System.Boolean)">
            <summary>
            将给定的数据存储到文件中
            </summary>
            <param name="bytes">需要存储的数据</param>
            <param name="fileName">写入的文件名</param>
            <param name="offset"></param>
            <param name="len"></param>
            <param name="backup">true=将数据备份到ApplicationData目录中</param>
        </member>
        <member name="M:___Helper.SaveToFile(System.Byte[],System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            将给定的数据存储到文件中
            </summary>
            <param name="bytes">需要存储的数据</param>
            <param name="fileName">写入的文件名</param>
            <param name="offset"></param>
            <param name="len"></param>
            <param name="backup">true=将数据备份到ApplicationData目录中</param>
        </member>
        <member name="M:___Helper.SaveToFile(System.Byte[],System.String,System.Boolean)">
            <summary>
            将给定的数据存储到文件中
            </summary>
            <param name="bytes">需要存储的数据</param>
            <param name="fileName">写入的文件名</param>
            <param name="offset"></param>
            <param name="len"></param>
            <param name="backup">true=将数据备份到ApplicationData目录中</param>
        </member>
        <member name="M:___Helper.ReadBytes(System.String)">
            <summary>
            从给定的文件中读取数据
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.Speak(System.String,System.Boolean)">
            <summary>
            通过语音朗读给定的文本
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.SaveToFile(System.Object,System.String,System.Boolean,System.Int32)">
            <summary>
            以延迟的方式将一个对象序列化后写入到文件中，对于同一个文件存储位置重复挂起写入的操作将被取消
            </summary>
            <param name="obj">需要写入的对象</param>
            <param name="fileName">目标文件名</param>
            <param name="backup">true=备份到系统目录下</param>
        </member>
        <member name="M:___Helper.SaveToFile(System.Object,System.String,System.Boolean)">
            <summary>
            将一个对象序列化后写入到文件中
            </summary>
            <param name="obj">需要写入的对象</param>
            <param name="fileName">目标文件名</param>
            <param name="backup">true=备份到系统目录下</param>
        </member>
        <member name="M:___Helper.SaveToFile``1(``0,System.String,System.Boolean)">
            <summary>
            将一个对象序列化后写入到文件中
            </summary>
            <param name="obj">需要写入的对象</param>
            <param name="fileName">目标文件名</param>
            <param name="backup">true=备份到系统目录下</param>
        </member>
        <member name="M:___Helper.ReadFromFile(System.String)">
            <summary>
            从文件中读取用WriteObject方法写入的对象,如果找不到文件则返回空
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:___Helper.ReadFromFile``1(System.String)">
            <summary>
            从文件中读取用WriteObject方法写入的对象,如果找不到文件则返回空
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:TimeDistanceType">
            <summary>
            两时间参数相减后，返回的 Total 类型
            </summary>
        </member>
        <member name="F:TimeDistanceType.Days">
            <summary>
            天:TotalDays
            </summary>
        </member>
        <member name="F:TimeDistanceType.Hours">
            <summary>
            时:TotalHours
            </summary>
        </member>
        <member name="F:TimeDistanceType.Minutes">
            <summary>
            分:TotalMinutes
            </summary>
        </member>
        <member name="F:TimeDistanceType.Seconds">
            <summary>
            秒:TotalSeconds
            </summary>
        </member>
        <member name="F:TimeDistanceType.Milliseconds">
            <summary>
            毫秒:TotalMilliseconds
            </summary>
        </member>
        <member name="T:System.Collections.Generic.ListHelper">
            <summary>
            列表操作扩展方法
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListHelper.AddExceptNull``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            为列表添加新项, 不处理为Null值
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListHelper.AddRangeExceptNull``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            列列表添加多荐, 不处理为Null值
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListHelper.RemoveLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            移除列表的最后一项
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListHelper.RemoveExtis``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            从当前集合中移除另一集合中已存在的项, 对原集合不做改变
            </summary>
        </member>
        <member name="T:System.Physical.Adiencer">
            <summary>
            趋近器
            </summary>
        </member>
        <member name="F:System.Physical.ZoomMode.TenPercentZoom">
            <summary>
            以每次%15的比例进行变换
            </summary>
        </member>
        <member name="M:System.Physical.ZoomMode.Zoom(System.Int32,System.Double,System.Double)">
            <summary>
            变换方法，返回变换的差值（即本次变换要变换多少量）
            </summary>
            <param name="identity"></param>
            <param name="cur"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:System.ReflectHelper">
            <summary>
            反射操作辅助类
            </summary>
        </member>
        <member name="M:System.ReflectHelper.GetRealType(System.Object)">
            <summary>
            获取对象的真实类型, 如在遇到代理对象时, 可获取被代理类的类型
            </summary>
        </member>
        <member name="M:System.ReflectHelper.Invoke(System.Object,System.String,System.Object[])">
            <summary>
            动态调用对象的方法 
            </summary>
        </member>
        <member name="M:System.ReflectHelper.StaticMemberValue(System.Type,System.String)">
            <summary>
            获取静态成员值
            </summary>
        </member>
        <member name="M:System.ReflectHelper.CreatePropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            根据Lamba表达式返回字段全名
            </summary>
        </member>
        <member name="M:System.ReflectHelper.CreatePropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            根据Lamba表达式返回字段全名
            </summary>
        </member>
        <member name="M:System.ReflectHelper.GetMemberRealType(System.Reflection.MemberInfo)">
            <summary>
            获取给定成员的数据类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ReflectHelper.GetEnumMappedMethod(System.Type,System.Type,System.Type[])">
            <summary>
            获取给定枚举类型所对应的函数
            </summary>
        </member>
        <member name="M:System.ReflectHelper.GetEnumMappedMethod``1(System.Type,System.Type[])">
            <summary>
            获取给定枚举类型所对应的函数
            </summary>
        </member>
        <member name="T:Zhucai.LambdaParser.CodeParser">
            <summary>
            解析代码
            </summary>
        </member>
        <member name="P:Zhucai.LambdaParser.CodeParser.DefineString">
            <summary>
            分析".."或@".."所定义的字符串
            </summary>
        </member>
        <member name="M:Zhucai.LambdaParser.CodeParser.ReadString">
            <summary>
            往下读取字符串。(此方法是Read()方法的封装)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.CodeParser.ReadString(System.Boolean)">
            <summary>
            往下读取字符串。(此方法是Read()方法的封装)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.CodeParser.PeekString">
            <summary>
            获取下一个字符串而不改变当前位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.CodeParser.Read(System.Boolean,System.Boolean)">
            <summary>
            往下读取。通过Index和Length指示当前位置。
            </summary>
            <param name="isBuildDefineString">遇到代码中的字符串常量时是否将字符串常量解析到DefineString成员。</param>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.CodeParser.GetStringIndex(System.String,System.Int32)">
            <summary>
            在this.Content获取指定字符串，返回-1表示没找到
            </summary>
        </member>
        <member name="M:Zhucai.LambdaParser.CodeParser.TryGetNextChar(System.Boolean,System.Char@)">
            <summary>
            尝试获取下个字符，若已到结尾没有下个字符则返回false
            </summary>
        </member>
        <member name="M:Zhucai.LambdaParser.CodeParser.SavePosition">
            <summary>
            保存当前位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.CodeParser.RevertPosition(Zhucai.LambdaParser.CodeParserPosition)">
            <summary>
            恢复指定的位置
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Zhucai.LambdaParser.CodeParser.RevertPosition">
            <summary>
            恢复到初始状态
            </summary>
        </member>
        <member name="T:Zhucai.LambdaParser.CodeParserPosition">
            <summary>
            CodeParser保存的位置点，用来还原
            </summary>
        </member>
        <member name="T:Zhucai.LambdaParser.ExpressionParserCore`1">
            <summary>
            Lambda表达式的解析器核心类
            </summary>
            <typeparam name="TDelegate"></typeparam>
        </member>
        <member name="F:Zhucai.LambdaParser.ExpressionParserCore`1._params">
            <summary>
            存放参数
            </summary>
        </member>
        <member name="F:Zhucai.LambdaParser.ExpressionParserCore`1._operatorPriorityLevel">
            <summary>
            存放操作符的优先级
            </summary>
        </member>
        <member name="F:Zhucai.LambdaParser.ExpressionParserCore`1._numberTypeLevel">
            <summary>
            存放数字类型的隐式转换级别
            </summary>
        </member>
        <member name="P:Zhucai.LambdaParser.ExpressionParserCore`1.Namespaces">
            <summary>
            引入的命名空间集。
            </summary>
        </member>
        <member name="M:Zhucai.LambdaParser.ExpressionParserCore`1.#ctor(System.Type,System.String,System.Type,System.Type[],System.Boolean)">
            <summary>
            构造Lambda表达式的解析器
            </summary>
            <param name="code">lambda表达式代码。如：m=>m.ToString()</param>
        </member>
        <member name="M:Zhucai.LambdaParser.ExpressionParserCore`1.ToLambdaExpression">
            <summary>
            转换成LambdaExpression
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.ExpressionParserCore`1.ReadExpression(System.Int32,System.String,System.Boolean@)">
            <summary>
            读取Expression。可能会引发递归。
            </summary>
            <param name="priorityLevel">当前操作的优先级</param>
            <param name="wrapStart">括号开始符(如果有)</param>
            <param name="isClosedWrap">是否遇到符号结束符</param>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.ExpressionParserCore`1.ParseNumber(System.String)">
            <summary>
            解析数字
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.ExpressionParserCore`1.AdjustNumberType(System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@)">
            <summary>
            调整数值运算两边的类型
            (如一个int和一个double，则将int转换成double)
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Zhucai.LambdaParser.ExpressionParserCore`1.ReadParams(System.String,System.Boolean)">
            <summary>
            读取方法调用中的参数
            </summary>
            <param name="priorityLevel">当前操作的优先级</param>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.ExpressionParserCore`1.GetBracketString(System.Boolean)">
            <summary>
            读取圆括号中的字符串
            </summary>
            <param name="hasReadPre">是否已经读取了前置括号</param>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.ExpressionParserCore`1.TryGetNextPriorityLevel">
            <summary>
            获取下一个操作的优先级。-1表示没有操作。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.ExpressionParserCore`1.GetOperatorLevel(System.String,System.Boolean)">
            <summary>
            获取操作符的优先级，越大优先级越高
            </summary>
            <param name="operatorSymbol">操作符</param>
            <param name="isBefore">是否前置操作符(一元)</param>
            <returns>优先级</returns>
        </member>
        <member name="M:Zhucai.LambdaParser.ExpressionParserCore`1.ReadType(System.String)">
            <summary>
            读类型
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.ExpressionParserCore`1.GetType(System.String)">
            <summary>
            根据类型名称获取类型对象
            </summary>
            <param name="typeName">类型名称。可以是简写：如int、string</param>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.ExpressionParserCore`1.GetTypeCore(System.String)">
            <summary>
            根据类型名称获取类型的对象
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.ExpressionParserManager.ParseDelegate``1(System.String,System.Boolean)">
            <summary>
            将字符串形式的Lambda表达式解析，返回一个强类型委托。
            没有参数的情况下，可以省略()=>，但不建议省略。
            </summary>
            <typeparam name="TDelegate">委托类型</typeparam>
            <param name="code">Lambda表达式代码。</param>
            <param name="cache">是否缓存</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Zhucai.LambdaParser.ExpressionParserManager.ParseDelegate``1(System.String)" -->
        <member name="T:Zhucai.LambdaParser.ExpressionParserManager.CacheKey">
            <summary>
            用来缓存时的Key
            </summary>
        </member>
        <member name="M:Zhucai.LambdaParser.ObjectDynamicExtension.ObjectDynamicExtension.E``1(System.Object,System.String,System.String[],System.Object[])">
            <summary>
            以instance为上下文，执行代码
            </summary>
            <typeparam name="T">返回的结果类型</typeparam>
            <param name="instance">执行代码以此对象为上下文(在code中用$0表示，$0可省略)</param>
            <param name="code">被执行代码</param>
            <param name="namespaces">引入命名空间</param>
            <param name="objects">参数对象(在code中用$1表示第一个对象；$2表示第二个对象....)</param>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.ObjectDynamicExtension.ObjectDynamicExtension.E``1(System.Object,System.String,System.Object[])">
            <summary>
            以instance为上下文，执行代码
            </summary>
            <typeparam name="T">返回的结果类型</typeparam>
            <param name="instance">执行代码以此对象为上下文(在code中用$0表示，$0可省略)</param>
            <param name="code">被执行代码</param>
            <param name="objects">参数对象(在code中用$1表示第一个对象；$2表示第二个对象....)</param>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.ObjectDynamicExtension.ObjectDynamicExtension.E(System.Object,System.String,System.String[],System.Object[])">
            <summary>
            以instance为上下文，执行代码
            </summary>
            <param name="instance">执行代码以此对象为上下文(在code中用$0表示，$0可省略)</param>
            <param name="code">被执行代码</param>
            <param name="namespaces">引入命名空间</param>
            <param name="objects">参数对象(在code中用$1表示第一个对象；$2表示第二个对象....)</param>
            <returns></returns>
        </member>
        <member name="M:Zhucai.LambdaParser.ObjectDynamicExtension.ObjectDynamicExtension.E(System.Object,System.String,System.Object[])">
            <summary>
            以instance为上下文，执行代码
            </summary>
            <param name="instance">执行代码以此对象为上下文(在code中用$0表示，$0可省略)</param>
            <param name="code">被执行代码</param>
            <param name="objects">参数对象(在code中用$1表示第一个对象；$2表示第二个对象....)</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.International.Converters.PinYinConverter.ChineseChar.GetChineseSpell(System.Char)">
            <summary>
            
            </summary>
            <param name="ch"></param>
            <param name="withTone"></param>
            <returns></returns>
        </member>
        <member name="M:Pinyin.GetChineseSpell(System.String)">
            <summary>
            获得一个字符串的汉语拼音码, 如"客户"返回"KH"
            </summary>
        </member>
        <member name="M:Pinyin.AddFirstPinyin(System.String)">
            <summary>
            为指定的汉字加下第一个拼音, 如"客户"返回"K客户"
            </summary>
        </member>
        <member name="M:Pinyin.GetFirstPinyin(System.String)">
            <summary>
            获取首字的形状拼音字母, 如"客户"返回"K"
            </summary>
        </member>
        <member name="T:Encs">
            <summary>
            编码对象
            </summary>
        </member>
        <member name="T:Culis">
            <summary>
            编码对象
            </summary>
        </member>
        <member name="T:____CookieHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:____CookieHelper.GetCookieEnumator(System.Net.CookieContainer)">
            <summary>
            返回一个CookieContainer的枚举器
            </summary>
            <param name="cookies"></param>
            <returns></returns>
        </member>
        <member name="M:____CookieHelper.ToCookieDic(System.Net.CookieContainer)">
            <summary>
            返回一个CookieContainer的枚举器
            </summary>
            <param name="cookies"></param>
            <returns></returns>
        </member>
        <member name="P:Today.Begin">
            <summary>
            今天的起始时间，也就是0点
            </summary>
        </member>
        <member name="P:Today.End">
            <summary>
            今天的结束时间，也就是23：59：59点
            </summary>
        </member>
        <member name="P:Yesterday.Begin">
            <summary>
            今天的起始时间，也就是0点
            </summary>
        </member>
        <member name="P:Yesterday.End">
            <summary>
            今天的结束时间，也就是23：59：59点
            </summary>
        </member>
        <member name="P:Tomorrow.Begin">
            <summary>
            今天的起始时间，也就是0点
            </summary>
        </member>
        <member name="P:Tomorrow.End">
            <summary>
            今天的结束时间，也就是23：59：59点
            </summary>
        </member>
    </members>
</doc>
